
F4_neuron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000915c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b64  08009300  08009300  00019300  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e64  08009e64  00020a18  2**0
                  CONTENTS
  4 .ARM          00000008  08009e64  08009e64  00019e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e6c  08009e6c  00020a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e6c  08009e6c  00019e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e70  08009e70  00019e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a18  20000000  08009e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000a18  0800a88c  00020a18  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  20000ea0  0800a88c  00020ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001124d  00000000  00000000  00020a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c6  00000000  00000000  00031c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  00034e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00035788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236d4  00000000  00000000  00036360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd1b  00000000  00000000  00059a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0d7d  00000000  00000000  0006974f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0013a4cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a4c  00000000  00000000  0013a59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00005c88  00000000  00000000  0013cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  00142c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000183  00000000  00000000  00142d24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a18 	.word	0x20000a18
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092d4 	.word	0x080092d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a1c 	.word	0x20000a1c
 80001cc:	080092d4 	.word	0x080092d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_CRC_Init+0x18>)
{
 8000ea2:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <MX_CRC_Init+0x1c>)
 8000ea6:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ea8:	f000 fcb6 	bl	8001818 <HAL_CRC_Init>
 8000eac:	b118      	cbz	r0, 8000eb6 <MX_CRC_Init+0x16>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000eae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000eb2:	f000 b937 	b.w	8001124 <Error_Handler>
}
 8000eb6:	bd08      	pop	{r3, pc}
 8000eb8:	20000af4 	.word	0x20000af4
 8000ebc:	40023000 	.word	0x40023000

08000ec0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000ec0:	6802      	ldr	r2, [r0, #0]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_CRC_MspInit+0x28>)
 8000ec4:	429a      	cmp	r2, r3
{
 8000ec6:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000ec8:	d10b      	bne.n	8000ee2 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <HAL_CRC_MspInit+0x2c>)
 8000ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ed2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000ee2:	b002      	add	sp, #8
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40023000 	.word	0x40023000
 8000eec:	40023800 	.word	0x40023800

08000ef0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ef0:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_DMA_Init+0x30>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	9201      	str	r2, [sp, #4]
 8000ef8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000efa:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000efe:	6319      	str	r1, [r3, #48]	; 0x30
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f06:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f08:	4611      	mov	r1, r2
 8000f0a:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f0c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f0e:	f000 fc2d 	bl	800176c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f12:	2011      	movs	r0, #17

}
 8000f14:	b003      	add	sp, #12
 8000f16:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f1a:	f000 bc59 	b.w	80017d0 <HAL_NVIC_EnableIRQ>
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f24:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	2214      	movs	r2, #20
{
 8000f28:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	eb0d 0002 	add.w	r0, sp, r2
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f005 fb9e 	bl	8006670 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f34:	2400      	movs	r4, #0
 8000f36:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <MX_GPIO_Init+0x100>)
 8000f38:	9400      	str	r4, [sp, #0]
 8000f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f3c:	4d3a      	ldr	r5, [pc, #232]	; (8001028 <MX_GPIO_Init+0x104>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000f3e:	4e3b      	ldr	r6, [pc, #236]	; (800102c <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f40:	f042 0210 	orr.w	r2, r2, #16
 8000f44:	631a      	str	r2, [r3, #48]	; 0x30
 8000f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f48:	f002 0210 	and.w	r2, r2, #16
 8000f4c:	9200      	str	r2, [sp, #0]
 8000f4e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f50:	9401      	str	r4, [sp, #4]
 8000f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f58:	631a      	str	r2, [r3, #48]	; 0x30
 8000f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f5c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f60:	9201      	str	r2, [sp, #4]
 8000f62:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	9402      	str	r4, [sp, #8]
 8000f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f68:	f042 0201 	orr.w	r2, r2, #1
 8000f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f70:	f002 0201 	and.w	r2, r2, #1
 8000f74:	9202      	str	r2, [sp, #8]
 8000f76:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	9403      	str	r4, [sp, #12]
 8000f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f7c:	f042 0202 	orr.w	r2, r2, #2
 8000f80:	631a      	str	r2, [r3, #48]	; 0x30
 8000f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f84:	f002 0202 	and.w	r2, r2, #2
 8000f88:	9203      	str	r2, [sp, #12]
 8000f8a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8c:	9404      	str	r4, [sp, #16]
 8000f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f90:	f042 0208 	orr.w	r2, r2, #8
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f9e:	4622      	mov	r2, r4
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fa6:	f000 fe75 	bl	8001c94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000faa:	4622      	mov	r2, r4
 8000fac:	4630      	mov	r0, r6
 8000fae:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fb2:	f000 fe6f 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2701      	movs	r7, #1
 8000fb8:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fba:	a905      	add	r1, sp, #20
 8000fbc:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f000 fd8b 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000fca:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	a905      	add	r1, sp, #20
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f000 fd83 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000fda:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fde:	a905      	add	r1, sp, #20
 8000fe0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fea:	f000 fd79 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_GPIO_Init+0x110>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff2:	2203      	movs	r2, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff4:	a905      	add	r1, sp, #20
 8000ff6:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffc:	f000 fd70 	bl	8001ae0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001000:	4622      	mov	r2, r4
 8001002:	4621      	mov	r1, r4
 8001004:	2006      	movs	r0, #6
 8001006:	f000 fbb1 	bl	800176c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800100a:	2006      	movs	r0, #6
 800100c:	f000 fbe0 	bl	80017d0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001010:	4622      	mov	r2, r4
 8001012:	4621      	mov	r1, r4
 8001014:	2007      	movs	r0, #7
 8001016:	f000 fba9 	bl	800176c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800101a:	2007      	movs	r0, #7
 800101c:	f000 fbd8 	bl	80017d0 <HAL_NVIC_EnableIRQ>

}
 8001020:	b00b      	add	sp, #44	; 0x2c
 8001022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40021000 	.word	0x40021000
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40020400 	.word	0x40020400
 8001034:	10110000 	.word	0x10110000

08001038 <LIS3DSH_Write>:
    while ((SPI1->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
	;
    }

void LIS3DSH_Write(u8 reg, u8 *data, u8 len)
    {
 8001038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    //Enable CS
    _LIS3DHS_CS_ENBALE;
 800103a:	4c0e      	ldr	r4, [pc, #56]	; (8001074 <LIS3DSH_Write+0x3c>)
    {
 800103c:	f88d 0007 	strb.w	r0, [sp, #7]
    _LIS3DHS_CS_ENBALE;
 8001040:	6963      	ldr	r3, [r4, #20]
    //set register value
    HAL_SPI_Transmit(&hspi1, &reg, 1, 10);
 8001042:	4f0d      	ldr	r7, [pc, #52]	; (8001078 <LIS3DSH_Write+0x40>)
    _LIS3DHS_CS_ENBALE;
 8001044:	f023 0308 	bic.w	r3, r3, #8
    {
 8001048:	460d      	mov	r5, r1
 800104a:	4616      	mov	r6, r2
    _LIS3DHS_CS_ENBALE;
 800104c:	6163      	str	r3, [r4, #20]
    HAL_SPI_Transmit(&hspi1, &reg, 1, 10);
 800104e:	f10d 0107 	add.w	r1, sp, #7
 8001052:	230a      	movs	r3, #10
 8001054:	2201      	movs	r2, #1
 8001056:	4638      	mov	r0, r7
 8001058:	f001 f9d2 	bl	8002400 <HAL_SPI_Transmit>
//    SPI_send(&reg, 1);
    //Transmit data
//    SPI_send(data, len);
    HAL_SPI_Transmit(&hspi1, data, len, 10);
 800105c:	230a      	movs	r3, #10
 800105e:	4632      	mov	r2, r6
 8001060:	4629      	mov	r1, r5
 8001062:	4638      	mov	r0, r7
 8001064:	f001 f9cc 	bl	8002400 <HAL_SPI_Transmit>
//    SPI_wait();
    //Disable CS
    _LIS3DHS_CS_DISABLE;
 8001068:	6963      	ldr	r3, [r4, #20]
 800106a:	f043 0308 	orr.w	r3, r3, #8
 800106e:	6163      	str	r3, [r4, #20]
    }
 8001070:	b003      	add	sp, #12
 8001072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001074:	40021000 	.word	0x40021000
 8001078:	20000d90 	.word	0x20000d90

0800107c <LIS3DSH_init>:
    {
 800107c:	b513      	push	{r0, r1, r4, lr}
    u8 reg4 = LIS3DSH_DATARATE_25 | LIS3DSH_XYZ_ENABLE;
 800107e:	2347      	movs	r3, #71	; 0x47
 8001080:	f88d 3005 	strb.w	r3, [sp, #5]
    u8 reg5 = LIS3DSH_FULLSCALE_16;
 8001084:	2420      	movs	r4, #32
    u8 reg3 = LIS3DSH_INTERRUPT_SIGNAL_HIGH | LIS3DSH_INTERRUPT_1_ENABLE;
 8001086:	23c8      	movs	r3, #200	; 0xc8
    LIS3DSH_Write(LIS3DSH_CTRL_REG5_ADDR, &reg5, 1);
 8001088:	f10d 0107 	add.w	r1, sp, #7
 800108c:	2201      	movs	r2, #1
 800108e:	2024      	movs	r0, #36	; 0x24
    u8 reg3 = LIS3DSH_INTERRUPT_SIGNAL_HIGH | LIS3DSH_INTERRUPT_1_ENABLE;
 8001090:	f88d 3006 	strb.w	r3, [sp, #6]
    u8 reg5 = LIS3DSH_FULLSCALE_16;
 8001094:	f88d 4007 	strb.w	r4, [sp, #7]
    LIS3DSH_Write(LIS3DSH_CTRL_REG5_ADDR, &reg5, 1);
 8001098:	f7ff ffce 	bl	8001038 <LIS3DSH_Write>
    LIS3DSH_Write(LIS3DSH_CTRL_REG3_ADDR, &reg3, 1);
 800109c:	f10d 0106 	add.w	r1, sp, #6
 80010a0:	2201      	movs	r2, #1
 80010a2:	2023      	movs	r0, #35	; 0x23
 80010a4:	f7ff ffc8 	bl	8001038 <LIS3DSH_Write>
    LIS3DSH_Write(LIS3DSH_CTRL_REG4_ADDR, &reg4, 1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f10d 0105 	add.w	r1, sp, #5
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff ffc2 	bl	8001038 <LIS3DSH_Write>
    }
 80010b4:	b002      	add	sp, #8
 80010b6:	bd10      	pop	{r4, pc}

080010b8 <LIS3DSH_Read>:

void LIS3DSH_Read(uint8_t reg, u8 *data, u8 len)
    {
 80010b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8 reg_read = reg | 0x80;
    //Enable CS
    _LIS3DHS_CS_ENBALE;
 80010ba:	4c0f      	ldr	r4, [pc, #60]	; (80010f8 <LIS3DSH_Read+0x40>)
    //set register value
    HAL_SPI_Transmit(&hspi1, &reg_read, 1, 10);
 80010bc:	4f0f      	ldr	r7, [pc, #60]	; (80010fc <LIS3DSH_Read+0x44>)
    u8 reg_read = reg | 0x80;
 80010be:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80010c2:	f88d 0007 	strb.w	r0, [sp, #7]
    _LIS3DHS_CS_ENBALE;
 80010c6:	6963      	ldr	r3, [r4, #20]
 80010c8:	f023 0308 	bic.w	r3, r3, #8
    {
 80010cc:	460d      	mov	r5, r1
 80010ce:	4616      	mov	r6, r2
    _LIS3DHS_CS_ENBALE;
 80010d0:	6163      	str	r3, [r4, #20]
    HAL_SPI_Transmit(&hspi1, &reg_read, 1, 10);
 80010d2:	f10d 0107 	add.w	r1, sp, #7
 80010d6:	230a      	movs	r3, #10
 80010d8:	2201      	movs	r2, #1
 80010da:	4638      	mov	r0, r7
 80010dc:	f001 f990 	bl	8002400 <HAL_SPI_Transmit>
//    SPI_send(&reg_read, 1);
    //Transmit data
    HAL_SPI_Receive(&hspi1, data, len, 10);
 80010e0:	230a      	movs	r3, #10
 80010e2:	4632      	mov	r2, r6
 80010e4:	4629      	mov	r1, r5
 80010e6:	4638      	mov	r0, r7
 80010e8:	f001 fb26 	bl	8002738 <HAL_SPI_Receive>
//    SPI_read(data, len);
//    SPI_wait();
    //Disable CS
    _LIS3DHS_CS_DISABLE;
 80010ec:	6963      	ldr	r3, [r4, #20]
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6163      	str	r3, [r4, #20]
    }
 80010f4:	b003      	add	sp, #12
 80010f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	20000d90 	.word	0x20000d90

08001100 <LIS3DSH_GetDataRaw>:
    {
 8001100:	4601      	mov	r1, r0
    LIS3DSH_Read(LIS3DSH_OUT_X_L_ADDR, (u8*) &data->x, 6);
 8001102:	2206      	movs	r2, #6
 8001104:	2028      	movs	r0, #40	; 0x28
 8001106:	f7ff bfd7 	b.w	80010b8 <LIS3DSH_Read>
	...

0800110c <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int fd, char *ptr, int len)
    {
 800110c:	b510      	push	{r4, lr}
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
    {
 8001112:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <_write+0x14>)
 8001116:	b292      	uxth	r2, r2
 8001118:	f001 fc5e 	bl	80029d8 <HAL_UART_Transmit>
    return len;
    }
 800111c:	4620      	mov	r0, r4
 800111e:	bd10      	pop	{r4, pc}
 8001120:	20000e48 	.word	0x20000e48

08001124 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
    {
 8001124:	b508      	push	{r3, lr}
    /* USER CODE BEGIN Error_Handler_Debug */
    while (1)
	{
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001126:	4c05      	ldr	r4, [pc, #20]	; (800113c <Error_Handler+0x18>)
 8001128:	4620      	mov	r0, r4
 800112a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112e:	f000 fdb6 	bl	8001c9e <HAL_GPIO_TogglePin>
	HAL_Delay(50); /* wait 50 ms */
 8001132:	2032      	movs	r0, #50	; 0x32
 8001134:	f000 faf4 	bl	8001720 <HAL_Delay>
    while (1)
 8001138:	e7f6      	b.n	8001128 <Error_Handler+0x4>
 800113a:	bf00      	nop
 800113c:	40020c00 	.word	0x40020c00

08001140 <SystemClock_Config>:
    {
 8001140:	b510      	push	{r4, lr}
 8001142:	b094      	sub	sp, #80	; 0x50
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8001144:	2210      	movs	r2, #16
 8001146:	2100      	movs	r1, #0
 8001148:	a80a      	add	r0, sp, #40	; 0x28
 800114a:	f005 fa91 	bl	8006670 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800114e:	2214      	movs	r2, #20
 8001150:	2100      	movs	r1, #0
 8001152:	a803      	add	r0, sp, #12
 8001154:	f005 fa8c 	bl	8006670 <memset>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	4b20      	ldr	r3, [pc, #128]	; (80011dc <SystemClock_Config+0x9c>)
 800115a:	2100      	movs	r1, #0
 800115c:	9101      	str	r1, [sp, #4]
 800115e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001160:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	9b01      	ldr	r3, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <SystemClock_Config+0xa0>)
 8001172:	9102      	str	r1, [sp, #8]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001186:	2101      	movs	r1, #1
 8001188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118c:	2402      	movs	r4, #2
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118e:	e9cd 1308 	strd	r1, r3, [sp, #32]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001196:	2008      	movs	r0, #8
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001198:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLN = 336;
 800119c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011a0:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a4:	2307      	movs	r3, #7
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a8:	9412      	str	r4, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80011aa:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f000 fd8c 	bl	8001cc8 <HAL_RCC_OscConfig>
 80011b0:	b108      	cbz	r0, 80011b6 <SystemClock_Config+0x76>
	Error_Handler();
 80011b2:	f7ff ffb7 	bl	8001124 <Error_Handler>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011b6:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	e9cd 3403 	strd	r3, r4, [sp, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	9005      	str	r0, [sp, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011be:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80011c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c6:	2105      	movs	r1, #5
 80011c8:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ce:	f000 ff55 	bl	800207c <HAL_RCC_ClockConfig>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d1ed      	bne.n	80011b2 <SystemClock_Config+0x72>
    }
 80011d6:	b014      	add	sp, #80	; 0x50
 80011d8:	bd10      	pop	{r4, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <HAL_GPIO_EXTI_Callback>:
    {
 80011e4:	b570      	push	{r4, r5, r6, lr}
    if (GPIO_Pin == GPIO_PIN_0)
 80011e6:	2801      	cmp	r0, #1
    {
 80011e8:	b08c      	sub	sp, #48	; 0x30
 80011ea:	4604      	mov	r4, r0
    if (GPIO_Pin == GPIO_PIN_0)
 80011ec:	d15d      	bne.n	80012aa <HAL_GPIO_EXTI_Callback+0xc6>
	LIS3DSH_GetDataRaw(&raw);
 80011ee:	4d44      	ldr	r5, [pc, #272]	; (8001300 <HAL_GPIO_EXTI_Callback+0x11c>)
	aiInData[write_index + 0] = (float) raw.x / (1.7f * 4000.0f);
 80011f0:	4e44      	ldr	r6, [pc, #272]	; (8001304 <HAL_GPIO_EXTI_Callback+0x120>)
	LIS3DSH_GetDataRaw(&raw);
 80011f2:	4628      	mov	r0, r5
 80011f4:	f7ff ff84 	bl	8001100 <LIS3DSH_GetDataRaw>
	aiInData[write_index + 0] = (float) raw.x / (1.7f * 4000.0f);
 80011f8:	f9b5 2000 	ldrsh.w	r2, [r5]
 80011fc:	eddf 7a42 	vldr	s15, [pc, #264]	; 8001308 <HAL_GPIO_EXTI_Callback+0x124>
 8001200:	4942      	ldr	r1, [pc, #264]	; (800130c <HAL_GPIO_EXTI_Callback+0x128>)
 8001202:	ee07 2a10 	vmov	s14, r2
 8001206:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	aiInData[write_index + 1] = (float) raw.y / (1.7f * 4000.0f);
 800120a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
	aiInData[write_index + 0] = (float) raw.x / (1.7f * 4000.0f);
 800120e:	680b      	ldr	r3, [r1, #0]
 8001210:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001214:	eb06 0083 	add.w	r0, r6, r3, lsl #2
	write_index += 3;
 8001218:	3303      	adds	r3, #3
	if (write_index == AI_NETWORK_IN_1_SIZE)
 800121a:	2b4e      	cmp	r3, #78	; 0x4e
	write_index += 3;
 800121c:	600b      	str	r3, [r1, #0]
 800121e:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <HAL_GPIO_EXTI_Callback+0x12c>)
	aiInData[write_index + 1] = (float) raw.y / (1.7f * 4000.0f);
 8001220:	ee07 2a10 	vmov	s14, r2
 8001224:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	aiInData[write_index + 0] = (float) raw.x / (1.7f * 4000.0f);
 8001228:	edc0 6a00 	vstr	s13, [r0]
	aiInData[write_index + 1] = (float) raw.y / (1.7f * 4000.0f);
 800122c:	eec7 6a27 	vdiv.f32	s13, s14, s15
	aiInData[write_index + 2] = (float) raw.z / (1.7f * 4000.0f);
 8001230:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8001234:	ee07 2a10 	vmov	s14, r2
 8001238:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	aiInData[write_index + 1] = (float) raw.y / (1.7f * 4000.0f);
 800123c:	edc0 6a01 	vstr	s13, [r0, #4]
	aiInData[write_index + 2] = (float) raw.z / (1.7f * 4000.0f);
 8001240:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001244:	edc0 6a02 	vstr	s13, [r0, #8]
	if (write_index == AI_NETWORK_IN_1_SIZE)
 8001248:	d12c      	bne.n	80012a4 <HAL_GPIO_EXTI_Callback+0xc0>
	    write_index = 0;
 800124a:	2200      	movs	r2, #0
 800124c:	600a      	str	r2, [r1, #0]
	    start = 1;
 800124e:	701c      	strb	r4, [r3, #0]
    ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN
 8001250:	4c30      	ldr	r4, [pc, #192]	; (8001314 <HAL_GPIO_EXTI_Callback+0x130>)
 8001252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001254:	466d      	mov	r5, sp
 8001256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001258:	e894 0003 	ldmia.w	r4, {r0, r1}
    ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT
 800125c:	3408      	adds	r4, #8
    ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN
 800125e:	e885 0003 	stmia.w	r5, {r0, r1}
    ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT
 8001262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001264:	ad06      	add	r5, sp, #24
 8001266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001268:	e894 0003 	ldmia.w	r4, {r0, r1}
 800126c:	e885 0003 	stmia.w	r5, {r0, r1}
    batch = ai_network_run(network, ai_input, ai_output);
 8001270:	4d29      	ldr	r5, [pc, #164]	; (8001318 <HAL_GPIO_EXTI_Callback+0x134>)
    ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001272:	4c2a      	ldr	r4, [pc, #168]	; (800131c <HAL_GPIO_EXTI_Callback+0x138>)
    batch = ai_network_run(network, ai_input, ai_output);
 8001274:	6828      	ldr	r0, [r5, #0]
    ai_input[0].data = AI_HANDLE_PTR(pIn);
 8001276:	9604      	str	r6, [sp, #16]
    ai_input[0].n_batches = 1;
 8001278:	2301      	movs	r3, #1
    batch = ai_network_run(network, ai_input, ai_output);
 800127a:	aa06      	add	r2, sp, #24
 800127c:	4669      	mov	r1, sp
    ai_input[0].n_batches = 1;
 800127e:	f8ad 3004 	strh.w	r3, [sp, #4]
    ai_output[0].n_batches = 1;
 8001282:	f8ad 301c 	strh.w	r3, [sp, #28]
    ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001286:	940a      	str	r4, [sp, #40]	; 0x28
    batch = ai_network_run(network, ai_input, ai_output);
 8001288:	f001 fca4 	bl	8002bd4 <ai_network_run>
    if (batch != 1)
 800128c:	2801      	cmp	r0, #1
 800128e:	d00e      	beq.n	80012ae <HAL_GPIO_EXTI_Callback+0xca>
	err = ai_network_get_error(network);
 8001290:	6828      	ldr	r0, [r5, #0]
 8001292:	f001 fbf6 	bl	8002a82 <ai_network_get_error>
	printf("AI ai_network_run error - type=%d code=%d\r\n", err.type,
 8001296:	0a02      	lsrs	r2, r0, #8
 8001298:	b2c1      	uxtb	r1, r0
 800129a:	4821      	ldr	r0, [pc, #132]	; (8001320 <HAL_GPIO_EXTI_Callback+0x13c>)
 800129c:	f005 ff04 	bl	80070a8 <iprintf>
	Error_Handler();
 80012a0:	f7ff ff40 	bl	8001124 <Error_Handler>
	if (start != 0)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1d2      	bne.n	8001250 <HAL_GPIO_EXTI_Callback+0x6c>
    }
 80012aa:	b00c      	add	sp, #48	; 0x30
 80012ac:	bd70      	pop	{r4, r5, r6, pc}
    float max_value = values[0];
 80012ae:	edd4 7a00 	vldr	s15, [r4]
	if (values[i] > max_value)
 80012b2:	ed94 7a01 	vldr	s14, [r4, #4]
	    printf(": %d - %s\r\n", (int) class, activities[class]);
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_GPIO_EXTI_Callback+0x140>)
	if (values[i] > max_value)
 80012b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	bf48      	it	mi
 80012c2:	eef0 7a47 	vmovmi.f32	s15, s14
 80012c6:	ed94 7a02 	vldr	s14, [r4, #8]
 80012ca:	eef4 7ac7 	vcmpe.f32	s15, s14
    for (uint32_t i = 1; i < len; i++)
 80012ce:	bf4c      	ite	mi
 80012d0:	4601      	movmi	r1, r0
    uint32_t max_index = 0;
 80012d2:	2100      	movpl	r1, #0
	if (values[i] > max_value)
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	bf48      	it	mi
 80012da:	eef0 7a47 	vmovmi.f32	s15, s14
 80012de:	ed94 7a03 	vldr	s14, [r4, #12]
	    printf(": %d - %s\r\n", (int) class, activities[class]);
 80012e2:	4811      	ldr	r0, [pc, #68]	; (8001328 <HAL_GPIO_EXTI_Callback+0x144>)
    for (uint32_t i = 1; i < len; i++)
 80012e4:	eef4 7a47 	vcmp.f32	s15, s14
 80012e8:	bf48      	it	mi
 80012ea:	2102      	movmi	r1, #2
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	bf48      	it	mi
 80012f2:	2103      	movmi	r1, #3
	    printf(": %d - %s\r\n", (int) class, activities[class]);
 80012f4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80012f8:	f005 fed6 	bl	80070a8 <iprintf>
    }
 80012fc:	e7d5      	b.n	80012aa <HAL_GPIO_EXTI_Callback+0xc6>
 80012fe:	bf00      	nop
 8001300:	20000d84 	.word	0x20000d84
 8001304:	20000c4c 	.word	0x20000c4c
 8001308:	45d48000 	.word	0x45d48000
 800130c:	20000a38 	.word	0x20000a38
 8001310:	20000a34 	.word	0x20000a34
 8001314:	08009300 	.word	0x08009300
 8001318:	20000d8c 	.word	0x20000d8c
 800131c:	20000afc 	.word	0x20000afc
 8001320:	08009334 	.word	0x08009334
 8001324:	20000000 	.word	0x20000000
 8001328:	08009360 	.word	0x08009360

0800132c <main>:
    {
 800132c:	b500      	push	{lr}
 800132e:	b08d      	sub	sp, #52	; 0x34
    HAL_Init();
 8001330:	f000 f9ca 	bl	80016c8 <HAL_Init>
    SystemClock_Config();
 8001334:	f7ff ff04 	bl	8001140 <SystemClock_Config>
    MX_GPIO_Init();
 8001338:	f7ff fdf4 	bl	8000f24 <MX_GPIO_Init>
    MX_DMA_Init();
 800133c:	f7ff fdd8 	bl	8000ef0 <MX_DMA_Init>
    MX_CRC_Init();
 8001340:	f7ff fdae 	bl	8000ea0 <MX_CRC_Init>
    MX_SPI1_Init();
 8001344:	f000 f84c 	bl	80013e0 <MX_SPI1_Init>
    MX_USART2_UART_Init();
 8001348:	f000 f900 	bl	800154c <MX_USART2_UART_Init>
    HAL_Delay(200);
 800134c:	20c8      	movs	r0, #200	; 0xc8
 800134e:	f000 f9e7 	bl	8001720 <HAL_Delay>
    AI_Init(ai_network_data_weights_get(), activations);
 8001352:	f001 fc41 	bl	8002bd8 <ai_network_data_weights_get>
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8001356:	4c1c      	ldr	r4, [pc, #112]	; (80013c8 <main+0x9c>)
 8001358:	2100      	movs	r1, #0
    AI_Init(ai_network_data_weights_get(), activations);
 800135a:	4605      	mov	r5, r0
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800135c:	4620      	mov	r0, r4
 800135e:	f001 fb93 	bl	8002a88 <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 8001362:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8001366:	d005      	beq.n	8001374 <main+0x48>
	printf("ai_network_create error - type=%d code=%d\r\n", err.type,
 8001368:	0a02      	lsrs	r2, r0, #8
 800136a:	4818      	ldr	r0, [pc, #96]	; (80013cc <main+0xa0>)
	printf("ai_network_init error - type=%d code=%d\r\n", err.type,
 800136c:	f005 fe9c 	bl	80070a8 <iprintf>
	Error_Handler();
 8001370:	f7ff fed8 	bl	8001124 <Error_Handler>
    const ai_network_params params =
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <main+0xa4>)
 8001376:	9105      	str	r1, [sp, #20]
 8001378:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800137c:	e9cd 3200 	strd	r3, r2, [sp]
 8001380:	2301      	movs	r3, #1
 8001382:	f44f 60c5 	mov.w	r0, #1576	; 0x628
 8001386:	f8ad 3008 	strh.w	r3, [sp, #8]
 800138a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800138e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001392:	e9cd 0503 	strd	r0, r5, [sp, #12]
 8001396:	9309      	str	r3, [sp, #36]	; 0x24
 8001398:	480e      	ldr	r0, [pc, #56]	; (80013d4 <main+0xa8>)
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <main+0xac>)
 800139c:	e9cd 0206 	strd	r0, r2, [sp, #24]
 80013a0:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
    if (!ai_network_init(network, &params))
 80013a4:	6820      	ldr	r0, [r4, #0]
 80013a6:	4669      	mov	r1, sp
 80013a8:	f001 fb7c 	bl	8002aa4 <ai_network_init>
 80013ac:	b930      	cbnz	r0, 80013bc <main+0x90>
	err = ai_network_get_error(network);
 80013ae:	6820      	ldr	r0, [r4, #0]
 80013b0:	f001 fb67 	bl	8002a82 <ai_network_get_error>
	printf("ai_network_init error - type=%d code=%d\r\n", err.type,
 80013b4:	0a02      	lsrs	r2, r0, #8
 80013b6:	b2c1      	uxtb	r1, r0
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <main+0xb0>)
 80013ba:	e7d7      	b.n	800136c <main+0x40>
    LIS3DSH_init();
 80013bc:	f7ff fe5e 	bl	800107c <LIS3DSH_init>
	HAL_Delay(40);
 80013c0:	2028      	movs	r0, #40	; 0x28
 80013c2:	f000 f9ad 	bl	8001720 <HAL_Delay>
    while (1)
 80013c6:	e7fb      	b.n	80013c0 <main+0x94>
 80013c8:	20000d8c 	.word	0x20000d8c
 80013cc:	0800936c 	.word	0x0800936c
 80013d0:	40040440 	.word	0x40040440
 80013d4:	00040440 	.word	0x00040440
 80013d8:	20000b0c 	.word	0x20000b0c
 80013dc:	08009398 	.word	0x08009398

080013e0 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <MX_SPI1_Init+0x40>)
{
 80013e4:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013ea:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ee:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001400:	2210      	movs	r2, #16
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001402:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001404:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001406:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800140a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800140c:	f000 ff9c 	bl	8002348 <HAL_SPI_Init>
 8001410:	b118      	cbz	r0, 800141a <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001416:	f7ff be85 	b.w	8001124 <Error_Handler>
}
 800141a:	bd08      	pop	{r3, pc}
 800141c:	20000d90 	.word	0x20000d90
 8001420:	40013000 	.word	0x40013000

08001424 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001424:	b510      	push	{r4, lr}
 8001426:	4604      	mov	r4, r0
 8001428:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	2214      	movs	r2, #20
 800142c:	2100      	movs	r1, #0
 800142e:	a803      	add	r0, sp, #12
 8001430:	f005 f91e 	bl	8006670 <memset>
  if(spiHandle->Instance==SPI1)
 8001434:	6822      	ldr	r2, [r4, #0]
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_SPI_MspInit+0x64>)
 8001438:	429a      	cmp	r2, r3
 800143a:	d122      	bne.n	8001482 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001440:	2200      	movs	r2, #0
 8001442:	9201      	str	r2, [sp, #4]
 8001444:	6c59      	ldr	r1, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	4811      	ldr	r0, [pc, #68]	; (800148c <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001448:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800144c:	6459      	str	r1, [r3, #68]	; 0x44
 800144e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001450:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8001454:	9101      	str	r1, [sp, #4]
 8001456:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	9202      	str	r2, [sp, #8]
 800145a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800145c:	f041 0101 	orr.w	r1, r1, #1
 8001460:	6319      	str	r1, [r3, #48]	; 0x30
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	21e0      	movs	r1, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001474:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	e9cd 2205 	strd	r2, r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f000 fb2f 	bl	8001ae0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001482:	b008      	add	sp, #32
 8001484:	bd10      	pop	{r4, pc}
 8001486:	bf00      	nop
 8001488:	40013000 	.word	0x40013000
 800148c:	40020000 	.word	0x40020000

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_MspInit+0x38>)
 8001494:	2100      	movs	r1, #0
 8001496:	9100      	str	r1, [sp, #0]
 8001498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800149a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800149e:	645a      	str	r2, [r3, #68]	; 0x44
 80014a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014a2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014a6:	9200      	str	r2, [sp, #0]
 80014a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	9101      	str	r1, [sp, #4]
 80014ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014be:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c0:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014c2:	f000 b941 	b.w	8001748 <HAL_NVIC_SetPriorityGrouping>
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <NMI_Handler>

080014ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler>

080014d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler>

080014d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler>

080014d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler>

080014d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	4770      	bx	lr

080014d8 <DebugMon_Handler>:
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:
 80014da:	4770      	bx	lr

080014dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 b90e 	b.w	80016fc <HAL_IncTick>

080014e0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f000 bbe5 	b.w	8001cb0 <HAL_GPIO_EXTI_IRQHandler>

080014e6 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80014e6:	2002      	movs	r0, #2
 80014e8:	f000 bbe2 	b.w	8001cb0 <HAL_GPIO_EXTI_IRQHandler>

080014ec <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014ec:	4801      	ldr	r0, [pc, #4]	; (80014f4 <DMA1_Stream6_IRQHandler+0x8>)
 80014ee:	f000 ba39 	b.w	8001964 <HAL_DMA_IRQHandler>
 80014f2:	bf00      	nop
 80014f4:	20000de8 	.word	0x20000de8

080014f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <_sbrk+0x30>)
 80014fa:	6819      	ldr	r1, [r3, #0]
{
 80014fc:	b510      	push	{r4, lr}
 80014fe:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001500:	b909      	cbnz	r1, 8001506 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001502:	490a      	ldr	r1, [pc, #40]	; (800152c <_sbrk+0x34>)
 8001504:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	4909      	ldr	r1, [pc, #36]	; (8001530 <_sbrk+0x38>)
 800150a:	4c0a      	ldr	r4, [pc, #40]	; (8001534 <_sbrk+0x3c>)
 800150c:	4402      	add	r2, r0
 800150e:	1b09      	subs	r1, r1, r4
 8001510:	428a      	cmp	r2, r1
 8001512:	d906      	bls.n	8001522 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001514:	f005 f86c 	bl	80065f0 <__errno>
 8001518:	230c      	movs	r3, #12
 800151a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800151c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001520:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001522:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001524:	e7fc      	b.n	8001520 <_sbrk+0x28>
 8001526:	bf00      	nop
 8001528:	20000a3c 	.word	0x20000a3c
 800152c:	20000ea0 	.word	0x20000ea0
 8001530:	20020000 	.word	0x20020000
 8001534:	00002000 	.word	0x00002000

08001538 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001538:	4a03      	ldr	r2, [pc, #12]	; (8001548 <SystemInit+0x10>)
 800153a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800153e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001542:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800154e:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <MX_USART2_UART_Init+0x34>)
{
 8001550:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8001552:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001556:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800155c:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800155e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001566:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156a:	f001 fa07 	bl	800297c <HAL_UART_Init>
 800156e:	b118      	cbz	r0, 8001578 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001570:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001574:	f7ff bdd6 	b.w	8001124 <Error_Handler>
}
 8001578:	bd08      	pop	{r3, pc}
 800157a:	bf00      	nop
 800157c:	20000e48 	.word	0x20000e48
 8001580:	40004400 	.word	0x40004400

08001584 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	4606      	mov	r6, r0
 8001588:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	2214      	movs	r2, #20
 800158c:	2100      	movs	r1, #0
 800158e:	a803      	add	r0, sp, #12
 8001590:	f005 f86e 	bl	8006670 <memset>
  if(uartHandle->Instance==USART2)
 8001594:	6832      	ldr	r2, [r6, #0]
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_UART_MspInit+0x98>)
 8001598:	429a      	cmp	r2, r3
 800159a:	d13c      	bne.n	8001616 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800159c:	2500      	movs	r5, #0
 800159e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80015a2:	9501      	str	r5, [sp, #4]
 80015a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	481e      	ldr	r0, [pc, #120]	; (8001620 <HAL_UART_MspInit+0x9c>)

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80015a8:	4c1e      	ldr	r4, [pc, #120]	; (8001624 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80015aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015ae:	641a      	str	r2, [r3, #64]	; 0x40
 80015b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80015b6:	9201      	str	r2, [sp, #4]
 80015b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	9502      	str	r5, [sp, #8]
 80015bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	220c      	movs	r2, #12
 80015d2:	2302      	movs	r3, #2
 80015d4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d8:	2103      	movs	r1, #3
 80015da:	2307      	movs	r3, #7
 80015dc:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	a903      	add	r1, sp, #12
 80015e2:	f000 fa7d 	bl	8001ae0 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80015e6:	4810      	ldr	r0, [pc, #64]	; (8001628 <HAL_UART_MspInit+0xa4>)
 80015e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015ec:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f0:	2340      	movs	r3, #64	; 0x40
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f2:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015f6:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015fc:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001600:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001604:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001608:	f000 f92c 	bl	8001864 <HAL_DMA_Init>
 800160c:	b108      	cbz	r0, 8001612 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 800160e:	f7ff fd89 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001612:	6374      	str	r4, [r6, #52]	; 0x34
 8001614:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001616:	b008      	add	sp, #32
 8001618:	bd70      	pop	{r4, r5, r6, pc}
 800161a:	bf00      	nop
 800161c:	40004400 	.word	0x40004400
 8001620:	40020000 	.word	0x40020000
 8001624:	20000de8 	.word	0x20000de8
 8001628:	400260a0 	.word	0x400260a0

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001656:	f7ff ff6f 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f004 ffcf 	bl	80065fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff fe65 	bl	800132c <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000a18 	.word	0x20000a18
  ldr r2, =_sidata
 8001670:	08009e74 	.word	0x08009e74
  ldr r2, =_sbss
 8001674:	20000a18 	.word	0x20000a18
  ldr r4, =_ebss
 8001678:	20000ea0 	.word	0x20000ea0

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>
	...

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_InitTick+0x3c>)
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_InitTick+0x40>)
{
 8001686:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001688:	7818      	ldrb	r0, [r3, #0]
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001692:	6810      	ldr	r0, [r2, #0]
 8001694:	fbb0 f0f3 	udiv	r0, r0, r3
 8001698:	f000 f8a8 	bl	80017ec <HAL_SYSTICK_Config>
 800169c:	4604      	mov	r4, r0
 800169e:	b958      	cbnz	r0, 80016b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a0:	2d0f      	cmp	r5, #15
 80016a2:	d809      	bhi.n	80016b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	4602      	mov	r2, r0
 80016a6:	4629      	mov	r1, r5
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 f85e 	bl	800176c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_InitTick+0x44>)
 80016b2:	4620      	mov	r0, r4
 80016b4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80016b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
 80016ba:	e7fc      	b.n	80016b6 <HAL_InitTick+0x36>
 80016bc:	20000010 	.word	0x20000010
 80016c0:	20000014 	.word	0x20000014
 80016c4:	20000018 	.word	0x20000018

080016c8 <HAL_Init>:
{
 80016c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_Init+0x30>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f82f 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff ffc8 	bl	8001680 <HAL_InitTick>
  HAL_MspInit();
 80016f0:	f7ff fece 	bl	8001490 <HAL_MspInit>
}
 80016f4:	2000      	movs	r0, #0
 80016f6:	bd08      	pop	{r3, pc}
 80016f8:	40023c00 	.word	0x40023c00

080016fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016fc:	4a03      	ldr	r2, [pc, #12]	; (800170c <HAL_IncTick+0x10>)
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <HAL_IncTick+0x14>)
 8001700:	6811      	ldr	r1, [r2, #0]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	440b      	add	r3, r1
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000e8c 	.word	0x20000e8c
 8001710:	20000014 	.word	0x20000014

08001714 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001714:	4b01      	ldr	r3, [pc, #4]	; (800171c <HAL_GetTick+0x8>)
 8001716:	6818      	ldr	r0, [r3, #0]
}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000e8c 	.word	0x20000e8c

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b538      	push	{r3, r4, r5, lr}
 8001722:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff fff6 	bl	8001714 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001728:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	bf1c      	itt	ne
 800172c:	4b05      	ldrne	r3, [pc, #20]	; (8001744 <HAL_Delay+0x24>)
 800172e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001730:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001732:	bf18      	it	ne
 8001734:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001736:	f7ff ffed 	bl	8001714 <HAL_GetTick>
 800173a:	1b43      	subs	r3, r0, r5
 800173c:	42a3      	cmp	r3, r4
 800173e:	d3fa      	bcc.n	8001736 <HAL_Delay+0x16>
  {
  }
}
 8001740:	bd38      	pop	{r3, r4, r5, pc}
 8001742:	bf00      	nop
 8001744:	20000014 	.word	0x20000014

08001748 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800174a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001758:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001764:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176e:	b530      	push	{r4, r5, lr}
 8001770:	68dc      	ldr	r4, [r3, #12]
 8001772:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001776:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	2d04      	cmp	r5, #4
 800177e:	bf28      	it	cs
 8001780:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001788:	bf8c      	ite	hi
 800178a:	3c03      	subhi	r4, #3
 800178c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178e:	fa03 f505 	lsl.w	r5, r3, r5
 8001792:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001796:	40a3      	lsls	r3, r4
 8001798:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800179e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	bfac      	ite	ge
 80017a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	4a08      	ldrlt	r2, [pc, #32]	; (80017cc <HAL_NVIC_SetPriority+0x60>)
 80017ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017b0:	bfb8      	it	lt
 80017b2:	f000 000f 	andlt.w	r0, r0, #15
 80017b6:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	bfaa      	itet	ge
 80017ba:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017c4:	bd30      	pop	{r4, r5, pc}
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	e000ed14 	.word	0xe000ed14

080017d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017d0:	2800      	cmp	r0, #0
 80017d2:	db08      	blt.n	80017e6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d4:	0942      	lsrs	r2, r0, #5
 80017d6:	2301      	movs	r3, #1
 80017d8:	f000 001f 	and.w	r0, r0, #31
 80017dc:	fa03 f000 	lsl.w	r0, r3, r0
 80017e0:	4b01      	ldr	r3, [pc, #4]	; (80017e8 <HAL_NVIC_EnableIRQ+0x18>)
 80017e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100

080017ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	3801      	subs	r0, #1
 80017ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017f2:	d20a      	bcs.n	800180a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	21f0      	movs	r1, #240	; 0xf0
 80017fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001818:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800181a:	4604      	mov	r4, r0
 800181c:	b150      	cbz	r0, 8001834 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800181e:	7943      	ldrb	r3, [r0, #5]
 8001820:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001824:	b913      	cbnz	r3, 800182c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001826:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001828:	f7ff fb4a 	bl	8000ec0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800182c:	2301      	movs	r3, #1
 800182e:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001830:	2000      	movs	r0, #0
}
 8001832:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
 8001836:	e7fc      	b.n	8001832 <HAL_CRC_Init+0x1a>

08001838 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001838:	6803      	ldr	r3, [r0, #0]
{
 800183a:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800183c:	4c08      	ldr	r4, [pc, #32]	; (8001860 <DMA_CalcBaseAndBitshift+0x28>)
{
 800183e:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001840:	b2d9      	uxtb	r1, r3
 8001842:	3910      	subs	r1, #16
 8001844:	2018      	movs	r0, #24
 8001846:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800184a:	5c20      	ldrb	r0, [r4, r0]
 800184c:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 800184e:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001852:	f020 0003 	bic.w	r0, r0, #3
 8001856:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001858:	bf88      	it	hi
 800185a:	3004      	addhi	r0, #4
 800185c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800185e:	bd10      	pop	{r4, pc}
 8001860:	080093f0 	.word	0x080093f0

08001864 <HAL_DMA_Init>:
{
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ff54 	bl	8001714 <HAL_GetTick>
 800186c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800186e:	2c00      	cmp	r4, #0
 8001870:	d073      	beq.n	800195a <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 8001872:	2300      	movs	r3, #0
 8001874:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001878:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800187a:	2302      	movs	r3, #2
 800187c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001880:	6813      	ldr	r3, [r2, #0]
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001888:	6821      	ldr	r1, [r4, #0]
 800188a:	680b      	ldr	r3, [r1, #0]
 800188c:	07d8      	lsls	r0, r3, #31
 800188e:	d42f      	bmi.n	80018f0 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001890:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001892:	4d33      	ldr	r5, [pc, #204]	; (8001960 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001894:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001896:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001898:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800189c:	4313      	orrs	r3, r2
 800189e:	68e2      	ldr	r2, [r4, #12]
 80018a0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a2:	6922      	ldr	r2, [r4, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	6962      	ldr	r2, [r4, #20]
 80018a8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018aa:	69e2      	ldr	r2, [r4, #28]
 80018ac:	4303      	orrs	r3, r0
 80018ae:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b0:	6a22      	ldr	r2, [r4, #32]
 80018b2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018b6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018bc:	bf02      	ittt	eq
 80018be:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80018c2:	4335      	orreq	r5, r6
 80018c4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80018c6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80018c8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ca:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018cc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80018d0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018d4:	d133      	bne.n	800193e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80018d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018d8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80018da:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018dc:	b37d      	cbz	r5, 800193e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018de:	b990      	cbnz	r0, 8001906 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80018e0:	2a01      	cmp	r2, #1
 80018e2:	d021      	beq.n	8001928 <HAL_DMA_Init+0xc4>
 80018e4:	f032 0202 	bics.w	r2, r2, #2
 80018e8:	d129      	bne.n	800193e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ea:	01ea      	lsls	r2, r5, #7
 80018ec:	d527      	bpl.n	800193e <HAL_DMA_Init+0xda>
 80018ee:	e01e      	b.n	800192e <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018f0:	f7ff ff10 	bl	8001714 <HAL_GetTick>
 80018f4:	1b40      	subs	r0, r0, r5
 80018f6:	2805      	cmp	r0, #5
 80018f8:	d9c6      	bls.n	8001888 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018fa:	2320      	movs	r3, #32
 80018fc:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fe:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001900:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001904:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001906:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800190a:	d114      	bne.n	8001936 <HAL_DMA_Init+0xd2>
    switch (tmp)
 800190c:	2a03      	cmp	r2, #3
 800190e:	d816      	bhi.n	800193e <HAL_DMA_Init+0xda>
 8001910:	a001      	add	r0, pc, #4	; (adr r0, 8001918 <HAL_DMA_Init+0xb4>)
 8001912:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001916:	bf00      	nop
 8001918:	0800192f 	.word	0x0800192f
 800191c:	080018eb 	.word	0x080018eb
 8001920:	0800192f 	.word	0x0800192f
 8001924:	08001929 	.word	0x08001929
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001928:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800192c:	d107      	bne.n	800193e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800192e:	2340      	movs	r3, #64	; 0x40
 8001930:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001932:	2001      	movs	r0, #1
 8001934:	e7e4      	b.n	8001900 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8001936:	2a02      	cmp	r2, #2
 8001938:	d9f9      	bls.n	800192e <HAL_DMA_Init+0xca>
 800193a:	2a03      	cmp	r2, #3
 800193c:	d0d5      	beq.n	80018ea <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800193e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001940:	4620      	mov	r0, r4
 8001942:	f7ff ff79 	bl	8001838 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001946:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001948:	233f      	movs	r3, #63	; 0x3f
 800194a:	4093      	lsls	r3, r2
 800194c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001950:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001952:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001954:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001958:	e7d4      	b.n	8001904 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800195a:	2001      	movs	r0, #1
 800195c:	e7d2      	b.n	8001904 <HAL_DMA_Init+0xa0>
 800195e:	bf00      	nop
 8001960:	f010803f 	.word	0xf010803f

08001964 <HAL_DMA_IRQHandler>:
{
 8001964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800196a:	4b5c      	ldr	r3, [pc, #368]	; (8001adc <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800196c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800196e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001970:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001972:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001974:	2208      	movs	r2, #8
 8001976:	409a      	lsls	r2, r3
 8001978:	4232      	tst	r2, r6
{
 800197a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800197c:	d00c      	beq.n	8001998 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800197e:	6801      	ldr	r1, [r0, #0]
 8001980:	6808      	ldr	r0, [r1, #0]
 8001982:	0740      	lsls	r0, r0, #29
 8001984:	d508      	bpl.n	8001998 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001986:	6808      	ldr	r0, [r1, #0]
 8001988:	f020 0004 	bic.w	r0, r0, #4
 800198c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800198e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001990:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001998:	2201      	movs	r2, #1
 800199a:	409a      	lsls	r2, r3
 800199c:	4232      	tst	r2, r6
 800199e:	d008      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019a0:	6821      	ldr	r1, [r4, #0]
 80019a2:	6949      	ldr	r1, [r1, #20]
 80019a4:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019a6:	bf41      	itttt	mi
 80019a8:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019aa:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80019ac:	f042 0202 	orrmi.w	r2, r2, #2
 80019b0:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019b2:	2204      	movs	r2, #4
 80019b4:	409a      	lsls	r2, r3
 80019b6:	4232      	tst	r2, r6
 80019b8:	d008      	beq.n	80019cc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019ba:	6821      	ldr	r1, [r4, #0]
 80019bc:	6809      	ldr	r1, [r1, #0]
 80019be:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019c0:	bf41      	itttt	mi
 80019c2:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019c4:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80019c6:	f042 0204 	orrmi.w	r2, r2, #4
 80019ca:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019cc:	2210      	movs	r2, #16
 80019ce:	409a      	lsls	r2, r3
 80019d0:	4232      	tst	r2, r6
 80019d2:	d010      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	0709      	lsls	r1, r1, #28
 80019da:	d50c      	bpl.n	80019f6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019dc:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	0350      	lsls	r0, r2, #13
 80019e2:	d537      	bpl.n	8001a54 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0319      	lsls	r1, r3, #12
 80019e8:	d401      	bmi.n	80019ee <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80019ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019ec:	e000      	b.n	80019f0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80019f0:	b10b      	cbz	r3, 80019f6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80019f2:	4620      	mov	r0, r4
 80019f4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019f6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80019f8:	2220      	movs	r2, #32
 80019fa:	408a      	lsls	r2, r1
 80019fc:	4232      	tst	r2, r6
 80019fe:	d03a      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	06c6      	lsls	r6, r0, #27
 8001a06:	d536      	bpl.n	8001a76 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a08:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a0a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001a0e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a10:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a12:	d127      	bne.n	8001a64 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a14:	f022 0216 	bic.w	r2, r2, #22
 8001a18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a20:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a22:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a24:	b90a      	cbnz	r2, 8001a2a <HAL_DMA_IRQHandler+0xc6>
 8001a26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001a28:	b11a      	cbz	r2, 8001a32 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	f022 0208 	bic.w	r2, r2, #8
 8001a30:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a32:	233f      	movs	r3, #63	; 0x3f
 8001a34:	408b      	lsls	r3, r1
 8001a36:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001a44:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d045      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8001a4a:	4620      	mov	r0, r4
}
 8001a4c:	b003      	add	sp, #12
 8001a4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001a52:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a58:	bf5e      	ittt	pl
 8001a5a:	681a      	ldrpl	r2, [r3, #0]
 8001a5c:	f022 0208 	bicpl.w	r2, r2, #8
 8001a60:	601a      	strpl	r2, [r3, #0]
 8001a62:	e7c2      	b.n	80019ea <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a64:	0350      	lsls	r0, r2, #13
 8001a66:	d527      	bpl.n	8001ab8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0319      	lsls	r1, r3, #12
 8001a6c:	d431      	bmi.n	8001ad2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8001a6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001a70:	b10b      	cbz	r3, 8001a76 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8001a72:	4620      	mov	r0, r4
 8001a74:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a78:	b36b      	cbz	r3, 8001ad6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a7c:	07da      	lsls	r2, r3, #31
 8001a7e:	d519      	bpl.n	8001ab4 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8001a80:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a82:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001a86:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001a98:	9b01      	ldr	r3, [sp, #4]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	42bb      	cmp	r3, r7
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	d802      	bhi.n	8001aa8 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001aa2:	6813      	ldr	r3, [r2, #0]
 8001aa4:	07db      	lsls	r3, r3, #31
 8001aa6:	d4f7      	bmi.n	8001a98 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001ab4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ab6:	e7c6      	b.n	8001a46 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001abe:	d108      	bne.n	8001ad2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	f021 0110 	bic.w	r1, r1, #16
 8001ac6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001ac8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001aca:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001ace:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001ad2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ad4:	e7cc      	b.n	8001a70 <HAL_DMA_IRQHandler+0x10c>
}
 8001ad6:	b003      	add	sp, #12
 8001ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000010 	.word	0x20000010

08001ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001c90 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae8:	4a67      	ldr	r2, [pc, #412]	; (8001c88 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aec:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001aee:	2401      	movs	r4, #1
 8001af0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001af6:	43ac      	bics	r4, r5
 8001af8:	f040 80b0 	bne.w	8001c5c <HAL_GPIO_Init+0x17c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afc:	684d      	ldr	r5, [r1, #4]
 8001afe:	f005 0403 	and.w	r4, r5, #3
 8001b02:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001b06:	2603      	movs	r6, #3
 8001b08:	1e67      	subs	r7, r4, #1
 8001b0a:	fa06 f608 	lsl.w	r6, r6, r8
 8001b0e:	2f01      	cmp	r7, #1
 8001b10:	ea6f 0606 	mvn.w	r6, r6
 8001b14:	d834      	bhi.n	8001b80 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001b16:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b18:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b1c:	68cf      	ldr	r7, [r1, #12]
 8001b1e:	fa07 f708 	lsl.w	r7, r7, r8
 8001b22:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001b26:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b28:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2a:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b2e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001b32:	409f      	lsls	r7, r3
 8001b34:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001b38:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001b3a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b40:	688f      	ldr	r7, [r1, #8]
 8001b42:	fa07 f708 	lsl.w	r7, r7, r8
 8001b46:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001b4c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4e:	d119      	bne.n	8001b84 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001b50:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001b54:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b58:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001b5c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b60:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001b64:	f04f 0e0f 	mov.w	lr, #15
 8001b68:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001b6c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b70:	690f      	ldr	r7, [r1, #16]
 8001b72:	fa07 f70b 	lsl.w	r7, r7, fp
 8001b76:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001b7a:	f8ca 7020 	str.w	r7, [sl, #32]
 8001b7e:	e001      	b.n	8001b84 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b80:	2c03      	cmp	r4, #3
 8001b82:	d1da      	bne.n	8001b3a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001b84:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b86:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b8a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b8c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8e:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8001b90:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b92:	d563      	bpl.n	8001c5c <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b94:	f04f 0a00 	mov.w	sl, #0
 8001b98:	f8cd a004 	str.w	sl, [sp, #4]
 8001b9c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba0:	4c3a      	ldr	r4, [pc, #232]	; (8001c8c <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001ba6:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001baa:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001bae:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001bb2:	9601      	str	r6, [sp, #4]
 8001bb4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb6:	f023 0603 	bic.w	r6, r3, #3
 8001bba:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001bbe:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc2:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001bce:	270f      	movs	r7, #15
 8001bd0:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd4:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd6:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bda:	d046      	beq.n	8001c6a <HAL_GPIO_Init+0x18a>
 8001bdc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001be0:	42a0      	cmp	r0, r4
 8001be2:	d044      	beq.n	8001c6e <HAL_GPIO_Init+0x18e>
 8001be4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001be8:	42a0      	cmp	r0, r4
 8001bea:	d042      	beq.n	8001c72 <HAL_GPIO_Init+0x192>
 8001bec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bf0:	42a0      	cmp	r0, r4
 8001bf2:	d040      	beq.n	8001c76 <HAL_GPIO_Init+0x196>
 8001bf4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bf8:	42a0      	cmp	r0, r4
 8001bfa:	d03e      	beq.n	8001c7a <HAL_GPIO_Init+0x19a>
 8001bfc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c00:	42a0      	cmp	r0, r4
 8001c02:	d03c      	beq.n	8001c7e <HAL_GPIO_Init+0x19e>
 8001c04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c08:	42a0      	cmp	r0, r4
 8001c0a:	d03a      	beq.n	8001c82 <HAL_GPIO_Init+0x1a2>
 8001c0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c10:	42a0      	cmp	r0, r4
 8001c12:	bf0c      	ite	eq
 8001c14:	2407      	moveq	r4, #7
 8001c16:	2408      	movne	r4, #8
 8001c18:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c1c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c1e:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8001c20:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c26:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001c28:	bf54      	ite	pl
 8001c2a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001c2c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001c30:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8001c32:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c34:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001c36:	bf54      	ite	pl
 8001c38:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001c3a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001c3e:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c40:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c42:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001c44:	bf54      	ite	pl
 8001c46:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001c48:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001c4c:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001c4e:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c50:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001c52:	bf54      	ite	pl
 8001c54:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001c56:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001c5a:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	f47f af44 	bne.w	8001aec <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001c64:	b003      	add	sp, #12
 8001c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	4654      	mov	r4, sl
 8001c6c:	e7d4      	b.n	8001c18 <HAL_GPIO_Init+0x138>
 8001c6e:	2401      	movs	r4, #1
 8001c70:	e7d2      	b.n	8001c18 <HAL_GPIO_Init+0x138>
 8001c72:	2402      	movs	r4, #2
 8001c74:	e7d0      	b.n	8001c18 <HAL_GPIO_Init+0x138>
 8001c76:	2403      	movs	r4, #3
 8001c78:	e7ce      	b.n	8001c18 <HAL_GPIO_Init+0x138>
 8001c7a:	2404      	movs	r4, #4
 8001c7c:	e7cc      	b.n	8001c18 <HAL_GPIO_Init+0x138>
 8001c7e:	2405      	movs	r4, #5
 8001c80:	e7ca      	b.n	8001c18 <HAL_GPIO_Init+0x138>
 8001c82:	2406      	movs	r4, #6
 8001c84:	e7c8      	b.n	8001c18 <HAL_GPIO_Init+0x138>
 8001c86:	bf00      	nop
 8001c88:	40013c00 	.word	0x40013c00
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40023800 	.word	0x40023800

08001c94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c94:	b10a      	cbz	r2, 8001c9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c96:	6181      	str	r1, [r0, #24]
  }
}
 8001c98:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c9a:	0409      	lsls	r1, r1, #16
 8001c9c:	e7fb      	b.n	8001c96 <HAL_GPIO_WritePin+0x2>

08001c9e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c9e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ca0:	ea01 0203 	and.w	r2, r1, r3
 8001ca4:	ea21 0103 	bic.w	r1, r1, r3
 8001ca8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001cac:	6181      	str	r1, [r0, #24]
}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001cb2:	6951      	ldr	r1, [r2, #20]
 8001cb4:	4201      	tst	r1, r0
{
 8001cb6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cb8:	d002      	beq.n	8001cc0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cba:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cbc:	f7ff fa92 	bl	80011e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cc0:	bd08      	pop	{r3, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40013c00 	.word	0x40013c00

08001cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ccc:	4604      	mov	r4, r0
 8001cce:	b340      	cbz	r0, 8001d22 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd0:	6803      	ldr	r3, [r0, #0]
 8001cd2:	07dd      	lsls	r5, r3, #31
 8001cd4:	d410      	bmi.n	8001cf8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	0798      	lsls	r0, r3, #30
 8001cda:	d45e      	bmi.n	8001d9a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	071a      	lsls	r2, r3, #28
 8001ce0:	f100 80a0 	bmi.w	8001e24 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	075b      	lsls	r3, r3, #29
 8001ce8:	f100 80be 	bmi.w	8001e68 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cec:	69a0      	ldr	r0, [r4, #24]
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	f040 811f 	bne.w	8001f32 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	e02b      	b.n	8001d50 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cf8:	4ba6      	ldr	r3, [pc, #664]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	f002 020c 	and.w	r2, r2, #12
 8001d00:	2a04      	cmp	r2, #4
 8001d02:	d007      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0a:	2a08      	cmp	r2, #8
 8001d0c:	d10b      	bne.n	8001d26 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	0251      	lsls	r1, r2, #9
 8001d12:	d508      	bpl.n	8001d26 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	4b9f      	ldr	r3, [pc, #636]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	039a      	lsls	r2, r3, #14
 8001d1a:	d5dc      	bpl.n	8001cd6 <HAL_RCC_OscConfig+0xe>
 8001d1c:	6863      	ldr	r3, [r4, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1d9      	bne.n	8001cd6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001d22:	2001      	movs	r0, #1
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d26:	6862      	ldr	r2, [r4, #4]
 8001d28:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001d2c:	d113      	bne.n	8001d56 <HAL_RCC_OscConfig+0x8e>
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d36:	f7ff fced 	bl	8001714 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4e96      	ldr	r6, [pc, #600]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001d3c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	6833      	ldr	r3, [r6, #0]
 8001d40:	039b      	lsls	r3, r3, #14
 8001d42:	d4c8      	bmi.n	8001cd6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fce6 	bl	8001714 <HAL_GetTick>
 8001d48:	1b40      	subs	r0, r0, r5
 8001d4a:	2864      	cmp	r0, #100	; 0x64
 8001d4c:	d9f7      	bls.n	8001d3e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8001d4e:	2003      	movs	r0, #3
}
 8001d50:	b002      	add	sp, #8
 8001d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d56:	4d8f      	ldr	r5, [pc, #572]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
 8001d58:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001d5c:	682b      	ldr	r3, [r5, #0]
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0xa8>
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d64:	602b      	str	r3, [r5, #0]
 8001d66:	682b      	ldr	r3, [r5, #0]
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d6e:	e7e2      	b.n	8001d36 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d74:	602b      	str	r3, [r5, #0]
 8001d76:	682b      	ldr	r3, [r5, #0]
 8001d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d1d9      	bne.n	8001d36 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8001d82:	f7ff fcc7 	bl	8001714 <HAL_GetTick>
 8001d86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	039f      	lsls	r7, r3, #14
 8001d8c:	d5a3      	bpl.n	8001cd6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d8e:	f7ff fcc1 	bl	8001714 <HAL_GetTick>
 8001d92:	1b80      	subs	r0, r0, r6
 8001d94:	2864      	cmp	r0, #100	; 0x64
 8001d96:	d9f7      	bls.n	8001d88 <HAL_RCC_OscConfig+0xc0>
 8001d98:	e7d9      	b.n	8001d4e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9a:	4b7e      	ldr	r3, [pc, #504]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	f012 0f0c 	tst.w	r2, #12
 8001da2:	d007      	beq.n	8001db4 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001daa:	2a08      	cmp	r2, #8
 8001dac:	d111      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	025e      	lsls	r6, r3, #9
 8001db2:	d40e      	bmi.n	8001dd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db4:	4b77      	ldr	r3, [pc, #476]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	0795      	lsls	r5, r2, #30
 8001dba:	d502      	bpl.n	8001dc2 <HAL_RCC_OscConfig+0xfa>
 8001dbc:	68e2      	ldr	r2, [r4, #12]
 8001dbe:	2a01      	cmp	r2, #1
 8001dc0:	d1af      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	6921      	ldr	r1, [r4, #16]
 8001dc6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001dca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001dce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd0:	e784      	b.n	8001cdc <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dd2:	68e2      	ldr	r2, [r4, #12]
 8001dd4:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <HAL_RCC_OscConfig+0x2d0>)
 8001dd6:	b1b2      	cbz	r2, 8001e06 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fc9a 	bl	8001714 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	4d6c      	ldr	r5, [pc, #432]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001de2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	682b      	ldr	r3, [r5, #0]
 8001de6:	0798      	lsls	r0, r3, #30
 8001de8:	d507      	bpl.n	8001dfa <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	682b      	ldr	r3, [r5, #0]
 8001dec:	6922      	ldr	r2, [r4, #16]
 8001dee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001df2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001df6:	602b      	str	r3, [r5, #0]
 8001df8:	e770      	b.n	8001cdc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fc8b 	bl	8001714 <HAL_GetTick>
 8001dfe:	1b80      	subs	r0, r0, r6
 8001e00:	2802      	cmp	r0, #2
 8001e02:	d9ef      	bls.n	8001de4 <HAL_RCC_OscConfig+0x11c>
 8001e04:	e7a3      	b.n	8001d4e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8001e06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e08:	f7ff fc84 	bl	8001714 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0c:	4e61      	ldr	r6, [pc, #388]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001e0e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e10:	6833      	ldr	r3, [r6, #0]
 8001e12:	0799      	lsls	r1, r3, #30
 8001e14:	f57f af62 	bpl.w	8001cdc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e18:	f7ff fc7c 	bl	8001714 <HAL_GetTick>
 8001e1c:	1b40      	subs	r0, r0, r5
 8001e1e:	2802      	cmp	r0, #2
 8001e20:	d9f6      	bls.n	8001e10 <HAL_RCC_OscConfig+0x148>
 8001e22:	e794      	b.n	8001d4e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e24:	6962      	ldr	r2, [r4, #20]
 8001e26:	4b5d      	ldr	r3, [pc, #372]	; (8001f9c <HAL_RCC_OscConfig+0x2d4>)
 8001e28:	b17a      	cbz	r2, 8001e4a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fc71 	bl	8001714 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e32:	4e58      	ldr	r6, [pc, #352]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001e34:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001e38:	079f      	lsls	r7, r3, #30
 8001e3a:	f53f af53 	bmi.w	8001ce4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fc69 	bl	8001714 <HAL_GetTick>
 8001e42:	1b40      	subs	r0, r0, r5
 8001e44:	2802      	cmp	r0, #2
 8001e46:	d9f6      	bls.n	8001e36 <HAL_RCC_OscConfig+0x16e>
 8001e48:	e781      	b.n	8001d4e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8001e4a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fc62 	bl	8001714 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	4e50      	ldr	r6, [pc, #320]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001e52:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001e56:	0798      	lsls	r0, r3, #30
 8001e58:	f57f af44 	bpl.w	8001ce4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fc5a 	bl	8001714 <HAL_GetTick>
 8001e60:	1b40      	subs	r0, r0, r5
 8001e62:	2802      	cmp	r0, #2
 8001e64:	d9f6      	bls.n	8001e54 <HAL_RCC_OscConfig+0x18c>
 8001e66:	e772      	b.n	8001d4e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e68:	4b4a      	ldr	r3, [pc, #296]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
 8001e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001e70:	d128      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	9201      	str	r2, [sp, #4]
 8001e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e86:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4d45      	ldr	r5, [pc, #276]	; (8001fa0 <HAL_RCC_OscConfig+0x2d8>)
 8001e8a:	682b      	ldr	r3, [r5, #0]
 8001e8c:	05d9      	lsls	r1, r3, #23
 8001e8e:	d51b      	bpl.n	8001ec8 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e90:	68a3      	ldr	r3, [r4, #8]
 8001e92:	4d40      	ldr	r5, [pc, #256]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d127      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x220>
 8001e98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001ea0:	f7ff fc38 	bl	8001714 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea4:	4e3b      	ldr	r6, [pc, #236]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001ea6:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001eae:	079b      	lsls	r3, r3, #30
 8001eb0:	d539      	bpl.n	8001f26 <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8001eb2:	2f00      	cmp	r7, #0
 8001eb4:	f43f af1a 	beq.w	8001cec <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb8:	4a36      	ldr	r2, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
 8001eba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	e713      	b.n	8001cec <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001ec4:	2700      	movs	r7, #0
 8001ec6:	e7df      	b.n	8001e88 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec8:	682b      	ldr	r3, [r5, #0]
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fc20 	bl	8001714 <HAL_GetTick>
 8001ed4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	682b      	ldr	r3, [r5, #0]
 8001ed8:	05da      	lsls	r2, r3, #23
 8001eda:	d4d9      	bmi.n	8001e90 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001edc:	f7ff fc1a 	bl	8001714 <HAL_GetTick>
 8001ee0:	1b80      	subs	r0, r0, r6
 8001ee2:	2802      	cmp	r0, #2
 8001ee4:	d9f7      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x20e>
 8001ee6:	e732      	b.n	8001d4e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d104      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x22e>
 8001eec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	672b      	str	r3, [r5, #112]	; 0x70
 8001ef4:	e7d0      	b.n	8001e98 <HAL_RCC_OscConfig+0x1d0>
 8001ef6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001ef8:	f022 0201 	bic.w	r2, r2, #1
 8001efc:	672a      	str	r2, [r5, #112]	; 0x70
 8001efe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001f00:	f022 0204 	bic.w	r2, r2, #4
 8001f04:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ca      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fc03 	bl	8001714 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f16:	0798      	lsls	r0, r3, #30
 8001f18:	d5cb      	bpl.n	8001eb2 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff fbfb 	bl	8001714 <HAL_GetTick>
 8001f1e:	1b80      	subs	r0, r0, r6
 8001f20:	4540      	cmp	r0, r8
 8001f22:	d9f7      	bls.n	8001f14 <HAL_RCC_OscConfig+0x24c>
 8001f24:	e713      	b.n	8001d4e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7ff fbf5 	bl	8001714 <HAL_GetTick>
 8001f2a:	1b40      	subs	r0, r0, r5
 8001f2c:	4540      	cmp	r0, r8
 8001f2e:	d9bd      	bls.n	8001eac <HAL_RCC_OscConfig+0x1e4>
 8001f30:	e70d      	b.n	8001d4e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f32:	4d18      	ldr	r5, [pc, #96]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
 8001f34:	68ab      	ldr	r3, [r5, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d047      	beq.n	8001fce <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3e:	4e19      	ldr	r6, [pc, #100]	; (8001fa4 <HAL_RCC_OscConfig+0x2dc>)
 8001f40:	2300      	movs	r3, #0
 8001f42:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001f44:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f46:	d135      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8001f48:	f7ff fbe4 	bl	8001714 <HAL_GetTick>
 8001f4c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4e:	682b      	ldr	r3, [r5, #0]
 8001f50:	0199      	lsls	r1, r3, #6
 8001f52:	d429      	bmi.n	8001fa8 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f54:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f5c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f68:	0852      	lsrs	r2, r2, #1
 8001f6a:	3a01      	subs	r2, #1
 8001f6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f70:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f72:	2301      	movs	r3, #1
 8001f74:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001f76:	f7ff fbcd 	bl	8001714 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7a:	4d06      	ldr	r5, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001f7c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7e:	682b      	ldr	r3, [r5, #0]
 8001f80:	019a      	lsls	r2, r3, #6
 8001f82:	f53f aeb7 	bmi.w	8001cf4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f86:	f7ff fbc5 	bl	8001714 <HAL_GetTick>
 8001f8a:	1b00      	subs	r0, r0, r4
 8001f8c:	2802      	cmp	r0, #2
 8001f8e:	d9f6      	bls.n	8001f7e <HAL_RCC_OscConfig+0x2b6>
 8001f90:	e6dd      	b.n	8001d4e <HAL_RCC_OscConfig+0x86>
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	42470000 	.word	0x42470000
 8001f9c:	42470e80 	.word	0x42470e80
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff fbb4 	bl	8001714 <HAL_GetTick>
 8001fac:	1bc0      	subs	r0, r0, r7
 8001fae:	2802      	cmp	r0, #2
 8001fb0:	d9cd      	bls.n	8001f4e <HAL_RCC_OscConfig+0x286>
 8001fb2:	e6cc      	b.n	8001d4e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fbae 	bl	8001714 <HAL_GetTick>
 8001fb8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	682b      	ldr	r3, [r5, #0]
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	f57f ae99 	bpl.w	8001cf4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7ff fba7 	bl	8001714 <HAL_GetTick>
 8001fc6:	1b00      	subs	r0, r0, r4
 8001fc8:	2802      	cmp	r0, #2
 8001fca:	d9f6      	bls.n	8001fba <HAL_RCC_OscConfig+0x2f2>
 8001fcc:	e6bf      	b.n	8001d4e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fce:	2801      	cmp	r0, #1
 8001fd0:	f43f aebe 	beq.w	8001d50 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8001fd4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd8:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fdc:	4291      	cmp	r1, r2
 8001fde:	f47f aea0 	bne.w	8001d22 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe8:	428a      	cmp	r2, r1
 8001fea:	f47f ae9a 	bne.w	8001d22 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fee:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001ffa:	f47f ae92 	bne.w	8001d22 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002000:	0852      	lsrs	r2, r2, #1
 8002002:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002006:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002008:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800200c:	f47f ae89 	bne.w	8001d22 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002010:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002012:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002016:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800201a:	f43f ae6b 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x2c>
 800201e:	e680      	b.n	8001d22 <HAL_RCC_OscConfig+0x5a>

08002020 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002020:	4913      	ldr	r1, [pc, #76]	; (8002070 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002022:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002024:	688b      	ldr	r3, [r1, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b04      	cmp	r3, #4
 800202c:	d01c      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x48>
 800202e:	2b08      	cmp	r3, #8
 8002030:	d11c      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002032:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002034:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002036:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002038:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800203c:	bf14      	ite	ne
 800203e:	480d      	ldrne	r0, [pc, #52]	; (8002074 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002040:	480d      	ldreq	r0, [pc, #52]	; (8002078 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002042:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002046:	bf18      	it	ne
 8002048:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204e:	fba1 0100 	umull	r0, r1, r1, r0
 8002052:	f7fe fda9 	bl	8000ba8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_GetSysClockFreq+0x50>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800205e:	3301      	adds	r3, #1
 8002060:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002062:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002066:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <HAL_RCC_GetSysClockFreq+0x54>)
 800206a:	e7fc      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800206e:	e7fa      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x46>
 8002070:	40023800 	.word	0x40023800
 8002074:	007a1200 	.word	0x007a1200
 8002078:	00f42400 	.word	0x00f42400

0800207c <HAL_RCC_ClockConfig>:
{
 800207c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002080:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002082:	4604      	mov	r4, r0
 8002084:	b910      	cbnz	r0, 800208c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002086:	2001      	movs	r0, #1
}
 8002088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b44      	ldr	r3, [pc, #272]	; (80021a0 <HAL_RCC_ClockConfig+0x124>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	f002 0207 	and.w	r2, r2, #7
 8002094:	428a      	cmp	r2, r1
 8002096:	d328      	bcc.n	80020ea <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002098:	6822      	ldr	r2, [r4, #0]
 800209a:	0797      	lsls	r7, r2, #30
 800209c:	d42d      	bmi.n	80020fa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	07d0      	lsls	r0, r2, #31
 80020a0:	d441      	bmi.n	8002126 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a2:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_ClockConfig+0x124>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f002 0207 	and.w	r2, r2, #7
 80020aa:	42aa      	cmp	r2, r5
 80020ac:	d866      	bhi.n	800217c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ae:	6822      	ldr	r2, [r4, #0]
 80020b0:	0751      	lsls	r1, r2, #29
 80020b2:	d46c      	bmi.n	800218e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b4:	0713      	lsls	r3, r2, #28
 80020b6:	d507      	bpl.n	80020c8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b8:	4a3a      	ldr	r2, [pc, #232]	; (80021a4 <HAL_RCC_ClockConfig+0x128>)
 80020ba:	6921      	ldr	r1, [r4, #16]
 80020bc:	6893      	ldr	r3, [r2, #8]
 80020be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80020c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020c6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020c8:	f7ff ffaa 	bl	8002020 <HAL_RCC_GetSysClockFreq>
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <HAL_RCC_ClockConfig+0x128>)
 80020ce:	4a36      	ldr	r2, [pc, #216]	; (80021a8 <HAL_RCC_ClockConfig+0x12c>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	40d8      	lsrs	r0, r3
 80020da:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_ClockConfig+0x130>)
 80020dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80020de:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <HAL_RCC_ClockConfig+0x134>)
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	f7ff facd 	bl	8001680 <HAL_InitTick>
  return HAL_OK;
 80020e6:	2000      	movs	r0, #0
 80020e8:	e7ce      	b.n	8002088 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	b2ca      	uxtb	r2, r1
 80020ec:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	428b      	cmp	r3, r1
 80020f6:	d1c6      	bne.n	8002086 <HAL_RCC_ClockConfig+0xa>
 80020f8:	e7ce      	b.n	8002098 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_RCC_ClockConfig+0x128>)
 80020fc:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002100:	bf1e      	ittt	ne
 8002102:	6899      	ldrne	r1, [r3, #8]
 8002104:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002108:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800210c:	bf42      	ittt	mi
 800210e:	6899      	ldrmi	r1, [r3, #8]
 8002110:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002114:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002116:	4923      	ldr	r1, [pc, #140]	; (80021a4 <HAL_RCC_ClockConfig+0x128>)
 8002118:	68a0      	ldr	r0, [r4, #8]
 800211a:	688b      	ldr	r3, [r1, #8]
 800211c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002120:	4303      	orrs	r3, r0
 8002122:	608b      	str	r3, [r1, #8]
 8002124:	e7bb      	b.n	800209e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002126:	6862      	ldr	r2, [r4, #4]
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_RCC_ClockConfig+0x128>)
 800212a:	2a01      	cmp	r2, #1
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	d0a7      	beq.n	8002086 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4e1b      	ldr	r6, [pc, #108]	; (80021a4 <HAL_RCC_ClockConfig+0x128>)
 8002138:	68b3      	ldr	r3, [r6, #8]
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	4313      	orrs	r3, r2
 8002140:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002142:	f7ff fae7 	bl	8001714 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002146:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800214a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214c:	68b3      	ldr	r3, [r6, #8]
 800214e:	6862      	ldr	r2, [r4, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002158:	d0a3      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215a:	f7ff fadb 	bl	8001714 <HAL_GetTick>
 800215e:	1bc0      	subs	r0, r0, r7
 8002160:	4540      	cmp	r0, r8
 8002162:	d9f3      	bls.n	800214c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002164:	2003      	movs	r0, #3
 8002166:	e78f      	b.n	8002088 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002168:	1e91      	subs	r1, r2, #2
 800216a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	d802      	bhi.n	8002176 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002170:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002174:	e7de      	b.n	8002134 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	f013 0f02 	tst.w	r3, #2
 800217a:	e7db      	b.n	8002134 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217c:	b2ea      	uxtb	r2, r5
 800217e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	42ab      	cmp	r3, r5
 8002188:	f47f af7d 	bne.w	8002086 <HAL_RCC_ClockConfig+0xa>
 800218c:	e78f      	b.n	80020ae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218e:	4905      	ldr	r1, [pc, #20]	; (80021a4 <HAL_RCC_ClockConfig+0x128>)
 8002190:	68e0      	ldr	r0, [r4, #12]
 8002192:	688b      	ldr	r3, [r1, #8]
 8002194:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002198:	4303      	orrs	r3, r0
 800219a:	608b      	str	r3, [r1, #8]
 800219c:	e78a      	b.n	80020b4 <HAL_RCC_ClockConfig+0x38>
 800219e:	bf00      	nop
 80021a0:	40023c00 	.word	0x40023c00
 80021a4:	40023800 	.word	0x40023800
 80021a8:	080093d8 	.word	0x080093d8
 80021ac:	20000010 	.word	0x20000010
 80021b0:	20000018 	.word	0x20000018

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021c2:	6810      	ldr	r0, [r2, #0]
}
 80021c4:	40d8      	lsrs	r0, r3
 80021c6:	4770      	bx	lr
 80021c8:	40023800 	.word	0x40023800
 80021cc:	080093e8 	.word	0x080093e8
 80021d0:	20000010 	.word	0x20000010

080021d4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	4a03      	ldr	r2, [pc, #12]	; (80021f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80021e2:	6810      	ldr	r0, [r2, #0]
}
 80021e4:	40d8      	lsrs	r0, r3
 80021e6:	4770      	bx	lr
 80021e8:	40023800 	.word	0x40023800
 80021ec:	080093e8 	.word	0x080093e8
 80021f0:	20000010 	.word	0x20000010

080021f4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80021f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80021f8:	461d      	mov	r5, r3
 80021fa:	4617      	mov	r7, r2
 80021fc:	4688      	mov	r8, r1
 80021fe:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002200:	f7ff fa88 	bl	8001714 <HAL_GetTick>
 8002204:	443d      	add	r5, r7
 8002206:	1a2c      	subs	r4, r5, r0
  tmp_tickstart = HAL_GetTick();
 8002208:	f7ff fa84 	bl	8001714 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 8002214:	4605      	mov	r5, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002216:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002218:	6832      	ldr	r2, [r6, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800221a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800221c:	6893      	ldr	r3, [r2, #8]
 800221e:	ea38 0303 	bics.w	r3, r8, r3
 8002222:	d001      	beq.n	8002228 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8002224:	2000      	movs	r0, #0
 8002226:	e02d      	b.n	8002284 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8002228:	1c7b      	adds	r3, r7, #1
 800222a:	d0f7      	beq.n	800221c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800222c:	f7ff fa72 	bl	8001714 <HAL_GetTick>
 8002230:	1b40      	subs	r0, r0, r5
 8002232:	42a0      	cmp	r0, r4
 8002234:	d329      	bcc.n	800228a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002236:	6833      	ldr	r3, [r6, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800223e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002240:	6872      	ldr	r2, [r6, #4]
 8002242:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002246:	d10a      	bne.n	800225e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8002248:	68b2      	ldr	r2, [r6, #8]
 800224a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800224e:	d002      	beq.n	8002256 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002250:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002254:	d103      	bne.n	800225e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800225c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800225e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8002260:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002264:	d107      	bne.n	8002276 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
          SPI_RESET_CRC(hspi);
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002274:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002276:	2301      	movs	r3, #1
 8002278:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800227c:	2300      	movs	r3, #0
 800227e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8002282:	2003      	movs	r0, #3
}
 8002284:	b002      	add	sp, #8
 8002286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 800228a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800228c:	2b00      	cmp	r3, #0
      count--;
 800228e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002290:	bf08      	it	eq
 8002292:	2400      	moveq	r4, #0
      count--;
 8002294:	3b01      	subs	r3, #1
 8002296:	e7bf      	b.n	8002218 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8002298:	20000010 	.word	0x20000010

0800229c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800229c:	b538      	push	{r3, r4, r5, lr}
 800229e:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022a0:	6842      	ldr	r2, [r0, #4]
 80022a2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80022a6:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022a8:	d11f      	bne.n	80022ea <SPI_EndRxTransaction+0x4e>
 80022aa:	6882      	ldr	r2, [r0, #8]
 80022ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80022b0:	d002      	beq.n	80022b8 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022b2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80022b6:	d107      	bne.n	80022c8 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80022b8:	6825      	ldr	r5, [r4, #0]
 80022ba:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80022bc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80022c0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80022c4:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80022c6:	d007      	beq.n	80022d8 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022c8:	460a      	mov	r2, r1
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7ff ff91 	bl	80021f4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80022d2:	b920      	cbnz	r0, 80022de <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80022d4:	2000      	movs	r0, #0
}
 80022d6:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022d8:	460a      	mov	r2, r1
 80022da:	2101      	movs	r1, #1
 80022dc:	e7f6      	b.n	80022cc <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022e0:	f043 0320 	orr.w	r3, r3, #32
 80022e4:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80022e6:	2003      	movs	r0, #3
 80022e8:	e7f5      	b.n	80022d6 <SPI_EndRxTransaction+0x3a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022ea:	460a      	mov	r2, r1
 80022ec:	2101      	movs	r1, #1
 80022ee:	e7ee      	b.n	80022ce <SPI_EndRxTransaction+0x32>

080022f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022f2:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80022f4:	4a12      	ldr	r2, [pc, #72]	; (8002340 <SPI_EndRxTxTransaction+0x50>)
 80022f6:	4d13      	ldr	r5, [pc, #76]	; (8002344 <SPI_EndRxTxTransaction+0x54>)
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	fbb2 f5f5 	udiv	r5, r2, r5
 80022fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002302:	436a      	muls	r2, r5
 8002304:	9201      	str	r2, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002306:	6842      	ldr	r2, [r0, #4]
 8002308:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800230c:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800230e:	d10b      	bne.n	8002328 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002310:	460a      	mov	r2, r1
 8002312:	2180      	movs	r1, #128	; 0x80
 8002314:	f7ff ff6e 	bl	80021f4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002318:	b178      	cbz	r0, 800233a <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800231a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800231c:	f043 0320 	orr.w	r3, r3, #32
 8002320:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002322:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8002324:	b003      	add	sp, #12
 8002326:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8002328:	9b01      	ldr	r3, [sp, #4]
 800232a:	b133      	cbz	r3, 800233a <SPI_EndRxTxTransaction+0x4a>
      count--;
 800232c:	9b01      	ldr	r3, [sp, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	061b      	lsls	r3, r3, #24
 8002338:	d4f6      	bmi.n	8002328 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 800233a:	2000      	movs	r0, #0
 800233c:	e7f2      	b.n	8002324 <SPI_EndRxTxTransaction+0x34>
 800233e:	bf00      	nop
 8002340:	20000010 	.word	0x20000010
 8002344:	016e3600 	.word	0x016e3600

08002348 <HAL_SPI_Init>:
{
 8002348:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800234a:	4604      	mov	r4, r0
 800234c:	2800      	cmp	r0, #0
 800234e:	d055      	beq.n	80023fc <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002350:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002352:	2b00      	cmp	r3, #0
 8002354:	d14e      	bne.n	80023f4 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002356:	6842      	ldr	r2, [r0, #4]
 8002358:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800235c:	d000      	beq.n	8002360 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800235e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002364:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002368:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800236c:	b923      	cbnz	r3, 8002378 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800236e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002372:	4620      	mov	r0, r4
 8002374:	f7ff f856 	bl	8001424 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002378:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800237a:	68a0      	ldr	r0, [r4, #8]
 800237c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800237e:	2302      	movs	r3, #2
 8002380:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002384:	680b      	ldr	r3, [r1, #0]
 8002386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800238a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800238c:	6863      	ldr	r3, [r4, #4]
 800238e:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8002392:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002396:	4303      	orrs	r3, r0
 8002398:	68e0      	ldr	r0, [r4, #12]
 800239a:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800239e:	4303      	orrs	r3, r0
 80023a0:	6920      	ldr	r0, [r4, #16]
 80023a2:	f000 0002 	and.w	r0, r0, #2
 80023a6:	4303      	orrs	r3, r0
 80023a8:	6960      	ldr	r0, [r4, #20]
 80023aa:	f000 0001 	and.w	r0, r0, #1
 80023ae:	4303      	orrs	r3, r0
 80023b0:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80023b4:	4303      	orrs	r3, r0
 80023b6:	69e0      	ldr	r0, [r4, #28]
 80023b8:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80023bc:	4303      	orrs	r3, r0
 80023be:	6a20      	ldr	r0, [r4, #32]
 80023c0:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80023c4:	4303      	orrs	r3, r0
 80023c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80023c8:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80023cc:	4303      	orrs	r3, r0
 80023ce:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023d2:	0c12      	lsrs	r2, r2, #16
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	f002 0204 	and.w	r2, r2, #4
 80023dc:	431a      	orrs	r2, r3
 80023de:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023e0:	69cb      	ldr	r3, [r1, #28]
 80023e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023e6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023e8:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80023ea:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ec:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80023f2:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023fa:	e7b1      	b.n	8002360 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80023fc:	2001      	movs	r0, #1
 80023fe:	e7f8      	b.n	80023f2 <HAL_SPI_Init+0xaa>

08002400 <HAL_SPI_Transmit>:
{
 8002400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002404:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002406:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800240a:	2b01      	cmp	r3, #1
{
 800240c:	4604      	mov	r4, r0
 800240e:	460d      	mov	r5, r1
 8002410:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002412:	f000 80a0 	beq.w	8002556 <HAL_SPI_Transmit+0x156>
 8002416:	2301      	movs	r3, #1
 8002418:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800241c:	f7ff f97a 	bl	8001714 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002420:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002424:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002426:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002428:	b2d8      	uxtb	r0, r3
 800242a:	f040 8092 	bne.w	8002552 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 800242e:	2d00      	cmp	r5, #0
 8002430:	d061      	beq.n	80024f6 <HAL_SPI_Transmit+0xf6>
 8002432:	f1b8 0f00 	cmp.w	r8, #0
 8002436:	d05e      	beq.n	80024f6 <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002438:	2303      	movs	r3, #3
 800243a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800243e:	2300      	movs	r3, #0
 8002440:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8002442:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8002446:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800244a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800244c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800244e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002450:	68a3      	ldr	r3, [r4, #8]
 8002452:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002454:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 800245a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800245e:	d107      	bne.n	8002470 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8002460:	6833      	ldr	r3, [r6, #0]
 8002462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002466:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8002468:	6833      	ldr	r3, [r6, #0]
 800246a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800246e:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002470:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002472:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002474:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002476:	bf5e      	ittt	pl
 8002478:	6833      	ldrpl	r3, [r6, #0]
 800247a:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800247e:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002480:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002484:	6863      	ldr	r3, [r4, #4]
 8002486:	d13f      	bne.n	8002508 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002488:	b113      	cbz	r3, 8002490 <HAL_SPI_Transmit+0x90>
 800248a:	f1b8 0f01 	cmp.w	r8, #1
 800248e:	d107      	bne.n	80024a0 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002490:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002494:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002496:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002498:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800249a:	3b01      	subs	r3, #1
 800249c:	b29b      	uxth	r3, r3
 800249e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80024a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	b9a3      	cbnz	r3, 80024d0 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024a6:	464a      	mov	r2, r9
 80024a8:	4639      	mov	r1, r7
 80024aa:	4620      	mov	r0, r4
 80024ac:	f7ff ff20 	bl	80022f0 <SPI_EndRxTxTransaction>
 80024b0:	2800      	cmp	r0, #0
 80024b2:	d14b      	bne.n	800254c <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024b4:	68a3      	ldr	r3, [r4, #8]
 80024b6:	b933      	cbnz	r3, 80024c6 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	9201      	str	r2, [sp, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80024c8:	3800      	subs	r0, #0
 80024ca:	bf18      	it	ne
 80024cc:	2001      	movne	r0, #1
error:
 80024ce:	e012      	b.n	80024f6 <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024d0:	6822      	ldr	r2, [r4, #0]
 80024d2:	6893      	ldr	r3, [r2, #8]
 80024d4:	0798      	lsls	r0, r3, #30
 80024d6:	d505      	bpl.n	80024e4 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024da:	f833 1b02 	ldrh.w	r1, [r3], #2
 80024de:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024e0:	6323      	str	r3, [r4, #48]	; 0x30
 80024e2:	e7d9      	b.n	8002498 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e4:	f7ff f916 	bl	8001714 <HAL_GetTick>
 80024e8:	eba0 0009 	sub.w	r0, r0, r9
 80024ec:	42b8      	cmp	r0, r7
 80024ee:	d3d7      	bcc.n	80024a0 <HAL_SPI_Transmit+0xa0>
 80024f0:	1c79      	adds	r1, r7, #1
 80024f2:	d0d5      	beq.n	80024a0 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80024f4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024fc:	2300      	movs	r3, #0
 80024fe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002502:	b003      	add	sp, #12
 8002504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002508:	b113      	cbz	r3, 8002510 <HAL_SPI_Transmit+0x110>
 800250a:	f1b8 0f01 	cmp.w	r8, #1
 800250e:	d108      	bne.n	8002522 <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002510:	782b      	ldrb	r3, [r5, #0]
 8002512:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002514:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002516:	3301      	adds	r3, #1
 8002518:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800251a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800251c:	3b01      	subs	r3, #1
 800251e:	b29b      	uxth	r3, r3
 8002520:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002522:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0bd      	beq.n	80024a6 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	0792      	lsls	r2, r2, #30
 8002530:	d503      	bpl.n	800253a <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002532:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002534:	7812      	ldrb	r2, [r2, #0]
 8002536:	731a      	strb	r2, [r3, #12]
 8002538:	e7ec      	b.n	8002514 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800253a:	f7ff f8eb 	bl	8001714 <HAL_GetTick>
 800253e:	eba0 0009 	sub.w	r0, r0, r9
 8002542:	42b8      	cmp	r0, r7
 8002544:	d3ed      	bcc.n	8002522 <HAL_SPI_Transmit+0x122>
 8002546:	1c7b      	adds	r3, r7, #1
 8002548:	d0eb      	beq.n	8002522 <HAL_SPI_Transmit+0x122>
 800254a:	e7d3      	b.n	80024f4 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800254c:	2320      	movs	r3, #32
 800254e:	6563      	str	r3, [r4, #84]	; 0x54
 8002550:	e7b0      	b.n	80024b4 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8002552:	2002      	movs	r0, #2
 8002554:	e7cf      	b.n	80024f6 <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8002556:	2002      	movs	r0, #2
 8002558:	e7d3      	b.n	8002502 <HAL_SPI_Transmit+0x102>

0800255a <HAL_SPI_TransmitReceive>:
{
 800255a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800255e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002560:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002564:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002568:	2b01      	cmp	r3, #1
{
 800256a:	4604      	mov	r4, r0
 800256c:	460d      	mov	r5, r1
 800256e:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8002570:	f000 80e0 	beq.w	8002734 <HAL_SPI_TransmitReceive+0x1da>
 8002574:	2301      	movs	r3, #1
 8002576:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800257a:	f7ff f8cb 	bl	8001714 <HAL_GetTick>
  tmp_state           = hspi->State;
 800257e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8002582:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002584:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002586:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8002588:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800258a:	d00a      	beq.n	80025a2 <HAL_SPI_TransmitReceive+0x48>
 800258c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002590:	f040 80ce 	bne.w	8002730 <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002594:	68a3      	ldr	r3, [r4, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 80ca 	bne.w	8002730 <HAL_SPI_TransmitReceive+0x1d6>
 800259c:	2904      	cmp	r1, #4
 800259e:	f040 80c7 	bne.w	8002730 <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025a2:	2d00      	cmp	r5, #0
 80025a4:	d03f      	beq.n	8002626 <HAL_SPI_TransmitReceive+0xcc>
 80025a6:	f1b9 0f00 	cmp.w	r9, #0
 80025aa:	d03c      	beq.n	8002626 <HAL_SPI_TransmitReceive+0xcc>
 80025ac:	2e00      	cmp	r6, #0
 80025ae:	d03a      	beq.n	8002626 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025b0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025b4:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025b8:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025ba:	bf1c      	itt	ne
 80025bc:	2305      	movne	r3, #5
 80025be:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80025c6:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ca:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80025cc:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80025ce:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025d0:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80025d2:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025d4:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80025d6:	bf58      	it	pl
 80025d8:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025da:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80025dc:	bf58      	it	pl
 80025de:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 80025e2:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80025e4:	bf58      	it	pl
 80025e6:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025e8:	68e1      	ldr	r1, [r4, #12]
 80025ea:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80025ee:	d151      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025f0:	b10a      	cbz	r2, 80025f6 <HAL_SPI_TransmitReceive+0x9c>
 80025f2:	2e01      	cmp	r6, #1
 80025f4:	d107      	bne.n	8002606 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80025fa:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80025fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fe:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002600:	3b01      	subs	r3, #1
 8002602:	b29b      	uxth	r3, r3
 8002604:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002606:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002608:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800260a:	b29b      	uxth	r3, r3
 800260c:	b96b      	cbnz	r3, 800262a <HAL_SPI_TransmitReceive+0xd0>
 800260e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002610:	b29b      	uxth	r3, r3
 8002612:	b953      	cbnz	r3, 800262a <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002614:	463a      	mov	r2, r7
 8002616:	4641      	mov	r1, r8
 8002618:	4620      	mov	r0, r4
 800261a:	f7ff fe69 	bl	80022f0 <SPI_EndRxTxTransaction>
 800261e:	2800      	cmp	r0, #0
 8002620:	d07b      	beq.n	800271a <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002622:	2320      	movs	r3, #32
 8002624:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002626:	2001      	movs	r0, #1
 8002628:	e02b      	b.n	8002682 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800262a:	6821      	ldr	r1, [r4, #0]
 800262c:	688b      	ldr	r3, [r1, #8]
 800262e:	079a      	lsls	r2, r3, #30
 8002630:	d50d      	bpl.n	800264e <HAL_SPI_TransmitReceive+0xf4>
 8002632:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002634:	b29b      	uxth	r3, r3
 8002636:	b153      	cbz	r3, 800264e <HAL_SPI_TransmitReceive+0xf4>
 8002638:	b14d      	cbz	r5, 800264e <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800263a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800263c:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002640:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002642:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002644:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002646:	3b01      	subs	r3, #1
 8002648:	b29b      	uxth	r3, r3
 800264a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800264c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800264e:	688a      	ldr	r2, [r1, #8]
 8002650:	f012 0201 	ands.w	r2, r2, #1
 8002654:	d00c      	beq.n	8002670 <HAL_SPI_TransmitReceive+0x116>
 8002656:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002658:	b29b      	uxth	r3, r3
 800265a:	b14b      	cbz	r3, 8002670 <HAL_SPI_TransmitReceive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800265c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800265e:	68c9      	ldr	r1, [r1, #12]
 8002660:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002664:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002666:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002668:	3b01      	subs	r3, #1
 800266a:	b29b      	uxth	r3, r3
 800266c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800266e:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002670:	f7ff f850 	bl	8001714 <HAL_GetTick>
 8002674:	1bc0      	subs	r0, r0, r7
 8002676:	4540      	cmp	r0, r8
 8002678:	d3c6      	bcc.n	8002608 <HAL_SPI_TransmitReceive+0xae>
 800267a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800267e:	d0c3      	beq.n	8002608 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8002680:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002682:	2301      	movs	r3, #1
 8002684:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002688:	2300      	movs	r3, #0
 800268a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800268e:	b003      	add	sp, #12
 8002690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002694:	b10a      	cbz	r2, 800269a <HAL_SPI_TransmitReceive+0x140>
 8002696:	2e01      	cmp	r6, #1
 8002698:	d108      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800269a:	782a      	ldrb	r2, [r5, #0]
 800269c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800269e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026a0:	3301      	adds	r3, #1
 80026a2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80026a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80026ac:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	b91b      	cbnz	r3, 80026bc <HAL_SPI_TransmitReceive+0x162>
 80026b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ab      	beq.n	8002614 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026bc:	6822      	ldr	r2, [r4, #0]
 80026be:	6893      	ldr	r3, [r2, #8]
 80026c0:	079b      	lsls	r3, r3, #30
 80026c2:	d50e      	bpl.n	80026e2 <HAL_SPI_TransmitReceive+0x188>
 80026c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	b15b      	cbz	r3, 80026e2 <HAL_SPI_TransmitReceive+0x188>
 80026ca:	b155      	cbz	r5, 80026e2 <HAL_SPI_TransmitReceive+0x188>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80026d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026d4:	3301      	adds	r3, #1
 80026d6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80026d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29b      	uxth	r3, r3
 80026de:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80026e0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026e2:	6822      	ldr	r2, [r4, #0]
 80026e4:	6891      	ldr	r1, [r2, #8]
 80026e6:	f011 0101 	ands.w	r1, r1, #1
 80026ea:	d00d      	beq.n	8002708 <HAL_SPI_TransmitReceive+0x1ae>
 80026ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	b153      	cbz	r3, 8002708 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026f4:	68d2      	ldr	r2, [r2, #12]
 80026f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026fa:	3301      	adds	r3, #1
 80026fc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80026fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002700:	3b01      	subs	r3, #1
 8002702:	b29b      	uxth	r3, r3
 8002704:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002706:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002708:	f7ff f804 	bl	8001714 <HAL_GetTick>
 800270c:	1bc0      	subs	r0, r0, r7
 800270e:	4540      	cmp	r0, r8
 8002710:	d3cd      	bcc.n	80026ae <HAL_SPI_TransmitReceive+0x154>
 8002712:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002716:	d0ca      	beq.n	80026ae <HAL_SPI_TransmitReceive+0x154>
 8002718:	e7b2      	b.n	8002680 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800271a:	68a3      	ldr	r3, [r4, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1b0      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	9001      	str	r0, [sp, #4]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	9201      	str	r2, [sp, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	9b01      	ldr	r3, [sp, #4]
 800272e:	e7a8      	b.n	8002682 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8002730:	2002      	movs	r0, #2
 8002732:	e7a6      	b.n	8002682 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8002734:	2002      	movs	r0, #2
 8002736:	e7aa      	b.n	800268e <HAL_SPI_TransmitReceive+0x134>

08002738 <HAL_SPI_Receive>:
{
 8002738:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800273c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800273e:	6843      	ldr	r3, [r0, #4]
 8002740:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002744:	4604      	mov	r4, r0
 8002746:	4688      	mov	r8, r1
 8002748:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800274a:	d10c      	bne.n	8002766 <HAL_SPI_Receive+0x2e>
 800274c:	6883      	ldr	r3, [r0, #8]
 800274e:	b953      	cbnz	r3, 8002766 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002750:	2304      	movs	r3, #4
 8002752:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002756:	4613      	mov	r3, r2
 8002758:	9500      	str	r5, [sp, #0]
 800275a:	460a      	mov	r2, r1
 800275c:	f7ff fefd 	bl	800255a <HAL_SPI_TransmitReceive>
}
 8002760:	b002      	add	sp, #8
 8002762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002766:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800276a:	2b01      	cmp	r3, #1
 800276c:	d07e      	beq.n	800286c <HAL_SPI_Receive+0x134>
 800276e:	2301      	movs	r3, #1
 8002770:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002774:	f7fe ffce 	bl	8001714 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002778:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800277c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800277e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002780:	b2d8      	uxtb	r0, r3
 8002782:	d171      	bne.n	8002868 <HAL_SPI_Receive+0x130>
  if ((pData == NULL) || (Size == 0U))
 8002784:	f1b8 0f00 	cmp.w	r8, #0
 8002788:	d05c      	beq.n	8002844 <HAL_SPI_Receive+0x10c>
 800278a:	2e00      	cmp	r6, #0
 800278c:	d05a      	beq.n	8002844 <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800278e:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002790:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002794:	2304      	movs	r3, #4
 8002796:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800279a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80027a4:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80027a8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027aa:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80027ac:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80027ae:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferSize  = Size;
 80027b0:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	d107      	bne.n	80027c6 <HAL_SPI_Receive+0x8e>
    __HAL_SPI_DISABLE(hspi);
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027c4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80027ca:	bf5e      	ittt	pl
 80027cc:	681a      	ldrpl	r2, [r3, #0]
 80027ce:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80027d2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80027d4:	68e3      	ldr	r3, [r4, #12]
 80027d6:	b1f3      	cbz	r3, 8002816 <HAL_SPI_Receive+0xde>
    while (hspi->RxXferCount > 0U)
 80027d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027da:	b29b      	uxth	r3, r3
 80027dc:	b1fb      	cbz	r3, 800281e <HAL_SPI_Receive+0xe6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	07d2      	lsls	r2, r2, #31
 80027e4:	d535      	bpl.n	8002852 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027ea:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027ee:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80027f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80027f8:	e7ee      	b.n	80027d8 <HAL_SPI_Receive+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	07d0      	lsls	r0, r2, #31
 8002800:	d518      	bpl.n	8002834 <HAL_SPI_Receive+0xfc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002802:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002804:	7b1b      	ldrb	r3, [r3, #12]
 8002806:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002808:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800280a:	3301      	adds	r3, #1
 800280c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800280e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002810:	3b01      	subs	r3, #1
 8002812:	b29b      	uxth	r3, r3
 8002814:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8002816:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ed      	bne.n	80027fa <HAL_SPI_Receive+0xc2>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800281e:	463a      	mov	r2, r7
 8002820:	4629      	mov	r1, r5
 8002822:	4620      	mov	r0, r4
 8002824:	f7ff fd3a 	bl	800229c <SPI_EndRxTransaction>
 8002828:	b9d8      	cbnz	r0, 8002862 <HAL_SPI_Receive+0x12a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800282a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800282c:	3800      	subs	r0, #0
 800282e:	bf18      	it	ne
 8002830:	2001      	movne	r0, #1
error :
 8002832:	e007      	b.n	8002844 <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002834:	f7fe ff6e 	bl	8001714 <HAL_GetTick>
 8002838:	1bc0      	subs	r0, r0, r7
 800283a:	42a8      	cmp	r0, r5
 800283c:	d3eb      	bcc.n	8002816 <HAL_SPI_Receive+0xde>
 800283e:	1c69      	adds	r1, r5, #1
 8002840:	d0e9      	beq.n	8002816 <HAL_SPI_Receive+0xde>
          errorcode = HAL_TIMEOUT;
 8002842:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002844:	2301      	movs	r3, #1
 8002846:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800284a:	2300      	movs	r3, #0
 800284c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002850:	e786      	b.n	8002760 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002852:	f7fe ff5f 	bl	8001714 <HAL_GetTick>
 8002856:	1bc0      	subs	r0, r0, r7
 8002858:	42a8      	cmp	r0, r5
 800285a:	d3bd      	bcc.n	80027d8 <HAL_SPI_Receive+0xa0>
 800285c:	1c6b      	adds	r3, r5, #1
 800285e:	d0bb      	beq.n	80027d8 <HAL_SPI_Receive+0xa0>
 8002860:	e7ef      	b.n	8002842 <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002862:	2320      	movs	r3, #32
 8002864:	6563      	str	r3, [r4, #84]	; 0x54
 8002866:	e7e0      	b.n	800282a <HAL_SPI_Receive+0xf2>
    errorcode = HAL_BUSY;
 8002868:	2002      	movs	r0, #2
 800286a:	e7eb      	b.n	8002844 <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 800286c:	2002      	movs	r0, #2
 800286e:	e777      	b.n	8002760 <HAL_SPI_Receive+0x28>

08002870 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002870:	6802      	ldr	r2, [r0, #0]
 8002872:	68c1      	ldr	r1, [r0, #12]
{
 8002874:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002876:	6913      	ldr	r3, [r2, #16]
 8002878:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800287c:	430b      	orrs	r3, r1
 800287e:	6113      	str	r3, [r2, #16]
{
 8002880:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002882:	6883      	ldr	r3, [r0, #8]
 8002884:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002886:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002888:	4303      	orrs	r3, r0
 800288a:	6968      	ldr	r0, [r5, #20]
 800288c:	4303      	orrs	r3, r0
 800288e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002890:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002894:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002898:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800289a:	430b      	orrs	r3, r1
 800289c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800289e:	6953      	ldr	r3, [r2, #20]
 80028a0:	69a9      	ldr	r1, [r5, #24]
 80028a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a6:	430b      	orrs	r3, r1
 80028a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028aa:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <UART_SetConfig+0xb8>)
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d003      	beq.n	80028b8 <UART_SetConfig+0x48>
 80028b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d124      	bne.n	8002902 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028b8:	f7ff fc8c 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028bc:	69ea      	ldr	r2, [r5, #28]
 80028be:	2319      	movs	r3, #25
 80028c0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80028c4:	fba0 0103 	umull	r0, r1, r0, r3
 80028c8:	e9d5 4300 	ldrd	r4, r3, [r5]
 80028cc:	d11c      	bne.n	8002908 <UART_SetConfig+0x98>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028ce:	461a      	mov	r2, r3
 80028d0:	1892      	adds	r2, r2, r2
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	415b      	adcs	r3, r3
 80028d8:	f7fe f966 	bl	8000ba8 <__aeabi_uldivmod>
 80028dc:	2164      	movs	r1, #100	; 0x64
 80028de:	fbb0 f5f1 	udiv	r5, r0, r1
 80028e2:	fb01 0315 	mls	r3, r1, r5, r0
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	3332      	adds	r3, #50	; 0x32
 80028ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ee:	f003 0207 	and.w	r2, r3, #7
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80028f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028fc:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028fe:	60a3      	str	r3, [r4, #8]
  }
}
 8002900:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002902:	f7ff fc57 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8002906:	e7d9      	b.n	80028bc <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002908:	009a      	lsls	r2, r3, #2
 800290a:	0f9b      	lsrs	r3, r3, #30
 800290c:	f7fe f94c 	bl	8000ba8 <__aeabi_uldivmod>
 8002910:	2264      	movs	r2, #100	; 0x64
 8002912:	fbb0 f1f2 	udiv	r1, r0, r2
 8002916:	fb02 0311 	mls	r3, r2, r1, r0
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	3332      	adds	r3, #50	; 0x32
 800291e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002922:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002926:	e7ea      	b.n	80028fe <UART_SetConfig+0x8e>
 8002928:	40011000 	.word	0x40011000

0800292c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	4604      	mov	r4, r0
 8002930:	460e      	mov	r6, r1
 8002932:	4617      	mov	r7, r2
 8002934:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002936:	6822      	ldr	r2, [r4, #0]
 8002938:	6813      	ldr	r3, [r2, #0]
 800293a:	ea36 0303 	bics.w	r3, r6, r3
 800293e:	d101      	bne.n	8002944 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002940:	2000      	movs	r0, #0
 8002942:	e014      	b.n	800296e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8002944:	1c6b      	adds	r3, r5, #1
 8002946:	d0f7      	beq.n	8002938 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002948:	b995      	cbnz	r5, 8002970 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002952:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800295c:	2320      	movs	r3, #32
 800295e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002962:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002966:	2300      	movs	r3, #0
 8002968:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800296c:	2003      	movs	r0, #3
}
 800296e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002970:	f7fe fed0 	bl	8001714 <HAL_GetTick>
 8002974:	1bc0      	subs	r0, r0, r7
 8002976:	4285      	cmp	r5, r0
 8002978:	d2dd      	bcs.n	8002936 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800297a:	e7e6      	b.n	800294a <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

0800297c <HAL_UART_Init>:
{
 800297c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800297e:	4604      	mov	r4, r0
 8002980:	b340      	cbz	r0, 80029d4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002982:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002986:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800298a:	b91b      	cbnz	r3, 8002994 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800298c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002990:	f7fe fdf8 	bl	8001584 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002994:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002996:	2324      	movs	r3, #36	; 0x24
 8002998:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800299c:	68d3      	ldr	r3, [r2, #12]
 800299e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029a2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7ff ff63 	bl	8002870 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ba:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80029c6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c8:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80029d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029d4:	2001      	movs	r0, #1
 80029d6:	e7fc      	b.n	80029d2 <HAL_UART_Init+0x56>

080029d8 <HAL_UART_Transmit>:
{
 80029d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029da:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80029dc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80029e0:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80029e2:	2a20      	cmp	r2, #32
{
 80029e4:	4604      	mov	r4, r0
 80029e6:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80029e8:	d149      	bne.n	8002a7e <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80029ea:	2900      	cmp	r1, #0
 80029ec:	d045      	beq.n	8002a7a <HAL_UART_Transmit+0xa2>
 80029ee:	2f00      	cmp	r7, #0
 80029f0:	d043      	beq.n	8002a7a <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80029f2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80029f6:	2a01      	cmp	r2, #1
 80029f8:	d041      	beq.n	8002a7e <HAL_UART_Transmit+0xa6>
 80029fa:	2201      	movs	r2, #1
 80029fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a00:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a02:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a04:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a06:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002a0a:	f7fe fe83 	bl	8001714 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a0e:	68a1      	ldr	r1, [r4, #8]
 8002a10:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8002a12:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a14:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002a18:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8002a1a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1c:	d103      	bne.n	8002a26 <HAL_UART_Transmit+0x4e>
 8002a1e:	6921      	ldr	r1, [r4, #16]
 8002a20:	b909      	cbnz	r1, 8002a26 <HAL_UART_Transmit+0x4e>
 8002a22:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002a24:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8002a26:	2100      	movs	r1, #0
 8002a28:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002a2c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002a2e:	b289      	uxth	r1, r1
 8002a30:	b941      	cbnz	r1, 8002a44 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a32:	2140      	movs	r1, #64	; 0x40
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff ff79 	bl	800292c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002a3a:	b960      	cbnz	r0, 8002a56 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002a42:	e009      	b.n	8002a58 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	4620      	mov	r0, r4
 8002a48:	e9cd 2300 	strd	r2, r3, [sp]
 8002a4c:	f7ff ff6e 	bl	800292c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a54:	b110      	cbz	r0, 8002a5c <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002a56:	2003      	movs	r0, #3
}
 8002a58:	b003      	add	sp, #12
 8002a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 8002a5c:	6820      	ldr	r0, [r4, #0]
 8002a5e:	b94e      	cbnz	r6, 8002a74 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a60:	f835 1b02 	ldrh.w	r1, [r5], #2
 8002a64:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a68:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8002a6a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002a6c:	3901      	subs	r1, #1
 8002a6e:	b289      	uxth	r1, r1
 8002a70:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002a72:	e7db      	b.n	8002a2c <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a74:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002a78:	e7f6      	b.n	8002a68 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	e7ec      	b.n	8002a58 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002a7e:	2002      	movs	r0, #2
 8002a80:	e7ea      	b.n	8002a58 <HAL_UART_Transmit+0x80>

08002a82 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8002a82:	f000 b8cd 	b.w	8002c20 <ai_platform_network_get_error>
	...

08002a88 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002a88:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	e9cd 3200 	strd	r3, r2, [sp]
 8002a92:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <ai_network_create+0x18>)
 8002a94:	2301      	movs	r3, #1
 8002a96:	f000 f8f5 	bl	8002c84 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002a9a:	b003      	add	sp, #12
 8002a9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aa0:	200007b4 	.word	0x200007b4

08002aa4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	4605      	mov	r5, r0
 8002aa8:	460c      	mov	r4, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8002aaa:	f000 f95d 	bl	8002d68 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d06e      	beq.n	8002b90 <ai_network_init+0xec>
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 8002ab2:	4a38      	ldr	r2, [pc, #224]	; (8002b94 <ai_network_init+0xf0>)

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
 8002ab4:	6923      	ldr	r3, [r4, #16]
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 8002ab6:	6811      	ldr	r1, [r2, #0]
 8002ab8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002abc:	6011      	str	r1, [r2, #0]
    conv1d_weights_array.data_start = AI_PTR(weights + 0);
 8002abe:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 8002ac2:	4a35      	ldr	r2, [pc, #212]	; (8002b98 <ai_network_init+0xf4>)
 8002ac4:	6811      	ldr	r1, [r2, #0]
 8002ac6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002aca:	6011      	str	r1, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights + 288);
 8002acc:	f503 7190 	add.w	r1, r3, #288	; 0x120
    conv1d_bias_array.data_start = AI_PTR(weights + 288);
 8002ad0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8002ad4:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <ai_network_init+0xf8>)
 8002ad6:	6811      	ldr	r1, [r2, #0]
 8002ad8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002adc:	6011      	str	r1, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights + 320);
 8002ade:	f503 71a0 	add.w	r1, r3, #320	; 0x140
    conv1d_1_weights_array.data_start = AI_PTR(weights + 320);
 8002ae2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002ae6:	4a2e      	ldr	r2, [pc, #184]	; (8002ba0 <ai_network_init+0xfc>)
 8002ae8:	6811      	ldr	r1, [r2, #0]
 8002aea:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002aee:	6011      	str	r1, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights + 704);
 8002af0:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
    conv1d_1_bias_array.data_start = AI_PTR(weights + 704);
 8002af4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8002af8:	4a2a      	ldr	r2, [pc, #168]	; (8002ba4 <ai_network_init+0x100>)
 8002afa:	6811      	ldr	r1, [r2, #0]
 8002afc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002b00:	6011      	str	r1, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 720);
 8002b02:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
    dense_weights_array.data_start = AI_PTR(weights + 720);
 8002b06:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002b0a:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <ai_network_init+0x104>)
 8002b0c:	6811      	ldr	r1, [r2, #0]
 8002b0e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002b12:	6011      	str	r1, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 1360);
 8002b14:	f503 61aa 	add.w	r1, r3, #1360	; 0x550
    dense_bias_array.data_start = AI_PTR(weights + 1360);
 8002b18:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8002b1c:	4a23      	ldr	r2, [pc, #140]	; (8002bac <ai_network_init+0x108>)
 8002b1e:	6811      	ldr	r1, [r2, #0]
 8002b20:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002b24:	6011      	str	r1, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 1400);
 8002b26:	f503 61af 	add.w	r1, r3, #1400	; 0x578
    dense_1_weights_array.data_start = AI_PTR(weights + 1400);
 8002b2a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002b2e:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <ai_network_init+0x10c>)
 8002b30:	6811      	ldr	r1, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1560);
 8002b32:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002b36:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002b3a:	6011      	str	r1, [r2, #0]
    dense_1_bias_array.data_start = AI_PTR(weights + 1560);
 8002b3c:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8002b40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    input_0_output_array.data = AI_PTR(NULL);
 8002b42:	491c      	ldr	r1, [pc, #112]	; (8002bb4 <ai_network_init+0x110>)
 8002b44:	2200      	movs	r2, #0
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8002b46:	3303      	adds	r3, #3
    input_0_output_array.data_start = AI_PTR(NULL);
 8002b48:	e9c1 2202 	strd	r2, r2, [r1, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8002b4c:	f023 0303 	bic.w	r3, r3, #3
    conv1d_output_array.data = AI_PTR(activations + 128);
 8002b50:	4919      	ldr	r1, [pc, #100]	; (8002bb8 <ai_network_init+0x114>)
 8002b52:	f103 0080 	add.w	r0, r3, #128	; 0x80
    conv1d_output_array.data_start = AI_PTR(activations + 128);
 8002b56:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv1d_1_output_array.data = AI_PTR(activations + 0);
 8002b5a:	4918      	ldr	r1, [pc, #96]	; (8002bbc <ai_network_init+0x118>)
    conv1d_1_output_array.data_start = AI_PTR(activations + 0);
 8002b5c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_output_array.data = AI_PTR(activations + 64);
 8002b60:	4917      	ldr	r1, [pc, #92]	; (8002bc0 <ai_network_init+0x11c>)
 8002b62:	f103 0040 	add.w	r0, r3, #64	; 0x40
    dense_output_array.data_start = AI_PTR(activations + 64);
 8002b66:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_nl_output_array.data = AI_PTR(activations + 0);
 8002b6a:	4916      	ldr	r1, [pc, #88]	; (8002bc4 <ai_network_init+0x120>)
    dense_nl_output_array.data_start = AI_PTR(activations + 0);
 8002b6c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_1_output_array.data = AI_PTR(activations + 40);
 8002b70:	4915      	ldr	r1, [pc, #84]	; (8002bc8 <ai_network_init+0x124>)
 8002b72:	f103 0028 	add.w	r0, r3, #40	; 0x28
    dense_1_output_array.data_start = AI_PTR(activations + 40);
 8002b76:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 8002b7a:	4914      	ldr	r1, [pc, #80]	; (8002bcc <ai_network_init+0x128>)
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 8002b7c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv1d_scratch0_array.data = AI_PTR(activations + 0);
 8002b80:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <ai_network_init+0x12c>)
  ok &= network_configure_activations(net_ctx, &params->activations);

  ok &= ai_platform_network_post_init(network);
 8002b82:	4628      	mov	r0, r5
    conv1d_scratch0_array.data_start = AI_PTR(activations + 0);
 8002b84:	e9c2 3302 	strd	r3, r3, [r2, #8]

  return ok;
}
 8002b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ok &= ai_platform_network_post_init(network);
 8002b8c:	f000 b95e 	b.w	8002e4c <ai_platform_network_post_init>
}
 8002b90:	bd38      	pop	{r3, r4, r5, pc}
 8002b92:	bf00      	nop
 8002b94:	200005cc 	.word	0x200005cc
 8002b98:	200004ec 	.word	0x200004ec
 8002b9c:	200004c0 	.word	0x200004c0
 8002ba0:	2000040c 	.word	0x2000040c
 8002ba4:	200007a4 	.word	0x200007a4
 8002ba8:	200006e4 	.word	0x200006e4
 8002bac:	200006b8 	.word	0x200006b8
 8002bb0:	200005f8 	.word	0x200005f8
 8002bb4:	20000834 	.word	0x20000834
 8002bb8:	20000574 	.word	0x20000574
 8002bbc:	20000494 	.word	0x20000494
 8002bc0:	20000778 	.word	0x20000778
 8002bc4:	2000074c 	.word	0x2000074c
 8002bc8:	2000068c 	.word	0x2000068c
 8002bcc:	20000660 	.word	0x20000660
 8002bd0:	200005a0 	.word	0x200005a0

08002bd4 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8002bd4:	f000 b986 	b.w	8002ee4 <ai_platform_network_process>

08002bd8 <ai_network_data_weights_get>:
    0xee, 0x1a, 0x83, 0xbe, 0xed, 0xf5, 0xd8, 0xbf, 0xb6,
    0x19, 0x51, 0xc0, 0x88, 0xbb, 0xc4, 0xbf, 0xd8, 0x81,
    0x57, 0xc0, 0x60, 0x97, 0xc9, 0xbd, 0x89, 0x6e, 0x8b,
    0x3e, 0xd4, 0x22, 0xb0, 0xbf, 0xed, 0x22, 0xa3, 0x3f  };
  return AI_HANDLE_PTR(s_network_weights);
}
 8002bd8:	4800      	ldr	r0, [pc, #0]	; (8002bdc <ai_network_data_weights_get+0x4>)
 8002bda:	4770      	bx	lr
 8002bdc:	08009440 	.word	0x08009440

08002be0 <_platform_network_state_setup.isra.1>:
 8002be0:	b430      	push	{r4, r5}
 8002be2:	68dd      	ldr	r5, [r3, #12]
 8002be4:	695c      	ldr	r4, [r3, #20]
 8002be6:	68ed      	ldr	r5, [r5, #12]
 8002be8:	68e4      	ldr	r4, [r4, #12]
 8002bea:	fb04 f405 	mul.w	r4, r4, r5
 8002bee:	6084      	str	r4, [r0, #8]
 8002bf0:	8809      	ldrh	r1, [r1, #0]
 8002bf2:	fb04 f401 	mul.w	r4, r4, r1
 8002bf6:	60c4      	str	r4, [r0, #12]
 8002bf8:	6811      	ldr	r1, [r2, #0]
 8002bfa:	6041      	str	r1, [r0, #4]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	4414      	add	r4, r2
 8002c00:	6004      	str	r4, [r0, #0]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	6814      	ldr	r4, [r2, #0]
 8002c06:	00a4      	lsls	r4, r4, #2
 8002c08:	d407      	bmi.n	8002c1a <_platform_network_state_setup.isra.1+0x3a>
 8002c0a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8002c0e:	1b64      	subs	r4, r4, r5
 8002c10:	4421      	add	r1, r4
 8002c12:	6091      	str	r1, [r2, #8]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	6842      	ldr	r2, [r0, #4]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	bc30      	pop	{r4, r5}
 8002c1c:	4770      	bx	lr
	...

08002c20 <ai_platform_network_get_error>:
 8002c20:	b410      	push	{r4}
 8002c22:	b120      	cbz	r0, 8002c2e <ai_platform_network_get_error+0xe>
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <ai_platform_network_get_error+0x4c>)
 8002c26:	6802      	ldr	r2, [r0, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	bf18      	it	ne
 8002c2c:	2000      	movne	r0, #0
 8002c2e:	4910      	ldr	r1, [pc, #64]	; (8002c70 <ai_platform_network_get_error+0x50>)
 8002c30:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <ai_platform_network_get_error+0x54>)
 8002c32:	680b      	ldr	r3, [r1, #0]
 8002c34:	2401      	movs	r4, #1
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	600b      	str	r3, [r1, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	6014      	str	r4, [r2, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2a00      	cmp	r2, #0
 8002c44:	d1fc      	bne.n	8002c40 <ai_platform_network_get_error+0x20>
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <ai_platform_network_get_error+0x58>)
 8002c48:	4a0c      	ldr	r2, [pc, #48]	; (8002c7c <ai_platform_network_get_error+0x5c>)
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <ai_platform_network_get_error+0x60>)
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d000      	beq.n	8002c56 <ai_platform_network_get_error+0x36>
 8002c54:	e7fe      	b.n	8002c54 <ai_platform_network_get_error+0x34>
 8002c56:	b120      	cbz	r0, 8002c62 <ai_platform_network_get_error+0x42>
 8002c58:	3010      	adds	r0, #16
 8002c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c5e:	f000 bb4d 	b.w	80032fc <core_get_error>
 8002c62:	f241 0010 	movw	r0, #4112	; 0x1010
 8002c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	a1c00100 	.word	0xa1c00100
 8002c70:	e0002000 	.word	0xe0002000
 8002c74:	40023008 	.word	0x40023008
 8002c78:	40023000 	.word	0x40023000
 8002c7c:	f407a5c2 	.word	0xf407a5c2
 8002c80:	b5e8b5cd 	.word	0xb5e8b5cd

08002c84 <ai_platform_network_create>:
 8002c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c88:	4f30      	ldr	r7, [pc, #192]	; (8002d4c <ai_platform_network_create+0xc8>)
 8002c8a:	4e31      	ldr	r6, [pc, #196]	; (8002d50 <ai_platform_network_create+0xcc>)
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	b083      	sub	sp, #12
 8002c90:	f021 0101 	bic.w	r1, r1, #1
 8002c94:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8002c98:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	6031      	str	r1, [r6, #0]
 8002ca2:	6831      	ldr	r1, [r6, #0]
 8002ca4:	2900      	cmp	r1, #0
 8002ca6:	d1fc      	bne.n	8002ca2 <ai_platform_network_create+0x1e>
 8002ca8:	492a      	ldr	r1, [pc, #168]	; (8002d54 <ai_platform_network_create+0xd0>)
 8002caa:	4d2b      	ldr	r5, [pc, #172]	; (8002d58 <ai_platform_network_create+0xd4>)
 8002cac:	600d      	str	r5, [r1, #0]
 8002cae:	680d      	ldr	r5, [r1, #0]
 8002cb0:	492a      	ldr	r1, [pc, #168]	; (8002d5c <ai_platform_network_create+0xd8>)
 8002cb2:	428d      	cmp	r5, r1
 8002cb4:	d000      	beq.n	8002cb8 <ai_platform_network_create+0x34>
 8002cb6:	e7fe      	b.n	8002cb6 <ai_platform_network_create+0x32>
 8002cb8:	b1e0      	cbz	r0, 8002cf4 <ai_platform_network_create+0x70>
 8002cba:	4680      	mov	r8, r0
 8002cbc:	461d      	mov	r5, r3
 8002cbe:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <ai_platform_network_create+0xdc>)
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	f8c8 2000 	str.w	r2, [r8]
 8002cc6:	4617      	mov	r7, r2
 8002cc8:	f000 fb16 	bl	80032f8 <core_init>
 8002ccc:	b1b8      	cbz	r0, 8002cfe <ai_platform_network_create+0x7a>
 8002cce:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <ai_platform_network_create+0xc8>)
 8002cd0:	491f      	ldr	r1, [pc, #124]	; (8002d50 <ai_platform_network_create+0xcc>)
 8002cd2:	6813      	ldr	r3, [r2, #0]
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	6033      	str	r3, [r6, #0]
 8002cde:	680e      	ldr	r6, [r1, #0]
 8002ce0:	2e00      	cmp	r6, #0
 8002ce2:	d1fc      	bne.n	8002cde <ai_platform_network_create+0x5a>
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <ai_platform_network_create+0xd0>)
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <ai_platform_network_create+0xd4>)
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <ai_platform_network_create+0xd8>)
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d016      	beq.n	8002d20 <ai_platform_network_create+0x9c>
 8002cf2:	e7fe      	b.n	8002cf2 <ai_platform_network_create+0x6e>
 8002cf4:	f241 0010 	movw	r0, #4112	; 0x1010
 8002cf8:	b003      	add	sp, #12
 8002cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cfe:	062d      	lsls	r5, r5, #24
 8002d00:	0424      	lsls	r4, r4, #16
 8002d02:	2130      	movs	r1, #48	; 0x30
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c8 3000 	str.w	r3, [r8]
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 8002d10:	2000      	movs	r0, #0
 8002d12:	432b      	orrs	r3, r5
 8002d14:	f361 0007 	bfi	r0, r1, #0, #8
 8002d18:	663b      	str	r3, [r7, #96]	; 0x60
 8002d1a:	f362 201f 	bfi	r0, r2, #8, #24
 8002d1e:	e7eb      	b.n	8002cf8 <ai_platform_network_create+0x74>
 8002d20:	062d      	lsls	r5, r5, #24
 8002d22:	0424      	lsls	r4, r4, #16
 8002d24:	ea45 0304 	orr.w	r3, r5, r4
 8002d28:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8002d2c:	d001      	beq.n	8002d32 <ai_platform_network_create+0xae>
 8002d2e:	2101      	movs	r1, #1
 8002d30:	e7e8      	b.n	8002d04 <ai_platform_network_create+0x80>
 8002d32:	a802      	add	r0, sp, #8
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <ai_platform_network_create+0xe0>)
 8002d36:	f840 3d04 	str.w	r3, [r0, #-4]!
 8002d3a:	f003 fb47 	bl	80063cc <ai_check_custom_types>
 8002d3e:	b110      	cbz	r0, 8002d46 <ai_platform_network_create+0xc2>
 8002d40:	4632      	mov	r2, r6
 8002d42:	4631      	mov	r1, r6
 8002d44:	e7e2      	b.n	8002d0c <ai_platform_network_create+0x88>
 8002d46:	2102      	movs	r1, #2
 8002d48:	e7dc      	b.n	8002d04 <ai_platform_network_create+0x80>
 8002d4a:	bf00      	nop
 8002d4c:	e0002000 	.word	0xe0002000
 8002d50:	40023008 	.word	0x40023008
 8002d54:	40023000 	.word	0x40023000
 8002d58:	f407a5c2 	.word	0xf407a5c2
 8002d5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8002d60:	a1c00100 	.word	0xa1c00100
 8002d64:	84048403 	.word	0x84048403

08002d68 <ai_platform_network_init>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	4605      	mov	r5, r0
 8002d6e:	b120      	cbz	r0, 8002d7a <ai_platform_network_init+0x12>
 8002d70:	4b30      	ldr	r3, [pc, #192]	; (8002e34 <ai_platform_network_init+0xcc>)
 8002d72:	6802      	ldr	r2, [r0, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	bf18      	it	ne
 8002d78:	2500      	movne	r5, #0
 8002d7a:	492f      	ldr	r1, [pc, #188]	; (8002e38 <ai_platform_network_init+0xd0>)
 8002d7c:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <ai_platform_network_init+0xd4>)
 8002d7e:	680b      	ldr	r3, [r1, #0]
 8002d80:	2001      	movs	r0, #1
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	600b      	str	r3, [r1, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	6010      	str	r0, [r2, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	2a00      	cmp	r2, #0
 8002d90:	d1fc      	bne.n	8002d8c <ai_platform_network_init+0x24>
 8002d92:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <ai_platform_network_init+0xd8>)
 8002d94:	4a2b      	ldr	r2, [pc, #172]	; (8002e44 <ai_platform_network_init+0xdc>)
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <ai_platform_network_init+0xe0>)
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d000      	beq.n	8002da2 <ai_platform_network_init+0x3a>
 8002da0:	e7fe      	b.n	8002da0 <ai_platform_network_init+0x38>
 8002da2:	b1dd      	cbz	r5, 8002ddc <ai_platform_network_init+0x74>
 8002da4:	b1e4      	cbz	r4, 8002de0 <ai_platform_network_init+0x78>
 8002da6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002da8:	6926      	ldr	r6, [r4, #16]
 8002daa:	b30f      	cbz	r7, 8002df0 <ai_platform_network_init+0x88>
 8002dac:	b38e      	cbz	r6, 8002e12 <ai_platform_network_init+0xaa>
 8002dae:	4627      	mov	r7, r4
 8002db0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002db2:	f105 0618 	add.w	r6, r5, #24
 8002db6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002db8:	e897 0003 	ldmia.w	r7, {r0, r1}
 8002dbc:	e886 0003 	stmia.w	r6, {r0, r1}
 8002dc0:	3418      	adds	r4, #24
 8002dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc4:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8002dc8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002dca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e886 0003 	stmia.w	r6, {r0, r1}
 8002dd4:	60eb      	str	r3, [r5, #12]
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	f003 fb22 	bl	8006420 <ai_layers_init_all>
 8002ddc:	4628      	mov	r0, r5
 8002dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002de0:	f105 0010 	add.w	r0, r5, #16
 8002de4:	2211      	movs	r2, #17
 8002de6:	2110      	movs	r1, #16
 8002de8:	4625      	mov	r5, r4
 8002dea:	f000 fa8d 	bl	8003308 <core_set_error>
 8002dee:	e7f5      	b.n	8002ddc <ai_platform_network_init+0x74>
 8002df0:	8c21      	ldrh	r1, [r4, #32]
 8002df2:	8be2      	ldrh	r2, [r4, #30]
 8002df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002df6:	fb02 f201 	mul.w	r2, r2, r1
 8002dfa:	fb03 f302 	mul.w	r3, r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0d4      	beq.n	8002dac <ai_platform_network_init+0x44>
 8002e02:	f105 0010 	add.w	r0, r5, #16
 8002e06:	2213      	movs	r2, #19
 8002e08:	2110      	movs	r1, #16
 8002e0a:	463d      	mov	r5, r7
 8002e0c:	f000 fa7c 	bl	8003308 <core_set_error>
 8002e10:	e7e4      	b.n	8002ddc <ai_platform_network_init+0x74>
 8002e12:	8921      	ldrh	r1, [r4, #8]
 8002e14:	88e2      	ldrh	r2, [r4, #6]
 8002e16:	68e3      	ldr	r3, [r4, #12]
 8002e18:	fb02 f201 	mul.w	r2, r2, r1
 8002e1c:	fb03 f302 	mul.w	r3, r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0c4      	beq.n	8002dae <ai_platform_network_init+0x46>
 8002e24:	f105 0010 	add.w	r0, r5, #16
 8002e28:	2212      	movs	r2, #18
 8002e2a:	2110      	movs	r1, #16
 8002e2c:	4635      	mov	r5, r6
 8002e2e:	f000 fa6b 	bl	8003308 <core_set_error>
 8002e32:	e7d3      	b.n	8002ddc <ai_platform_network_init+0x74>
 8002e34:	a1c00100 	.word	0xa1c00100
 8002e38:	e0002000 	.word	0xe0002000
 8002e3c:	40023008 	.word	0x40023008
 8002e40:	40023000 	.word	0x40023000
 8002e44:	f407a5c2 	.word	0xf407a5c2
 8002e48:	b5e8b5cd 	.word	0xb5e8b5cd

08002e4c <ai_platform_network_post_init>:
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4604      	mov	r4, r0
 8002e50:	b120      	cbz	r0, 8002e5c <ai_platform_network_post_init+0x10>
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <ai_platform_network_post_init+0x80>)
 8002e54:	6802      	ldr	r2, [r0, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	bf18      	it	ne
 8002e5a:	2400      	movne	r4, #0
 8002e5c:	491c      	ldr	r1, [pc, #112]	; (8002ed0 <ai_platform_network_post_init+0x84>)
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <ai_platform_network_post_init+0x88>)
 8002e60:	680b      	ldr	r3, [r1, #0]
 8002e62:	2001      	movs	r0, #1
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	600b      	str	r3, [r1, #0]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	6010      	str	r0, [r2, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	d1fc      	bne.n	8002e6e <ai_platform_network_post_init+0x22>
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <ai_platform_network_post_init+0x8c>)
 8002e76:	4a19      	ldr	r2, [pc, #100]	; (8002edc <ai_platform_network_post_init+0x90>)
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <ai_platform_network_post_init+0x94>)
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d000      	beq.n	8002e84 <ai_platform_network_post_init+0x38>
 8002e82:	e7fe      	b.n	8002e82 <ai_platform_network_post_init+0x36>
 8002e84:	b1bc      	cbz	r4, 8002eb6 <ai_platform_network_post_init+0x6a>
 8002e86:	68e3      	ldr	r3, [r4, #12]
 8002e88:	f013 0502 	ands.w	r5, r3, #2
 8002e8c:	d015      	beq.n	8002eba <ai_platform_network_post_init+0x6e>
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f003 fada 	bl	8006448 <ai_layers_post_init_all>
 8002e94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e96:	b163      	cbz	r3, 8002eb2 <ai_platform_network_post_init+0x66>
 8002e98:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8002e9a:	b91d      	cbnz	r5, 8002ea4 <ai_platform_network_post_init+0x58>
 8002e9c:	e009      	b.n	8002eb2 <ai_platform_network_post_init+0x66>
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	b13b      	cbz	r3, 8002eb2 <ai_platform_network_post_init+0x66>
 8002ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ea4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	4798      	blx	r3
 8002eac:	692b      	ldr	r3, [r5, #16]
 8002eae:	42ab      	cmp	r3, r5
 8002eb0:	d1f5      	bne.n	8002e9e <ai_platform_network_post_init+0x52>
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	bd38      	pop	{r3, r4, r5, pc}
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	bd38      	pop	{r3, r4, r5, pc}
 8002eba:	f104 0010 	add.w	r0, r4, #16
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	2111      	movs	r1, #17
 8002ec2:	f000 fa21 	bl	8003308 <core_set_error>
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	bd38      	pop	{r3, r4, r5, pc}
 8002eca:	bf00      	nop
 8002ecc:	a1c00100 	.word	0xa1c00100
 8002ed0:	e0002000 	.word	0xe0002000
 8002ed4:	40023008 	.word	0x40023008
 8002ed8:	40023000 	.word	0x40023000
 8002edc:	f407a5c2 	.word	0xf407a5c2
 8002ee0:	b5e8b5cd 	.word	0xb5e8b5cd

08002ee4 <ai_platform_network_process>:
 8002ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	4604      	mov	r4, r0
 8002eec:	9201      	str	r2, [sp, #4]
 8002eee:	b120      	cbz	r0, 8002efa <ai_platform_network_process+0x16>
 8002ef0:	4ba5      	ldr	r3, [pc, #660]	; (8003188 <ai_platform_network_process+0x2a4>)
 8002ef2:	6802      	ldr	r2, [r0, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	bf18      	it	ne
 8002ef8:	2400      	movne	r4, #0
 8002efa:	48a4      	ldr	r0, [pc, #656]	; (800318c <ai_platform_network_process+0x2a8>)
 8002efc:	4ba4      	ldr	r3, [pc, #656]	; (8003190 <ai_platform_network_process+0x2ac>)
 8002efe:	6802      	ldr	r2, [r0, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	6002      	str	r2, [r0, #0]
 8002f06:	2201      	movs	r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d1fc      	bne.n	8002f0a <ai_platform_network_process+0x26>
 8002f10:	4ba0      	ldr	r3, [pc, #640]	; (8003194 <ai_platform_network_process+0x2b0>)
 8002f12:	4aa1      	ldr	r2, [pc, #644]	; (8003198 <ai_platform_network_process+0x2b4>)
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4ba0      	ldr	r3, [pc, #640]	; (800319c <ai_platform_network_process+0x2b8>)
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d000      	beq.n	8002f20 <ai_platform_network_process+0x3c>
 8002f1e:	e7fe      	b.n	8002f1e <ai_platform_network_process+0x3a>
 8002f20:	2c00      	cmp	r4, #0
 8002f22:	d066      	beq.n	8002ff2 <ai_platform_network_process+0x10e>
 8002f24:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8002f28:	b107      	cbz	r7, 8002f2c <ai_platform_network_process+0x48>
 8002f2a:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8002f2c:	68e3      	ldr	r3, [r4, #12]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2600      	movs	r6, #0
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	6166      	str	r6, [r4, #20]
 8002f38:	f040 80fe 	bne.w	8003138 <ai_platform_network_process+0x254>
 8002f3c:	2900      	cmp	r1, #0
 8002f3e:	d07f      	beq.n	8003040 <ai_platform_network_process+0x15c>
 8002f40:	2f00      	cmp	r7, #0
 8002f42:	d07d      	beq.n	8003040 <ai_platform_network_process+0x15c>
 8002f44:	883b      	ldrh	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d07a      	beq.n	8003040 <ai_platform_network_process+0x15c>
 8002f4a:	460d      	mov	r5, r1
 8002f4c:	46a0      	mov	r8, r4
 8002f4e:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8002f52:	429e      	cmp	r6, r3
 8002f54:	d27d      	bcs.n	8003052 <ai_platform_network_process+0x16e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d07a      	beq.n	8003052 <ai_platform_network_process+0x16e>
 8002f5c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8002f60:	2c00      	cmp	r4, #0
 8002f62:	d076      	beq.n	8003052 <ai_platform_network_process+0x16e>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8002f6c:	d067      	beq.n	800303e <ai_platform_network_process+0x15a>
 8002f6e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8002f72:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8002f76:	69a0      	ldr	r0, [r4, #24]
 8002f78:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002f7c:	6841      	ldr	r1, [r0, #4]
 8002f7e:	fb0b f30e 	mul.w	r3, fp, lr
 8002f82:	fb0c f303 	mul.w	r3, ip, r3
 8002f86:	4299      	cmp	r1, r3
 8002f88:	d350      	bcc.n	800302c <ai_platform_network_process+0x148>
 8002f8a:	68e3      	ldr	r3, [r4, #12]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	455a      	cmp	r2, fp
 8002f90:	d14c      	bne.n	800302c <ai_platform_network_process+0x148>
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	4572      	cmp	r2, lr
 8002f96:	d149      	bne.n	800302c <ai_platform_network_process+0x148>
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	459c      	cmp	ip, r3
 8002f9c:	d146      	bne.n	800302c <ai_platform_network_process+0x148>
 8002f9e:	6800      	ldr	r0, [r0, #0]
 8002fa0:	f003 fb04 	bl	80065ac <ai_array_get_byte_size>
 8002fa4:	68e2      	ldr	r2, [r4, #12]
 8002fa6:	6963      	ldr	r3, [r4, #20]
 8002fa8:	68d2      	ldr	r2, [r2, #12]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	fb03 f302 	mul.w	r3, r3, r2
 8002fb0:	4298      	cmp	r0, r3
 8002fb2:	d33b      	bcc.n	800302c <ai_platform_network_process+0x148>
 8002fb4:	69a3      	ldr	r3, [r4, #24]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	f003 faac 	bl	8006514 <ai_array_to_buffer_fmt>
 8002fbc:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8002fc0:	4043      	eors	r3, r0
 8002fc2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8002fc6:	d128      	bne.n	800301a <ai_platform_network_process+0x136>
 8002fc8:	68eb      	ldr	r3, [r5, #12]
 8002fca:	b1f3      	cbz	r3, 800300a <ai_platform_network_process+0x126>
 8002fcc:	f8b5 b000 	ldrh.w	fp, [r5]
 8002fd0:	f1bb 0f00 	cmp.w	fp, #0
 8002fd4:	d012      	beq.n	8002ffc <ai_platform_network_process+0x118>
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	f105 020c 	add.w	r2, r5, #12
 8002fdc:	4629      	mov	r1, r5
 8002fde:	4650      	mov	r0, sl
 8002fe0:	f7ff fdfe 	bl	8002be0 <_platform_network_state_setup.isra.1>
 8002fe4:	45d9      	cmp	r9, fp
 8002fe6:	883b      	ldrh	r3, [r7, #0]
 8002fe8:	bf38      	it	cc
 8002fea:	46d9      	movcc	r9, fp
 8002fec:	3601      	adds	r6, #1
 8002fee:	3518      	adds	r5, #24
 8002ff0:	e7af      	b.n	8002f52 <ai_platform_network_process+0x6e>
 8002ff2:	46a3      	mov	fp, r4
 8002ff4:	4658      	mov	r0, fp
 8002ff6:	b003      	add	sp, #12
 8002ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ffc:	f108 0010 	add.w	r0, r8, #16
 8003000:	2221      	movs	r2, #33	; 0x21
 8003002:	2112      	movs	r1, #18
 8003004:	f000 f980 	bl	8003308 <core_set_error>
 8003008:	e7f4      	b.n	8002ff4 <ai_platform_network_process+0x110>
 800300a:	f108 0010 	add.w	r0, r8, #16
 800300e:	2217      	movs	r2, #23
 8003010:	2112      	movs	r1, #18
 8003012:	469b      	mov	fp, r3
 8003014:	f000 f978 	bl	8003308 <core_set_error>
 8003018:	e7ec      	b.n	8002ff4 <ai_platform_network_process+0x110>
 800301a:	f108 0010 	add.w	r0, r8, #16
 800301e:	2219      	movs	r2, #25
 8003020:	2112      	movs	r1, #18
 8003022:	f000 f971 	bl	8003308 <core_set_error>
 8003026:	f04f 0b00 	mov.w	fp, #0
 800302a:	e7e3      	b.n	8002ff4 <ai_platform_network_process+0x110>
 800302c:	f108 0010 	add.w	r0, r8, #16
 8003030:	2218      	movs	r2, #24
 8003032:	2112      	movs	r1, #18
 8003034:	f000 f968 	bl	8003308 <core_set_error>
 8003038:	f04f 0b00 	mov.w	fp, #0
 800303c:	e7da      	b.n	8002ff4 <ai_platform_network_process+0x110>
 800303e:	4644      	mov	r4, r8
 8003040:	f104 0010 	add.w	r0, r4, #16
 8003044:	2217      	movs	r2, #23
 8003046:	2112      	movs	r1, #18
 8003048:	f000 f95e 	bl	8003308 <core_set_error>
 800304c:	f04f 0b00 	mov.w	fp, #0
 8003050:	e7d0      	b.n	8002ff4 <ai_platform_network_process+0x110>
 8003052:	9a01      	ldr	r2, [sp, #4]
 8003054:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8003058:	4644      	mov	r4, r8
 800305a:	2a00      	cmp	r2, #0
 800305c:	f000 80a2 	beq.w	80031a4 <ai_platform_network_process+0x2c0>
 8003060:	2b01      	cmp	r3, #1
 8003062:	f240 8140 	bls.w	80032e6 <ai_platform_network_process+0x402>
 8003066:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 800306a:	f118 0f0c 	cmn.w	r8, #12
 800306e:	f000 813a 	beq.w	80032e6 <ai_platform_network_process+0x402>
 8003072:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8135 	beq.w	80032e6 <ai_platform_network_process+0x402>
 800307c:	9d01      	ldr	r5, [sp, #4]
 800307e:	2700      	movs	r7, #0
 8003080:	3504      	adds	r5, #4
 8003082:	429f      	cmp	r7, r3
 8003084:	f080 808c 	bcs.w	80031a0 <ai_platform_network_process+0x2bc>
 8003088:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8087 	beq.w	80031a0 <ai_platform_network_process+0x2bc>
 8003092:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8003096:	2e00      	cmp	r6, #0
 8003098:	f000 8082 	beq.w	80031a0 <ai_platform_network_process+0x2bc>
 800309c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 80030a6:	d067      	beq.n	8003178 <ai_platform_network_process+0x294>
 80030a8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80030ac:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80030b0:	69b0      	ldr	r0, [r6, #24]
 80030b2:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80030b6:	6841      	ldr	r1, [r0, #4]
 80030b8:	fb0b f30e 	mul.w	r3, fp, lr
 80030bc:	fb0c f303 	mul.w	r3, ip, r3
 80030c0:	4299      	cmp	r1, r3
 80030c2:	f0c0 8110 	bcc.w	80032e6 <ai_platform_network_process+0x402>
 80030c6:	68f3      	ldr	r3, [r6, #12]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	455a      	cmp	r2, fp
 80030cc:	f040 810b 	bne.w	80032e6 <ai_platform_network_process+0x402>
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	4572      	cmp	r2, lr
 80030d4:	f040 8107 	bne.w	80032e6 <ai_platform_network_process+0x402>
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	459c      	cmp	ip, r3
 80030dc:	f040 8103 	bne.w	80032e6 <ai_platform_network_process+0x402>
 80030e0:	6800      	ldr	r0, [r0, #0]
 80030e2:	f003 fa63 	bl	80065ac <ai_array_get_byte_size>
 80030e6:	68f2      	ldr	r2, [r6, #12]
 80030e8:	6973      	ldr	r3, [r6, #20]
 80030ea:	68d2      	ldr	r2, [r2, #12]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	fb03 f302 	mul.w	r3, r3, r2
 80030f2:	4298      	cmp	r0, r3
 80030f4:	f0c0 80f7 	bcc.w	80032e6 <ai_platform_network_process+0x402>
 80030f8:	69b3      	ldr	r3, [r6, #24]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	f003 fa0a 	bl	8006514 <ai_array_to_buffer_fmt>
 8003100:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8003104:	4043      	eors	r3, r0
 8003106:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800310a:	d12c      	bne.n	8003166 <ai_platform_network_process+0x282>
 800310c:	68eb      	ldr	r3, [r5, #12]
 800310e:	b313      	cbz	r3, 8003156 <ai_platform_network_process+0x272>
 8003110:	f8b5 b000 	ldrh.w	fp, [r5]
 8003114:	f1bb 0f00 	cmp.w	fp, #0
 8003118:	d016      	beq.n	8003148 <ai_platform_network_process+0x264>
 800311a:	4633      	mov	r3, r6
 800311c:	f105 020c 	add.w	r2, r5, #12
 8003120:	4629      	mov	r1, r5
 8003122:	4650      	mov	r0, sl
 8003124:	f7ff fd5c 	bl	8002be0 <_platform_network_state_setup.isra.1>
 8003128:	45d9      	cmp	r9, fp
 800312a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800312e:	bf38      	it	cc
 8003130:	46d9      	movcc	r9, fp
 8003132:	3701      	adds	r7, #1
 8003134:	3518      	adds	r5, #24
 8003136:	e7a4      	b.n	8003082 <ai_platform_network_process+0x19e>
 8003138:	f104 0010 	add.w	r0, r4, #16
 800313c:	2230      	movs	r2, #48	; 0x30
 800313e:	2111      	movs	r1, #17
 8003140:	f000 f8e2 	bl	8003308 <core_set_error>
 8003144:	46b3      	mov	fp, r6
 8003146:	e755      	b.n	8002ff4 <ai_platform_network_process+0x110>
 8003148:	f104 0010 	add.w	r0, r4, #16
 800314c:	2221      	movs	r2, #33	; 0x21
 800314e:	2113      	movs	r1, #19
 8003150:	f000 f8da 	bl	8003308 <core_set_error>
 8003154:	e74e      	b.n	8002ff4 <ai_platform_network_process+0x110>
 8003156:	f104 0010 	add.w	r0, r4, #16
 800315a:	2217      	movs	r2, #23
 800315c:	2113      	movs	r1, #19
 800315e:	469b      	mov	fp, r3
 8003160:	f000 f8d2 	bl	8003308 <core_set_error>
 8003164:	e746      	b.n	8002ff4 <ai_platform_network_process+0x110>
 8003166:	f104 0010 	add.w	r0, r4, #16
 800316a:	2219      	movs	r2, #25
 800316c:	2113      	movs	r1, #19
 800316e:	f000 f8cb 	bl	8003308 <core_set_error>
 8003172:	f04f 0b00 	mov.w	fp, #0
 8003176:	e73d      	b.n	8002ff4 <ai_platform_network_process+0x110>
 8003178:	f104 0010 	add.w	r0, r4, #16
 800317c:	2217      	movs	r2, #23
 800317e:	2113      	movs	r1, #19
 8003180:	f000 f8c2 	bl	8003308 <core_set_error>
 8003184:	46d3      	mov	fp, sl
 8003186:	e735      	b.n	8002ff4 <ai_platform_network_process+0x110>
 8003188:	a1c00100 	.word	0xa1c00100
 800318c:	e0002000 	.word	0xe0002000
 8003190:	40023008 	.word	0x40023008
 8003194:	40023000 	.word	0x40023000
 8003198:	f407a5c2 	.word	0xf407a5c2
 800319c:	b5e8b5cd 	.word	0xb5e8b5cd
 80031a0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80031a4:	f8a4 9014 	strh.w	r9, [r4, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8099 	beq.w	80032e0 <ai_platform_network_process+0x3fc>
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80031b2:	f240 8093 	bls.w	80032dc <ai_platform_network_process+0x3f8>
 80031b6:	f105 070c 	add.w	r7, r5, #12
 80031ba:	8ae0      	ldrh	r0, [r4, #22]
 80031bc:	8aa3      	ldrh	r3, [r4, #20]
 80031be:	4283      	cmp	r3, r0
 80031c0:	d977      	bls.n	80032b2 <ai_platform_network_process+0x3ce>
 80031c2:	46a3      	mov	fp, r4
 80031c4:	2d00      	cmp	r5, #0
 80031c6:	d032      	beq.n	800322e <ai_platform_network_process+0x34a>
 80031c8:	882b      	ldrh	r3, [r5, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d02f      	beq.n	800322e <ai_platform_network_process+0x34a>
 80031ce:	686b      	ldr	r3, [r5, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d02c      	beq.n	800322e <ai_platform_network_process+0x34a>
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f04f 0800 	mov.w	r8, #0
 80031da:	b343      	cbz	r3, 800322e <ai_platform_network_process+0x34a>
 80031dc:	68a9      	ldr	r1, [r5, #8]
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	f8d1 a000 	ldr.w	sl, [r1]
 80031e4:	6814      	ldr	r4, [r2, #0]
 80031e6:	6890      	ldr	r0, [r2, #8]
 80031e8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80031ec:	eb0a 0609 	add.w	r6, sl, r9
 80031f0:	00a4      	lsls	r4, r4, #2
 80031f2:	6871      	ldr	r1, [r6, #4]
 80031f4:	d45f      	bmi.n	80032b6 <ai_platform_network_process+0x3d2>
 80031f6:	68d4      	ldr	r4, [r2, #12]
 80031f8:	1b00      	subs	r0, r0, r4
 80031fa:	4401      	add	r1, r0
 80031fc:	6091      	str	r1, [r2, #8]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	6872      	ldr	r2, [r6, #4]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8003208:	f85a 2009 	ldr.w	r2, [sl, r9]
 800320c:	440b      	add	r3, r1
 800320e:	4293      	cmp	r3, r2
 8003210:	bf24      	itt	cs
 8003212:	68f3      	ldrcs	r3, [r6, #12]
 8003214:	1ad3      	subcs	r3, r2, r3
 8003216:	6073      	str	r3, [r6, #4]
 8003218:	882b      	ldrh	r3, [r5, #0]
 800321a:	f108 0801 	add.w	r8, r8, #1
 800321e:	4598      	cmp	r8, r3
 8003220:	d205      	bcs.n	800322e <ai_platform_network_process+0x34a>
 8003222:	686b      	ldr	r3, [r5, #4]
 8003224:	b11b      	cbz	r3, 800322e <ai_platform_network_process+0x34a>
 8003226:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1d6      	bne.n	80031dc <ai_platform_network_process+0x2f8>
 800322e:	4658      	mov	r0, fp
 8003230:	f003 f922 	bl	8006478 <ai_layers_forward_all>
 8003234:	2f00      	cmp	r7, #0
 8003236:	d032      	beq.n	800329e <ai_platform_network_process+0x3ba>
 8003238:	883b      	ldrh	r3, [r7, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d02f      	beq.n	800329e <ai_platform_network_process+0x3ba>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	b36b      	cbz	r3, 800329e <ai_platform_network_process+0x3ba>
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	b358      	cbz	r0, 800329e <ai_platform_network_process+0x3ba>
 8003246:	f04f 0800 	mov.w	r8, #0
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6981      	ldr	r1, [r0, #24]
 800324e:	f8d3 a000 	ldr.w	sl, [r3]
 8003252:	680c      	ldr	r4, [r1, #0]
 8003254:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8003258:	eb0a 0609 	add.w	r6, sl, r9
 800325c:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8003260:	00a4      	lsls	r4, r4, #2
 8003262:	eb0c 0302 	add.w	r3, ip, r2
 8003266:	d42a      	bmi.n	80032be <ai_platform_network_process+0x3da>
 8003268:	f85a 2009 	ldr.w	r2, [sl, r9]
 800326c:	4293      	cmp	r3, r2
 800326e:	bf24      	itt	cs
 8003270:	68f3      	ldrcs	r3, [r6, #12]
 8003272:	1ad3      	subcs	r3, r2, r3
 8003274:	6073      	str	r3, [r6, #4]
 8003276:	6981      	ldr	r1, [r0, #24]
 8003278:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800327c:	1b12      	subs	r2, r2, r4
 800327e:	4413      	add	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
 8003282:	6983      	ldr	r3, [r0, #24]
 8003284:	6872      	ldr	r2, [r6, #4]
 8003286:	60da      	str	r2, [r3, #12]
 8003288:	883b      	ldrh	r3, [r7, #0]
 800328a:	f108 0801 	add.w	r8, r8, #1
 800328e:	4598      	cmp	r8, r3
 8003290:	d205      	bcs.n	800329e <ai_platform_network_process+0x3ba>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	b11b      	cbz	r3, 800329e <ai_platform_network_process+0x3ba>
 8003296:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800329a:	2800      	cmp	r0, #0
 800329c:	d1d5      	bne.n	800324a <ai_platform_network_process+0x366>
 800329e:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80032a2:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80032a6:	3001      	adds	r0, #1
 80032a8:	b280      	uxth	r0, r0
 80032aa:	4283      	cmp	r3, r0
 80032ac:	f8ab 0016 	strh.w	r0, [fp, #22]
 80032b0:	d888      	bhi.n	80031c4 <ai_platform_network_process+0x2e0>
 80032b2:	4683      	mov	fp, r0
 80032b4:	e69e      	b.n	8002ff4 <ai_platform_network_process+0x110>
 80032b6:	68b2      	ldr	r2, [r6, #8]
 80032b8:	f003 f9cc 	bl	8006654 <memcpy>
 80032bc:	e7a2      	b.n	8003204 <ai_platform_network_process+0x320>
 80032be:	6889      	ldr	r1, [r1, #8]
 80032c0:	4660      	mov	r0, ip
 80032c2:	f003 f9c7 	bl	8006654 <memcpy>
 80032c6:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80032ca:	f85a 2009 	ldr.w	r2, [sl, r9]
 80032ce:	440b      	add	r3, r1
 80032d0:	4293      	cmp	r3, r2
 80032d2:	bf24      	itt	cs
 80032d4:	68f3      	ldrcs	r3, [r6, #12]
 80032d6:	1ad3      	subcs	r3, r2, r3
 80032d8:	6073      	str	r3, [r6, #4]
 80032da:	e7d5      	b.n	8003288 <ai_platform_network_process+0x3a4>
 80032dc:	2700      	movs	r7, #0
 80032de:	e76c      	b.n	80031ba <ai_platform_network_process+0x2d6>
 80032e0:	461d      	mov	r5, r3
 80032e2:	461f      	mov	r7, r3
 80032e4:	e769      	b.n	80031ba <ai_platform_network_process+0x2d6>
 80032e6:	f104 0010 	add.w	r0, r4, #16
 80032ea:	2218      	movs	r2, #24
 80032ec:	2113      	movs	r1, #19
 80032ee:	f000 f80b 	bl	8003308 <core_set_error>
 80032f2:	f04f 0b00 	mov.w	fp, #0
 80032f6:	e67d      	b.n	8002ff4 <ai_platform_network_process+0x110>

080032f8 <core_init>:
 80032f8:	2001      	movs	r0, #1
 80032fa:	4770      	bx	lr

080032fc <core_get_error>:
 80032fc:	4603      	mov	r3, r0
 80032fe:	2200      	movs	r2, #0
 8003300:	6800      	ldr	r0, [r0, #0]
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop

08003308 <core_set_error>:
 8003308:	7803      	ldrb	r3, [r0, #0]
 800330a:	b933      	cbnz	r3, 800331a <core_set_error+0x12>
 800330c:	7001      	strb	r1, [r0, #0]
 800330e:	6803      	ldr	r3, [r0, #0]
 8003310:	f362 231f 	bfi	r3, r2, #8, #24
 8003314:	6003      	str	r3, [r0, #0]
 8003316:	2001      	movs	r0, #1
 8003318:	4770      	bx	lr
 800331a:	2000      	movs	r0, #0
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop

08003320 <func_dummy>:
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop

08003324 <ai_dict8_dot_array_f32>:
 8003324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003328:	f8dd c020 	ldr.w	ip, [sp, #32]
 800332c:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8003330:	f000 80c0 	beq.w	80034b4 <ai_dict8_dot_array_f32+0x190>
 8003334:	f101 0408 	add.w	r4, r1, #8
 8003338:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800333c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80034bc <ai_dict8_dot_array_f32+0x198>
 8003340:	eb04 0e09 	add.w	lr, r4, r9
 8003344:	f103 0520 	add.w	r5, r3, #32
 8003348:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800334c:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8003350:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8003354:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8003358:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 800335c:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8003360:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8003364:	ed55 3a04 	vldr	s7, [r5, #-16]
 8003368:	ed55 4a03 	vldr	s9, [r5, #-12]
 800336c:	ed55 5a02 	vldr	s11, [r5, #-8]
 8003370:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003374:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003378:	edd6 7a00 	vldr	s15, [r6]
 800337c:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8003380:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003384:	ee67 7a83 	vmul.f32	s15, s15, s6
 8003388:	ed9a 3a00 	vldr	s6, [sl]
 800338c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8003390:	eee3 7a05 	vfma.f32	s15, s6, s10
 8003394:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8003398:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800339c:	ed97 3a00 	vldr	s6, [r7]
 80033a0:	ed96 5a00 	vldr	s10, [r6]
 80033a4:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80033a8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80033ac:	eee3 7a04 	vfma.f32	s15, s6, s8
 80033b0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80033b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80033b8:	ed9a 3a00 	vldr	s6, [sl]
 80033bc:	ed96 4a00 	vldr	s8, [r6]
 80033c0:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80033c4:	eee5 7a06 	vfma.f32	s15, s10, s12
 80033c8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80033cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80033d0:	ed97 5a00 	vldr	s10, [r7]
 80033d4:	ed96 6a00 	vldr	s12, [r6]
 80033d8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80033dc:	3408      	adds	r4, #8
 80033de:	45a6      	cmp	lr, r4
 80033e0:	f105 0520 	add.w	r5, r5, #32
 80033e4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80033e8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80033ec:	eee6 7a26 	vfma.f32	s15, s12, s13
 80033f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f4:	d1a8      	bne.n	8003348 <ai_dict8_dot_array_f32+0x24>
 80033f6:	4449      	add	r1, r9
 80033f8:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80033fc:	f01c 0c07 	ands.w	ip, ip, #7
 8003400:	d050      	beq.n	80034a4 <ai_dict8_dot_array_f32+0x180>
 8003402:	780c      	ldrb	r4, [r1, #0]
 8003404:	edd3 6a00 	vldr	s13, [r3]
 8003408:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800340c:	edd4 7a00 	vldr	s15, [r4]
 8003410:	f1bc 0f01 	cmp.w	ip, #1
 8003414:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003418:	d044      	beq.n	80034a4 <ai_dict8_dot_array_f32+0x180>
 800341a:	784c      	ldrb	r4, [r1, #1]
 800341c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003420:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003424:	edd4 7a00 	vldr	s15, [r4]
 8003428:	f1bc 0f02 	cmp.w	ip, #2
 800342c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003430:	d038      	beq.n	80034a4 <ai_dict8_dot_array_f32+0x180>
 8003432:	788c      	ldrb	r4, [r1, #2]
 8003434:	edd3 6a02 	vldr	s13, [r3, #8]
 8003438:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800343c:	edd4 7a00 	vldr	s15, [r4]
 8003440:	f1bc 0f03 	cmp.w	ip, #3
 8003444:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003448:	d02c      	beq.n	80034a4 <ai_dict8_dot_array_f32+0x180>
 800344a:	78cc      	ldrb	r4, [r1, #3]
 800344c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003450:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003454:	edd4 7a00 	vldr	s15, [r4]
 8003458:	f1bc 0f04 	cmp.w	ip, #4
 800345c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003460:	d020      	beq.n	80034a4 <ai_dict8_dot_array_f32+0x180>
 8003462:	790c      	ldrb	r4, [r1, #4]
 8003464:	edd3 6a04 	vldr	s13, [r3, #16]
 8003468:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800346c:	edd4 7a00 	vldr	s15, [r4]
 8003470:	f1bc 0f05 	cmp.w	ip, #5
 8003474:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003478:	d014      	beq.n	80034a4 <ai_dict8_dot_array_f32+0x180>
 800347a:	794c      	ldrb	r4, [r1, #5]
 800347c:	edd3 6a05 	vldr	s13, [r3, #20]
 8003480:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003484:	edd4 7a00 	vldr	s15, [r4]
 8003488:	f1bc 0f06 	cmp.w	ip, #6
 800348c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003490:	d008      	beq.n	80034a4 <ai_dict8_dot_array_f32+0x180>
 8003492:	7989      	ldrb	r1, [r1, #6]
 8003494:	edd3 7a06 	vldr	s15, [r3, #24]
 8003498:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800349c:	edd2 6a00 	vldr	s13, [r2]
 80034a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80034a4:	edd0 7a00 	vldr	s15, [r0]
 80034a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034ac:	ed80 7a00 	vstr	s14, [r0]
 80034b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b4:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80034bc <ai_dict8_dot_array_f32+0x198>
 80034b8:	e7a0      	b.n	80033fc <ai_dict8_dot_array_f32+0xd8>
 80034ba:	bf00      	nop
 80034bc:	00000000 	.word	0x00000000

080034c0 <ai_dict4_dot_array_f32>:
 80034c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80034c6:	f027 0c01 	bic.w	ip, r7, #1
 80034ca:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80034ce:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80034d2:	f000 80ae 	beq.w	8003632 <ai_dict4_dot_array_f32+0x172>
 80034d6:	1d0d      	adds	r5, r1, #4
 80034d8:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80034dc:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003638 <ai_dict4_dot_array_f32+0x178>
 80034e0:	eb05 0e09 	add.w	lr, r5, r9
 80034e4:	f103 0420 	add.w	r4, r3, #32
 80034e8:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80034ec:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 80034f0:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 80034f4:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 80034f8:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 80034fc:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8003500:	ed14 5a04 	vldr	s10, [r4, #-16]
 8003504:	ed54 5a03 	vldr	s11, [r4, #-12]
 8003508:	ed14 6a02 	vldr	s12, [r4, #-8]
 800350c:	ed54 6a01 	vldr	s13, [r4, #-4]
 8003510:	f006 0a0f 	and.w	sl, r6, #15
 8003514:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003518:	edda 7a00 	vldr	s15, [sl]
 800351c:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8003520:	0936      	lsrs	r6, r6, #4
 8003522:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003526:	ee67 7a83 	vmul.f32	s15, s15, s6
 800352a:	ed96 3a00 	vldr	s6, [r6]
 800352e:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8003532:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003536:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800353a:	f00b 0b0f 	and.w	fp, fp, #15
 800353e:	edd6 3a00 	vldr	s7, [r6]
 8003542:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8003546:	eee3 7a84 	vfma.f32	s15, s7, s8
 800354a:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800354e:	3504      	adds	r5, #4
 8003550:	ed9b 4a00 	vldr	s8, [fp]
 8003554:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8003558:	eee4 7a24 	vfma.f32	s15, s8, s9
 800355c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8003560:	f00a 0a0f 	and.w	sl, sl, #15
 8003564:	eddb 4a00 	vldr	s9, [fp]
 8003568:	eee4 7a85 	vfma.f32	s15, s9, s10
 800356c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003570:	45ae      	cmp	lr, r5
 8003572:	ed9a 5a00 	vldr	s10, [sl]
 8003576:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800357a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800357e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003582:	f006 060f 	and.w	r6, r6, #15
 8003586:	edda 5a00 	vldr	s11, [sl]
 800358a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800358e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003592:	f104 0420 	add.w	r4, r4, #32
 8003596:	ed96 6a00 	vldr	s12, [r6]
 800359a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800359e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035a2:	d1a1      	bne.n	80034e8 <ai_dict4_dot_array_f32+0x28>
 80035a4:	4449      	add	r1, r9
 80035a6:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80035aa:	459c      	cmp	ip, r3
 80035ac:	d92d      	bls.n	800360a <ai_dict4_dot_array_f32+0x14a>
 80035ae:	f10c 0c07 	add.w	ip, ip, #7
 80035b2:	f103 0508 	add.w	r5, r3, #8
 80035b6:	ebac 0c05 	sub.w	ip, ip, r5
 80035ba:	f02c 0407 	bic.w	r4, ip, #7
 80035be:	f103 0810 	add.w	r8, r3, #16
 80035c2:	44a0      	add	r8, r4
 80035c4:	f101 3eff 	add.w	lr, r1, #4294967295
 80035c8:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80035cc:	ed15 6a01 	vldr	s12, [r5, #-4]
 80035d0:	ed55 6a02 	vldr	s13, [r5, #-8]
 80035d4:	f004 060f 	and.w	r6, r4, #15
 80035d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80035dc:	0924      	lsrs	r4, r4, #4
 80035de:	edd6 7a00 	vldr	s15, [r6]
 80035e2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80035e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80035ea:	ed94 6a00 	vldr	s12, [r4]
 80035ee:	eee6 7a26 	vfma.f32	s15, s12, s13
 80035f2:	3508      	adds	r5, #8
 80035f4:	45a8      	cmp	r8, r5
 80035f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035fa:	d1e5      	bne.n	80035c8 <ai_dict4_dot_array_f32+0x108>
 80035fc:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8003600:	f10c 0c01 	add.w	ip, ip, #1
 8003604:	4461      	add	r1, ip
 8003606:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800360a:	07fc      	lsls	r4, r7, #31
 800360c:	d509      	bpl.n	8003622 <ai_dict4_dot_array_f32+0x162>
 800360e:	7809      	ldrb	r1, [r1, #0]
 8003610:	edd3 7a00 	vldr	s15, [r3]
 8003614:	090b      	lsrs	r3, r1, #4
 8003616:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800361a:	edd2 6a00 	vldr	s13, [r2]
 800361e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003622:	edd0 7a00 	vldr	s15, [r0]
 8003626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800362a:	ed80 7a00 	vstr	s14, [r0]
 800362e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003632:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8003638 <ai_dict4_dot_array_f32+0x178>
 8003636:	e7b8      	b.n	80035aa <ai_dict4_dot_array_f32+0xea>
 8003638:	00000000 	.word	0x00000000

0800363c <ai_dict_decompress_f32>:
 800363c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003640:	9f08      	ldr	r7, [sp, #32]
 8003642:	2b04      	cmp	r3, #4
 8003644:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8003648:	d00e      	beq.n	8003668 <ai_dict_decompress_f32+0x2c>
 800364a:	2b08      	cmp	r3, #8
 800364c:	d10a      	bne.n	8003664 <ai_dict_decompress_f32+0x28>
 800364e:	42b8      	cmp	r0, r7
 8003650:	d208      	bcs.n	8003664 <ai_dict_decompress_f32+0x28>
 8003652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003656:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f840 3b04 	str.w	r3, [r0], #4
 8003660:	4287      	cmp	r7, r0
 8003662:	d8f6      	bhi.n	8003652 <ai_dict_decompress_f32+0x16>
 8003664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003668:	9b07      	ldr	r3, [sp, #28]
 800366a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800366e:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8003672:	f10c 38ff 	add.w	r8, ip, #4294967295
 8003676:	f003 0e01 	and.w	lr, r3, #1
 800367a:	42b8      	cmp	r0, r7
 800367c:	d2f2      	bcs.n	8003664 <ai_dict_decompress_f32+0x28>
 800367e:	f1bc 0f00 	cmp.w	ip, #0
 8003682:	d01a      	beq.n	80036ba <ai_dict_decompress_f32+0x7e>
 8003684:	f100 0508 	add.w	r5, r0, #8
 8003688:	1e4c      	subs	r4, r1, #1
 800368a:	eb01 0608 	add.w	r6, r1, r8
 800368e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003698:	42a6      	cmp	r6, r4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f845 3c08 	str.w	r3, [r5, #-8]
 80036a0:	7823      	ldrb	r3, [r4, #0]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80036aa:	f105 0508 	add.w	r5, r5, #8
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f845 3c0c 	str.w	r3, [r5, #-12]
 80036b4:	d1eb      	bne.n	800368e <ai_dict_decompress_f32+0x52>
 80036b6:	4461      	add	r1, ip
 80036b8:	4448      	add	r0, r9
 80036ba:	f1be 0f00 	cmp.w	lr, #0
 80036be:	d103      	bne.n	80036c8 <ai_dict_decompress_f32+0x8c>
 80036c0:	4287      	cmp	r7, r0
 80036c2:	d8dc      	bhi.n	800367e <ai_dict_decompress_f32+0x42>
 80036c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036c8:	780b      	ldrb	r3, [r1, #0]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80036d0:	3101      	adds	r1, #1
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6003      	str	r3, [r0, #0]
 80036d6:	3004      	adds	r0, #4
 80036d8:	e7cf      	b.n	800367a <ai_dict_decompress_f32+0x3e>
 80036da:	bf00      	nop

080036dc <forward_conv2d>:
 80036dc:	6983      	ldr	r3, [r0, #24]
 80036de:	881a      	ldrh	r2, [r3, #0]
 80036e0:	2a00      	cmp	r2, #0
 80036e2:	f000 87c7 	beq.w	8004674 <forward_conv2d+0xf98>
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	b101      	cbz	r1, 80036ee <forward_conv2d+0x12>
 80036ec:	6809      	ldr	r1, [r1, #0]
 80036ee:	2a01      	cmp	r2, #1
 80036f0:	f240 87bd 	bls.w	800466e <forward_conv2d+0xf92>
 80036f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f8:	ed2d 8b10 	vpush	{d8-d15}
 80036fc:	b0cb      	sub	sp, #300	; 0x12c
 80036fe:	691c      	ldr	r4, [r3, #16]
 8003700:	af02      	add	r7, sp, #8
 8003702:	2c00      	cmp	r4, #0
 8003704:	f000 87af 	beq.w	8004666 <forward_conv2d+0xf8a>
 8003708:	6824      	ldr	r4, [r4, #0]
 800370a:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800370e:	2a02      	cmp	r2, #2
 8003710:	f000 87a4 	beq.w	800465c <forward_conv2d+0xf80>
 8003714:	69dd      	ldr	r5, [r3, #28]
 8003716:	2d00      	cmp	r5, #0
 8003718:	f000 8799 	beq.w	800464e <forward_conv2d+0xf72>
 800371c:	f113 0218 	adds.w	r2, r3, #24
 8003720:	682c      	ldr	r4, [r5, #0]
 8003722:	d004      	beq.n	800372e <forward_conv2d+0x52>
 8003724:	8b1b      	ldrh	r3, [r3, #24]
 8003726:	2b01      	cmp	r3, #1
 8003728:	f240 87a6 	bls.w	8004678 <forward_conv2d+0xf9c>
 800372c:	686a      	ldr	r2, [r5, #4]
 800372e:	68ab      	ldr	r3, [r5, #8]
 8003730:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8003734:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8003738:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800373c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8003740:	68ce      	ldr	r6, [r1, #12]
 8003742:	69a1      	ldr	r1, [r4, #24]
 8003744:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8003748:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800374c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003750:	f8de 1004 	ldr.w	r1, [lr, #4]
 8003754:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8003758:	f8de 100c 	ldr.w	r1, [lr, #12]
 800375c:	6479      	str	r1, [r7, #68]	; 0x44
 800375e:	f8de 1008 	ldr.w	r1, [lr, #8]
 8003762:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8003766:	6871      	ldr	r1, [r6, #4]
 8003768:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800376c:	68f1      	ldr	r1, [r6, #12]
 800376e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8003772:	68b1      	ldr	r1, [r6, #8]
 8003774:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8003778:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800377c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003780:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8003784:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8003788:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800378c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800378e:	6889      	ldr	r1, [r1, #8]
 8003790:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8003794:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003796:	e9d5 ba00 	ldrd	fp, sl, [r5]
 800379a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800379e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80037a0:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80037a4:	69c1      	ldr	r1, [r0, #28]
 80037a6:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80037aa:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 80037ae:	2a00      	cmp	r2, #0
 80037b0:	f000 8749 	beq.w	8004646 <forward_conv2d+0xf6a>
 80037b4:	6992      	ldr	r2, [r2, #24]
 80037b6:	6892      	ldr	r2, [r2, #8]
 80037b8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80037bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80037c0:	6992      	ldr	r2, [r2, #24]
 80037c2:	6892      	ldr	r2, [r2, #8]
 80037c4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80037c8:	4606      	mov	r6, r0
 80037ca:	6a00      	ldr	r0, [r0, #32]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 872c 	beq.w	800462a <forward_conv2d+0xf4e>
 80037d2:	699a      	ldr	r2, [r3, #24]
 80037d4:	2a00      	cmp	r2, #0
 80037d6:	f000 8594 	beq.w	8004302 <forward_conv2d+0xc26>
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80037e2:	e9d2 0100 	ldrd	r0, r1, [r2]
 80037e6:	6893      	ldr	r3, [r2, #8]
 80037e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037ec:	f002 fede 	bl	80065ac <ai_array_get_byte_size>
 80037f0:	69a3      	ldr	r3, [r4, #24]
 80037f2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80037f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8003800:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003802:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003806:	f3c3 5441 	ubfx	r4, r3, #21, #2
 800380a:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 800380e:	fa1f f088 	uxth.w	r0, r8
 8003812:	4125      	asrs	r5, r4
 8003814:	3801      	subs	r0, #1
 8003816:	1e4c      	subs	r4, r1, #1
 8003818:	fb04 1100 	mla	r1, r4, r0, r1
 800381c:	6439      	str	r1, [r7, #64]	; 0x40
 800381e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8003822:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 8003bc4 <forward_conv2d+0x4e8>
 8003826:	fa1f f289 	uxth.w	r2, r9
 800382a:	3a01      	subs	r2, #1
 800382c:	1e48      	subs	r0, r1, #1
 800382e:	fb00 1102 	mla	r1, r0, r2, r1
 8003832:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003836:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800383a:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800383e:	4610      	mov	r0, r2
 8003840:	2a00      	cmp	r2, #0
 8003842:	bf08      	it	eq
 8003844:	4660      	moveq	r0, ip
 8003846:	2b04      	cmp	r3, #4
 8003848:	b2ad      	uxth	r5, r5
 800384a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800384e:	f000 8533 	beq.w	80042b8 <forward_conv2d+0xbdc>
 8003852:	2b08      	cmp	r3, #8
 8003854:	f000 8530 	beq.w	80042b8 <forward_conv2d+0xbdc>
 8003858:	fa1f f38b 	uxth.w	r3, fp
 800385c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003860:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003864:	425b      	negs	r3, r3
 8003866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800386a:	2900      	cmp	r1, #0
 800386c:	f000 8242 	beq.w	8003cf4 <forward_conv2d+0x618>
 8003870:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8003874:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 8003878:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 8003bc0 <forward_conv2d+0x4e4>
 800387c:	fb00 f305 	mul.w	r3, r0, r5
 8003880:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 8003884:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8003888:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800388c:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 8003890:	663d      	str	r5, [r7, #96]	; 0x60
 8003892:	fa0f f288 	sxth.w	r2, r8
 8003896:	fb03 f400 	mul.w	r4, r3, r0
 800389a:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800389e:	fa1f f18a 	uxth.w	r1, sl
 80038a2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80038a6:	67bc      	str	r4, [r7, #120]	; 0x78
 80038a8:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 80038ac:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80038b0:	4249      	negs	r1, r1
 80038b2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80038b6:	0092      	lsls	r2, r2, #2
 80038b8:	0081      	lsls	r1, r0, #2
 80038ba:	4605      	mov	r5, r0
 80038bc:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80038c0:	fb04 f200 	mul.w	r2, r4, r0
 80038c4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80038c8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80038cc:	fb01 fc00 	mul.w	ip, r1, r0
 80038d0:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 80038d4:	fb01 fc03 	mul.w	ip, r1, r3
 80038d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038da:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e8:	fa0f f689 	sxth.w	r6, r9
 80038ec:	469c      	mov	ip, r3
 80038ee:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 80038f2:	4633      	mov	r3, r6
 80038f4:	fb0c f606 	mul.w	r6, ip, r6
 80038f8:	677e      	str	r6, [r7, #116]	; 0x74
 80038fa:	4666      	mov	r6, ip
 80038fc:	fb04 f606 	mul.w	r6, r4, r6
 8003900:	4686      	mov	lr, r0
 8003902:	4620      	mov	r0, r4
 8003904:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8003908:	62be      	str	r6, [r7, #40]	; 0x28
 800390a:	fb01 f404 	mul.w	r4, r1, r4
 800390e:	fb03 f605 	mul.w	r6, r3, r5
 8003912:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8003914:	66bc      	str	r4, [r7, #104]	; 0x68
 8003916:	460b      	mov	r3, r1
 8003918:	4604      	mov	r4, r0
 800391a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800391e:	627e      	str	r6, [r7, #36]	; 0x24
 8003920:	fb05 f404 	mul.w	r4, r5, r4
 8003924:	617c      	str	r4, [r7, #20]
 8003926:	460c      	mov	r4, r1
 8003928:	fb04 f403 	mul.w	r4, r4, r3
 800392c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003930:	65bc      	str	r4, [r7, #88]	; 0x58
 8003932:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800393a:	fb01 f104 	mul.w	r1, r1, r4
 800393e:	61b9      	str	r1, [r7, #24]
 8003940:	0091      	lsls	r1, r2, #2
 8003942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003946:	64b9      	str	r1, [r7, #72]	; 0x48
 8003948:	fb00 f202 	mul.w	r2, r0, r2
 800394c:	0081      	lsls	r1, r0, #2
 800394e:	61f9      	str	r1, [r7, #28]
 8003950:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8003954:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8003958:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800395c:	011a      	lsls	r2, r3, #4
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003964:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800396c:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8003970:	2300      	movs	r3, #0
 8003972:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003978:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800397c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003982:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003984:	2900      	cmp	r1, #0
 8003986:	441a      	add	r2, r3
 8003988:	bfb4      	ite	lt
 800398a:	2100      	movlt	r1, #0
 800398c:	2300      	movge	r3, #0
 800398e:	4282      	cmp	r2, r0
 8003990:	bf28      	it	cs
 8003992:	4602      	movcs	r2, r0
 8003994:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8003998:	2801      	cmp	r0, #1
 800399a:	f000 8320 	beq.w	8003fde <forward_conv2d+0x902>
 800399e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80039a2:	4281      	cmp	r1, r0
 80039a4:	f000 81c3 	beq.w	8003d2e <forward_conv2d+0x652>
 80039a8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80039ac:	2900      	cmp	r1, #0
 80039ae:	f000 8182 	beq.w	8003cb6 <forward_conv2d+0x5da>
 80039b2:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80039b6:	fb93 f1f0 	sdiv	r1, r3, r0
 80039ba:	fb00 3111 	mls	r1, r0, r1, r3
 80039be:	1a41      	subs	r1, r0, r1
 80039c0:	1ad2      	subs	r2, r2, r3
 80039c2:	fb91 f5f0 	sdiv	r5, r1, r0
 80039c6:	fb00 1515 	mls	r5, r0, r5, r1
 80039ca:	1b52      	subs	r2, r2, r5
 80039cc:	4601      	mov	r1, r0
 80039ce:	4402      	add	r2, r0
 80039d0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80039d4:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 80039d8:	f8c7 b020 	str.w	fp, [r7, #32]
 80039dc:	4604      	mov	r4, r0
 80039de:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80039e2:	fbb4 f4f0 	udiv	r4, r4, r0
 80039e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039e8:	3a01      	subs	r2, #1
 80039ea:	fb92 f8f1 	sdiv	r8, r2, r1
 80039ee:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80039f2:	eba0 0c04 	sub.w	ip, r0, r4
 80039f6:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80039fa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80039fe:	4614      	mov	r4, r2
 8003a00:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003a04:	fbb4 f2f2 	udiv	r2, r4, r2
 8003a08:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8003a0c:	657a      	str	r2, [r7, #84]	; 0x54
 8003a0e:	441d      	add	r5, r3
 8003a10:	fb0e f000 	mul.w	r0, lr, r0
 8003a14:	440b      	add	r3, r1
 8003a16:	eba6 0608 	sub.w	r6, r6, r8
 8003a1a:	fb04 f505 	mul.w	r5, r4, r5
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8003a24:	fb93 f3f4 	sdiv	r3, r3, r4
 8003a28:	fb00 f406 	mul.w	r4, r0, r6
 8003a2c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8003a30:	66fd      	str	r5, [r7, #108]	; 0x6c
 8003a32:	0091      	lsls	r1, r2, #2
 8003a34:	fb00 f003 	mul.w	r0, r0, r3
 8003a38:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8003a3c:	6538      	str	r0, [r7, #80]	; 0x50
 8003a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a42:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8003a46:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8003a4a:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8003a4e:	1ac3      	subs	r3, r0, r3
 8003a50:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8003a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a58:	008b      	lsls	r3, r1, #2
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5c:	00d3      	lsls	r3, r2, #3
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a70:	2300      	movs	r3, #0
 8003a72:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8003a76:	673b      	str	r3, [r7, #112]	; 0x70
 8003a78:	46c2      	mov	sl, r8
 8003a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a82:	eb03 0c02 	add.w	ip, r3, r2
 8003a86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f2c0 813b 	blt.w	8003d06 <forward_conv2d+0x62a>
 8003a90:	2000      	movs	r0, #0
 8003a92:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8003a94:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 8003a98:	4605      	mov	r5, r0
 8003a9a:	4606      	mov	r6, r0
 8003a9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003aae:	440a      	add	r2, r1
 8003ab0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003ab4:	428b      	cmp	r3, r1
 8003ab6:	bf94      	ite	ls
 8003ab8:	ebc6 0303 	rsbls	r3, r6, r3
 8003abc:	ebc6 0301 	rsbhi	r3, r6, r1
 8003ac0:	4415      	add	r5, r2
 8003ac2:	1a1b      	subs	r3, r3, r0
 8003ac4:	00a4      	lsls	r4, r4, #2
 8003ac6:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8003aca:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8003ace:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8003ad2:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	bf08      	it	eq
 8003ada:	4662      	moveq	r2, ip
 8003adc:	f108 31ff 	add.w	r1, r8, #4294967295
 8003ae0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003ae4:	fb91 f1f0 	sdiv	r1, r1, r0
 8003ae8:	4429      	add	r1, r5
 8003aea:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8003aee:	fb0e 5501 	mla	r5, lr, r1, r5
 8003af2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003af6:	4403      	add	r3, r0
 8003af8:	fb01 6104 	mla	r1, r1, r4, r6
 8003afc:	3b01      	subs	r3, #1
 8003afe:	fb93 f6f0 	sdiv	r6, r3, r0
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8003b08:	fb06 3110 	mls	r1, r6, r0, r3
 8003b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b10:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8003b14:	4562      	cmp	r2, ip
 8003b16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003b1a:	bf08      	it	eq
 8003b1c:	eeb0 6a48 	vmoveq.f32	s12, s16
 8003b20:	1b9b      	subs	r3, r3, r6
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d076      	beq.n	8003c14 <forward_conv2d+0x538>
 8003b26:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003b2a:	fb0e f803 	mul.w	r8, lr, r3
 8003b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b30:	fb00 fb01 	mul.w	fp, r0, r1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d06d      	beq.n	8003c14 <forward_conv2d+0x538>
 8003b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b3c:	18d3      	adds	r3, r2, r3
 8003b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b54:	4413      	add	r3, r2
 8003b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	4413      	add	r3, r2
 8003b60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b68:	ecf3 7a01 	vldmia	r3!, {s15}
 8003b6c:	f1ba 0f00 	cmp.w	sl, #0
 8003b70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b78:	f340 80c3 	ble.w	8003d02 <forward_conv2d+0x626>
 8003b7c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8003b80:	f04f 0c00 	mov.w	ip, #0
 8003b84:	2e00      	cmp	r6, #0
 8003b86:	dd1f      	ble.n	8003bc8 <forward_conv2d+0x4ec>
 8003b88:	2100      	movs	r1, #0
 8003b8a:	eb00 040e 	add.w	r4, r0, lr
 8003b8e:	4284      	cmp	r4, r0
 8003b90:	d910      	bls.n	8003bb4 <forward_conv2d+0x4d8>
 8003b92:	4603      	mov	r3, r0
 8003b94:	462a      	mov	r2, r5
 8003b96:	ecb3 7a01 	vldmia	r3!, {s14}
 8003b9a:	ecf2 6a01 	vldmia	r2!, {s13}
 8003b9e:	429c      	cmp	r4, r3
 8003ba0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003ba4:	d8f7      	bhi.n	8003b96 <forward_conv2d+0x4ba>
 8003ba6:	43c3      	mvns	r3, r0
 8003ba8:	441c      	add	r4, r3
 8003baa:	f024 0403 	bic.w	r4, r4, #3
 8003bae:	3404      	adds	r4, #4
 8003bb0:	4425      	add	r5, r4
 8003bb2:	4420      	add	r0, r4
 8003bb4:	3101      	adds	r1, #1
 8003bb6:	428e      	cmp	r6, r1
 8003bb8:	4448      	add	r0, r9
 8003bba:	d1e6      	bne.n	8003b8a <forward_conv2d+0x4ae>
 8003bbc:	e004      	b.n	8003bc8 <forward_conv2d+0x4ec>
 8003bbe:	bf00      	nop
 8003bc0:	00000000 	.word	0x00000000
 8003bc4:	08003321 	.word	0x08003321
 8003bc8:	f10c 0c01 	add.w	ip, ip, #1
 8003bcc:	45e2      	cmp	sl, ip
 8003bce:	4458      	add	r0, fp
 8003bd0:	4445      	add	r5, r8
 8003bd2:	d1d7      	bne.n	8003b84 <forward_conv2d+0x4a8>
 8003bd4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003bd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bdc:	441d      	add	r5, r3
 8003bde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003be2:	ece3 7a01 	vstmia	r3!, {s15}
 8003be6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d1b8      	bne.n	8003b64 <forward_conv2d+0x488>
 8003bf2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bfa:	4472      	add	r2, lr
 8003bfc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c02:	1a52      	subs	r2, r2, r1
 8003c04:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8003c08:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	667b      	str	r3, [r7, #100]	; 0x64
 8003c12:	d19c      	bne.n	8003b4e <forward_conv2d+0x472>
 8003c14:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8003c18:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c1e:	4608      	mov	r0, r1
 8003c20:	4410      	add	r0, r2
 8003c22:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003c26:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8003c2a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8003c2e:	4401      	add	r1, r0
 8003c30:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8003c34:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8003c38:	1a8a      	subs	r2, r1, r2
 8003c3a:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8003c3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003c42:	3301      	adds	r3, #1
 8003c44:	429a      	cmp	r2, r3
 8003c46:	673b      	str	r3, [r7, #112]	; 0x70
 8003c48:	f47f af17 	bne.w	8003a7a <forward_conv2d+0x39e>
 8003c4c:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8003c50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c54:	b37b      	cbz	r3, 8003cb6 <forward_conv2d+0x5da>
 8003c56:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8003c5a:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 8003c5e:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 8003c62:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 8003c66:	2500      	movs	r5, #0
 8003c68:	46a2      	mov	sl, r4
 8003c6a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8003c6e:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8003c72:	f8c2 a008 	str.w	sl, [r2, #8]
 8003c76:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003c7a:	4633      	mov	r3, r6
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	4416      	add	r6, r2
 8003c80:	4640      	mov	r0, r8
 8003c82:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003c86:	47a0      	blx	r4
 8003c88:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003c8c:	4492      	add	sl, r2
 8003c8e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8003c92:	eba6 0309 	sub.w	r3, r6, r9
 8003c96:	4293      	cmp	r3, r2
 8003c98:	bfa8      	it	ge
 8003c9a:	464e      	movge	r6, r9
 8003c9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003ca0:	3501      	adds	r5, #1
 8003ca2:	42ab      	cmp	r3, r5
 8003ca4:	d1e1      	bne.n	8003c6a <forward_conv2d+0x58e>
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cce:	4418      	add	r0, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003cdc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cea:	3101      	adds	r1, #1
 8003cec:	428b      	cmp	r3, r1
 8003cee:	67f9      	str	r1, [r7, #124]	; 0x7c
 8003cf0:	f47f ae42 	bne.w	8003978 <forward_conv2d+0x29c>
 8003cf4:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	ecbd 8b10 	vpop	{d8-d15}
 8003cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d02:	461a      	mov	r2, r3
 8003d04:	e768      	b.n	8003bd8 <forward_conv2d+0x4fc>
 8003d06:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003d0a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003d0e:	fb90 f3f2 	sdiv	r3, r0, r2
 8003d12:	fb02 0313 	mls	r3, r2, r3, r0
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	4605      	mov	r5, r0
 8003d1a:	fb93 f0f2 	sdiv	r0, r3, r2
 8003d1e:	fb02 3010 	mls	r0, r2, r0, r3
 8003d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d24:	462e      	mov	r6, r5
 8003d26:	18c4      	adds	r4, r0, r3
 8003d28:	eb02 0805 	add.w	r8, r2, r5
 8003d2c:	e6b6      	b.n	8003a9c <forward_conv2d+0x3c0>
 8003d2e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003d30:	2901      	cmp	r1, #1
 8003d32:	f47f ae39 	bne.w	80039a8 <forward_conv2d+0x2cc>
 8003d36:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8003d3a:	2900      	cmp	r1, #0
 8003d3c:	d0bb      	beq.n	8003cb6 <forward_conv2d+0x5da>
 8003d3e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8003d42:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8003d46:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 8003d4a:	fbb1 f5f0 	udiv	r5, r1, r0
 8003d4e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8003d52:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8003d56:	633d      	str	r5, [r7, #48]	; 0x30
 8003d58:	1ad2      	subs	r2, r2, r3
 8003d5a:	1a8c      	subs	r4, r1, r2
 8003d5c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d60:	00b2      	lsls	r2, r6, #2
 8003d62:	fb02 f204 	mul.w	r2, r2, r4
 8003d66:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 8003d6a:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 8003d6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d70:	0082      	lsls	r2, r0, #2
 8003d72:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d74:	00ca      	lsls	r2, r1, #3
 8003d76:	603a      	str	r2, [r7, #0]
 8003d78:	00aa      	lsls	r2, r5, #2
 8003d7a:	60ba      	str	r2, [r7, #8]
 8003d7c:	fb03 f206 	mul.w	r2, r3, r6
 8003d80:	673a      	str	r2, [r7, #112]	; 0x70
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	fb02 f303 	mul.w	r3, r2, r3
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003d9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003da8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f2c0 8110 	blt.w	8003fd2 <forward_conv2d+0x8f6>
 8003db2:	2100      	movs	r1, #0
 8003db4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db6:	460a      	mov	r2, r1
 8003db8:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8003dbc:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8003dc0:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 8003dc4:	4420      	add	r0, r4
 8003dc6:	4408      	add	r0, r1
 8003dc8:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8003dcc:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8003dd0:	190c      	adds	r4, r1, r4
 8003dd2:	42ac      	cmp	r4, r5
 8003dd4:	bf28      	it	cs
 8003dd6:	462c      	movcs	r4, r5
 8003dd8:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8003ddc:	0080      	lsls	r0, r0, #2
 8003dde:	1aa4      	subs	r4, r4, r2
 8003de0:	2d00      	cmp	r5, #0
 8003de2:	f000 80e7 	beq.w	8003fb4 <forward_conv2d+0x8d8>
 8003de6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003dea:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 8003dee:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8003df2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003df6:	42b5      	cmp	r5, r6
 8003df8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8003dfc:	eba3 0204 	sub.w	r2, r3, r4
 8003e00:	eba1 0104 	sub.w	r1, r1, r4
 8003e04:	bf08      	it	eq
 8003e06:	eef0 3a48 	vmoveq.f32	s7, s16
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8003e0e:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8003e12:	4428      	add	r0, r5
 8003e14:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8003e18:	fb05 6e00 	mla	lr, r5, r0, r6
 8003e1c:	eb0e 000b 	add.w	r0, lr, fp
 8003e20:	4586      	cmp	lr, r0
 8003e22:	6238      	str	r0, [r7, #32]
 8003e24:	f080 80a5 	bcs.w	8003f72 <forward_conv2d+0x896>
 8003e28:	0092      	lsls	r2, r2, #2
 8003e2a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e30:	fb0b f101 	mul.w	r1, fp, r1
 8003e34:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003e38:	f024 0803 	bic.w	r8, r4, #3
 8003e3c:	2a00      	cmp	r2, #0
 8003e3e:	f000 8098 	beq.w	8003f72 <forward_conv2d+0x896>
 8003e42:	f108 32ff 	add.w	r2, r8, #4294967295
 8003e46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003e48:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8003e4c:	0892      	lsrs	r2, r2, #2
 8003e4e:	3201      	adds	r2, #1
 8003e50:	4401      	add	r1, r0
 8003e52:	fb02 f00a 	mul.w	r0, r2, sl
 8003e56:	6578      	str	r0, [r7, #84]	; 0x54
 8003e58:	0110      	lsls	r0, r2, #4
 8003e5a:	0092      	lsls	r2, r2, #2
 8003e5c:	653a      	str	r2, [r7, #80]	; 0x50
 8003e5e:	1aca      	subs	r2, r1, r3
 8003e60:	613a      	str	r2, [r7, #16]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	6678      	str	r0, [r7, #100]	; 0x64
 8003e66:	4413      	add	r3, r2
 8003e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e72:	4413      	add	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e84:	ecf3 6a01 	vldmia	r3!, {s13}
 8003e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003e96:	dd57      	ble.n	8003f48 <forward_conv2d+0x86c>
 8003e98:	4676      	mov	r6, lr
 8003e9a:	f04f 0c00 	mov.w	ip, #0
 8003e9e:	f1b8 0f00 	cmp.w	r8, #0
 8003ea2:	f340 8085 	ble.w	8003fb0 <forward_conv2d+0x8d4>
 8003ea6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003eaa:	f109 0310 	add.w	r3, r9, #16
 8003eae:	18b1      	adds	r1, r6, r2
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	4632      	mov	r2, r6
 8003eb4:	eb02 050b 	add.w	r5, r2, fp
 8003eb8:	ed95 7a00 	vldr	s14, [r5]
 8003ebc:	ed53 7a03 	vldr	s15, [r3, #-12]
 8003ec0:	ed92 4a00 	vldr	s8, [r2]
 8003ec4:	ed53 4a04 	vldr	s9, [r3, #-16]
 8003ec8:	ed91 5a00 	vldr	s10, [r1]
 8003ecc:	ed53 5a02 	vldr	s11, [r3, #-8]
 8003ed0:	ed13 6a01 	vldr	s12, [r3, #-4]
 8003ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed8:	eb01 050b 	add.w	r5, r1, fp
 8003edc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003ee0:	3004      	adds	r0, #4
 8003ee2:	4540      	cmp	r0, r8
 8003ee4:	ed95 7a00 	vldr	s14, [r5]
 8003ee8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003eec:	4452      	add	r2, sl
 8003eee:	4451      	add	r1, sl
 8003ef0:	f103 0310 	add.w	r3, r3, #16
 8003ef4:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003ef8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003efc:	dbda      	blt.n	8003eb4 <forward_conv2d+0x7d8>
 8003efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f00:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003f02:	441e      	add	r6, r3
 8003f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f06:	4499      	add	r9, r3
 8003f08:	42a0      	cmp	r0, r4
 8003f0a:	da11      	bge.n	8003f30 <forward_conv2d+0x854>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4633      	mov	r3, r6
 8003f10:	4649      	mov	r1, r9
 8003f12:	edd3 7a00 	vldr	s15, [r3]
 8003f16:	ecb1 7a01 	vldmia	r1!, {s14}
 8003f1a:	3201      	adds	r2, #1
 8003f1c:	42a2      	cmp	r2, r4
 8003f1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003f22:	445b      	add	r3, fp
 8003f24:	d1f5      	bne.n	8003f12 <forward_conv2d+0x836>
 8003f26:	1a20      	subs	r0, r4, r0
 8003f28:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8003f2c:	fb00 660b 	mla	r6, r0, fp, r6
 8003f30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f34:	441e      	add	r6, r3
 8003f36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f3a:	4499      	add	r9, r3
 8003f3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f40:	f10c 0c01 	add.w	ip, ip, #1
 8003f44:	4563      	cmp	r3, ip
 8003f46:	d1aa      	bne.n	8003e9e <forward_conv2d+0x7c2>
 8003f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4a:	4499      	add	r9, r3
 8003f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4e:	ece3 6a01 	vstmia	r3!, {s13}
 8003f52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f54:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d191      	bne.n	8003e80 <forward_conv2d+0x7a4>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f10e 0e04 	add.w	lr, lr, #4
 8003f6c:	459e      	cmp	lr, r3
 8003f6e:	f4ff af7d 	bcc.w	8003e6c <forward_conv2d+0x790>
 8003f72:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003f76:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f7e:	440a      	add	r2, r1
 8003f80:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8003f84:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003f88:	4608      	mov	r0, r1
 8003f8a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003f8e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8003f92:	4410      	add	r0, r2
 8003f94:	1a8a      	subs	r2, r1, r2
 8003f96:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8003f9a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003f9e:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003faa:	f47f aefd 	bne.w	8003da8 <forward_conv2d+0x6cc>
 8003fae:	e64f      	b.n	8003c50 <forward_conv2d+0x574>
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	e7a9      	b.n	8003f08 <forward_conv2d+0x82c>
 8003fb4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003fb8:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc0:	1b19      	subs	r1, r3, r4
 8003fc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003fc6:	eef0 3a48 	vmov.f32	s7, s16
 8003fca:	1b1a      	subs	r2, r3, r4
 8003fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fd0:	e71c      	b.n	8003e0c <forward_conv2d+0x730>
 8003fd2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8003fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd8:	460a      	mov	r2, r1
 8003fda:	440b      	add	r3, r1
 8003fdc:	e6ec      	b.n	8003db8 <forward_conv2d+0x6dc>
 8003fde:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003fe0:	2801      	cmp	r0, #1
 8003fe2:	f47f ace1 	bne.w	80039a8 <forward_conv2d+0x2cc>
 8003fe6:	1ad2      	subs	r2, r2, r3
 8003fe8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003fea:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003fee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003ff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ff4:	fb00 4101 	mla	r1, r0, r1, r4
 8003ff8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003ffc:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8004000:	f080 8191 	bcs.w	8004326 <forward_conv2d+0xc4a>
 8004004:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004008:	2a00      	cmp	r2, #0
 800400a:	f43f ae21 	beq.w	8003c50 <forward_conv2d+0x574>
 800400e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004010:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800401a:	667b      	str	r3, [r7, #100]	; 0x64
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004020:	188b      	adds	r3, r1, r2
 8004022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004024:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004028:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004038:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8133 	beq.w	80042b2 <forward_conv2d+0xbd6>
 800404c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004050:	ed93 6a00 	vldr	s12, [r3]
 8004054:	3304      	adds	r3, #4
 8004056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800405a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8101 	beq.w	8004266 <forward_conv2d+0xb8a>
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004068:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800406c:	eb03 0802 	add.w	r8, r3, r2
 8004070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004072:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800407c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004080:	673b      	str	r3, [r7, #112]	; 0x70
 8004082:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004086:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800408a:	f04f 0b00 	mov.w	fp, #0
 800408e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004092:	2b00      	cmp	r3, #0
 8004094:	f2c0 8104 	blt.w	80042a0 <forward_conv2d+0xbc4>
 8004098:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800409c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800409e:	2300      	movs	r3, #0
 80040a0:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 80040a4:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80040a8:	eb02 0c04 	add.w	ip, r2, r4
 80040ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80040b0:	4540      	cmp	r0, r8
 80040b2:	bf94      	ite	ls
 80040b4:	ebc3 0300 	rsbls	r3, r3, r0
 80040b8:	ebc3 0308 	rsbhi	r3, r3, r8
 80040bc:	eba2 0903 	sub.w	r9, r2, r3
 80040c0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80040c4:	1ac4      	subs	r4, r0, r3
 80040c6:	fb03 f302 	mul.w	r3, r3, r2
 80040ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80040ce:	2a00      	cmp	r2, #0
 80040d0:	f340 80e3 	ble.w	800429a <forward_conv2d+0xbbe>
 80040d4:	f023 050f 	bic.w	r5, r3, #15
 80040d8:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 80040dc:	1e68      	subs	r0, r5, #1
 80040de:	0900      	lsrs	r0, r0, #4
 80040e0:	3001      	adds	r0, #1
 80040e2:	fb06 f204 	mul.w	r2, r6, r4
 80040e6:	657a      	str	r2, [r7, #84]	; 0x54
 80040e8:	0102      	lsls	r2, r0, #4
 80040ea:	653a      	str	r2, [r7, #80]	; 0x50
 80040ec:	fb06 f909 	mul.w	r9, r6, r9
 80040f0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80040f4:	eef0 6a46 	vmov.f32	s13, s12
 80040f8:	f04f 0e00 	mov.w	lr, #0
 80040fc:	4662      	mov	r2, ip
 80040fe:	2d00      	cmp	r5, #0
 8004100:	f340 80c9 	ble.w	8004296 <forward_conv2d+0xbba>
 8004104:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8004108:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800410c:	2600      	movs	r6, #0
 800410e:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8004112:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8004116:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800411a:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800411e:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 8004122:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8004126:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800412a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800412e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8004132:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8004136:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800413a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800413e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8004142:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8004146:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800414a:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800414e:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8004152:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8004156:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800415a:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800415e:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 8004162:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8004166:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800416a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800416e:	ed14 4a04 	vldr	s8, [r4, #-16]
 8004172:	ed50 4a03 	vldr	s9, [r0, #-12]
 8004176:	ed14 5a03 	vldr	s10, [r4, #-12]
 800417a:	ed50 5a02 	vldr	s11, [r0, #-8]
 800417e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8004182:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8004186:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 800418a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800418e:	3610      	adds	r6, #16
 8004190:	42ae      	cmp	r6, r5
 8004192:	ed14 fa01 	vldr	s30, [r4, #-4]
 8004196:	ed50 ea01 	vldr	s29, [r0, #-4]
 800419a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800419e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80041a2:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80041a6:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80041aa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80041ae:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80041b2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80041b6:	eee9 7a89 	vfma.f32	s15, s19, s18
 80041ba:	eee8 7a80 	vfma.f32	s15, s17, s0
 80041be:	eee0 7a81 	vfma.f32	s15, s1, s2
 80041c2:	eee1 7a82 	vfma.f32	s15, s3, s4
 80041c6:	eee2 7a83 	vfma.f32	s15, s5, s6
 80041ca:	eee3 7a84 	vfma.f32	s15, s7, s8
 80041ce:	eee4 7a85 	vfma.f32	s15, s9, s10
 80041d2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80041d6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80041da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80041de:	db96      	blt.n	800410e <forward_conv2d+0xa32>
 80041e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80041e2:	4451      	add	r1, sl
 80041e4:	4452      	add	r2, sl
 80041e6:	4283      	cmp	r3, r0
 80041e8:	dd0f      	ble.n	800420a <forward_conv2d+0xb2e>
 80041ea:	4604      	mov	r4, r0
 80041ec:	468c      	mov	ip, r1
 80041ee:	4616      	mov	r6, r2
 80041f0:	ecb6 7a01 	vldmia	r6!, {s14}
 80041f4:	ecfc 7a01 	vldmia	ip!, {s15}
 80041f8:	3401      	adds	r4, #1
 80041fa:	42a3      	cmp	r3, r4
 80041fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004200:	d1f6      	bne.n	80041f0 <forward_conv2d+0xb14>
 8004202:	1a18      	subs	r0, r3, r0
 8004204:	0080      	lsls	r0, r0, #2
 8004206:	4402      	add	r2, r0
 8004208:	4401      	add	r1, r0
 800420a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800420c:	4402      	add	r2, r0
 800420e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004212:	f10e 0e01 	add.w	lr, lr, #1
 8004216:	4570      	cmp	r0, lr
 8004218:	4449      	add	r1, r9
 800421a:	f47f af70 	bne.w	80040fe <forward_conv2d+0xa22>
 800421e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8004222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004224:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004228:	edc3 6a00 	vstr	s13, [r3]
 800422c:	4608      	mov	r0, r1
 800422e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004232:	440b      	add	r3, r1
 8004234:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8004238:	673b      	str	r3, [r7, #112]	; 0x70
 800423a:	4410      	add	r0, r2
 800423c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800423e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8004242:	4608      	mov	r0, r1
 8004244:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8004248:	4418      	add	r0, r3
 800424a:	1acb      	subs	r3, r1, r3
 800424c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004250:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004254:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8004258:	f10b 0b01 	add.w	fp, fp, #1
 800425c:	455b      	cmp	r3, fp
 800425e:	eba8 0802 	sub.w	r8, r8, r2
 8004262:	f47f af14 	bne.w	800408e <forward_conv2d+0x9b2>
 8004266:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800426a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800426c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004270:	440a      	add	r2, r1
 8004272:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004276:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800427a:	3204      	adds	r2, #4
 800427c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8004280:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004284:	3301      	adds	r3, #1
 8004286:	429a      	cmp	r2, r3
 8004288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800428c:	f47f aed9 	bne.w	8004042 <forward_conv2d+0x966>
 8004290:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 8004294:	e4dc      	b.n	8003c50 <forward_conv2d+0x574>
 8004296:	2000      	movs	r0, #0
 8004298:	e7a5      	b.n	80041e6 <forward_conv2d+0xb0a>
 800429a:	eef0 6a46 	vmov.f32	s13, s12
 800429e:	e7be      	b.n	800421e <forward_conv2d+0xb42>
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042a8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80042ac:	eba8 0303 	sub.w	r3, r8, r3
 80042b0:	e6f6      	b.n	80040a0 <forward_conv2d+0x9c4>
 80042b2:	eeb0 6a48 	vmov.f32	s12, s16
 80042b6:	e6d0      	b.n	800405a <forward_conv2d+0x97e>
 80042b8:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80042bc:	68ca      	ldr	r2, [r1, #12]
 80042be:	2a00      	cmp	r2, #0
 80042c0:	f43f aaca 	beq.w	8003858 <forward_conv2d+0x17c>
 80042c4:	69b3      	ldr	r3, [r6, #24]
 80042c6:	8818      	ldrh	r0, [r3, #0]
 80042c8:	2803      	cmp	r0, #3
 80042ca:	f240 819f 	bls.w	800460c <forward_conv2d+0xf30>
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	b32b      	cbz	r3, 8004320 <forward_conv2d+0xc44>
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	b31b      	cbz	r3, 8004320 <forward_conv2d+0xc44>
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	6889      	ldr	r1, [r1, #8]
 80042dc:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 80042e0:	9301      	str	r3, [sp, #4]
 80042e2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80042e6:	9000      	str	r0, [sp, #0]
 80042e8:	462b      	mov	r3, r5
 80042ea:	4620      	mov	r0, r4
 80042ec:	f7ff f9a6 	bl	800363c <ai_dict_decompress_f32>
 80042f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042f4:	2c00      	cmp	r4, #0
 80042f6:	bf18      	it	ne
 80042f8:	4623      	movne	r3, r4
 80042fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80042fe:	f7ff baab 	b.w	8003858 <forward_conv2d+0x17c>
 8004302:	2800      	cmp	r0, #0
 8004304:	f000 8185 	beq.w	8004612 <forward_conv2d+0xf36>
 8004308:	6883      	ldr	r3, [r0, #8]
 800430a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800430e:	2301      	movs	r3, #1
 8004310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004314:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004318:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800431c:	f7ff ba6d 	b.w	80037fa <forward_conv2d+0x11e>
 8004320:	2300      	movs	r3, #0
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	deff      	udf	#255	; 0xff
 8004326:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800432a:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 800432e:	320a      	adds	r2, #10
 8004330:	f022 0207 	bic.w	r2, r2, #7
 8004334:	ebad 0d02 	sub.w	sp, sp, r2
 8004338:	aa02      	add	r2, sp, #8
 800433a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800433e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004342:	2a00      	cmp	r2, #0
 8004344:	f000 814d 	beq.w	80045e2 <forward_conv2d+0xf06>
 8004348:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800434a:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004354:	657b      	str	r3, [r7, #84]	; 0x54
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	64fb      	str	r3, [r7, #76]	; 0x4c
 800435a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800435e:	4413      	add	r3, r2
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800436a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800436e:	673b      	str	r3, [r7, #112]	; 0x70
 8004370:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004374:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800437e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004380:	b13b      	cbz	r3, 8004392 <forward_conv2d+0xcb6>
 8004382:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004386:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800438a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800438e:	f002 f961 	bl	8006654 <memcpy>
 8004392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8135 	beq.w	8004606 <forward_conv2d+0xf2a>
 800439c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800439e:	ed93 6a00 	vldr	s12, [r3]
 80043a2:	3304      	adds	r3, #4
 80043a4:	673b      	str	r3, [r7, #112]	; 0x70
 80043a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8101 	beq.w	80045b2 <forward_conv2d+0xed6>
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043b8:	eb03 0802 	add.w	r8, r3, r2
 80043bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80043c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043d6:	f04f 0b00 	mov.w	fp, #0
 80043da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f2c0 8108 	blt.w	80045f4 <forward_conv2d+0xf18>
 80043e4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80043e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043ea:	2300      	movs	r3, #0
 80043ec:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80043f0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80043f4:	eb02 0c04 	add.w	ip, r2, r4
 80043f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80043fc:	4540      	cmp	r0, r8
 80043fe:	bf94      	ite	ls
 8004400:	ebc3 0300 	rsbls	r3, r3, r0
 8004404:	ebc3 0308 	rsbhi	r3, r3, r8
 8004408:	eba2 0903 	sub.w	r9, r2, r3
 800440c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004410:	1ac4      	subs	r4, r0, r3
 8004412:	fb03 f302 	mul.w	r3, r3, r2
 8004416:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800441a:	2a00      	cmp	r2, #0
 800441c:	f340 80e7 	ble.w	80045ee <forward_conv2d+0xf12>
 8004420:	f023 050f 	bic.w	r5, r3, #15
 8004424:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8004428:	1e68      	subs	r0, r5, #1
 800442a:	0900      	lsrs	r0, r0, #4
 800442c:	3001      	adds	r0, #1
 800442e:	fb06 f204 	mul.w	r2, r6, r4
 8004432:	653a      	str	r2, [r7, #80]	; 0x50
 8004434:	0102      	lsls	r2, r0, #4
 8004436:	633a      	str	r2, [r7, #48]	; 0x30
 8004438:	fb06 f909 	mul.w	r9, r6, r9
 800443c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8004440:	eef0 6a46 	vmov.f32	s13, s12
 8004444:	f04f 0e00 	mov.w	lr, #0
 8004448:	4662      	mov	r2, ip
 800444a:	2d00      	cmp	r5, #0
 800444c:	f340 80cd 	ble.w	80045ea <forward_conv2d+0xf0e>
 8004450:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8004454:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8004458:	2600      	movs	r6, #0
 800445a:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800445e:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 8004462:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8004466:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800446a:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800446e:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8004472:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8004476:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 800447a:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 800447e:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 8004482:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 8004486:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800448a:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800448e:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8004492:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8004496:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800449a:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800449e:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 80044a2:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80044a6:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80044aa:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80044ae:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 80044b2:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 80044b6:	ed54 3a04 	vldr	s7, [r4, #-16]
 80044ba:	ed10 4a04 	vldr	s8, [r0, #-16]
 80044be:	ed50 4a03 	vldr	s9, [r0, #-12]
 80044c2:	ed14 5a03 	vldr	s10, [r4, #-12]
 80044c6:	ed54 5a02 	vldr	s11, [r4, #-8]
 80044ca:	ed10 7a02 	vldr	s14, [r0, #-8]
 80044ce:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80044d2:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 80044d6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80044da:	3610      	adds	r6, #16
 80044dc:	42b5      	cmp	r5, r6
 80044de:	ed14 fa01 	vldr	s30, [r4, #-4]
 80044e2:	ed50 ea01 	vldr	s29, [r0, #-4]
 80044e6:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80044ea:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80044ee:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80044f2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80044f6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80044fa:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80044fe:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8004502:	eee9 7a89 	vfma.f32	s15, s19, s18
 8004506:	eee8 7a80 	vfma.f32	s15, s17, s0
 800450a:	eee0 7a81 	vfma.f32	s15, s1, s2
 800450e:	eee1 7a82 	vfma.f32	s15, s3, s4
 8004512:	eee2 7a83 	vfma.f32	s15, s5, s6
 8004516:	eee3 7a84 	vfma.f32	s15, s7, s8
 800451a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800451e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8004522:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8004526:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800452a:	dc96      	bgt.n	800445a <forward_conv2d+0xd7e>
 800452c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800452e:	4451      	add	r1, sl
 8004530:	4452      	add	r2, sl
 8004532:	4283      	cmp	r3, r0
 8004534:	dd0f      	ble.n	8004556 <forward_conv2d+0xe7a>
 8004536:	4604      	mov	r4, r0
 8004538:	468c      	mov	ip, r1
 800453a:	4616      	mov	r6, r2
 800453c:	ecb6 7a01 	vldmia	r6!, {s14}
 8004540:	ecfc 7a01 	vldmia	ip!, {s15}
 8004544:	3401      	adds	r4, #1
 8004546:	42a3      	cmp	r3, r4
 8004548:	eee7 6a27 	vfma.f32	s13, s14, s15
 800454c:	d1f6      	bne.n	800453c <forward_conv2d+0xe60>
 800454e:	1a18      	subs	r0, r3, r0
 8004550:	0080      	lsls	r0, r0, #2
 8004552:	4402      	add	r2, r0
 8004554:	4401      	add	r1, r0
 8004556:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004558:	4402      	add	r2, r0
 800455a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800455e:	f10e 0e01 	add.w	lr, lr, #1
 8004562:	4570      	cmp	r0, lr
 8004564:	4449      	add	r1, r9
 8004566:	f47f af70 	bne.w	800444a <forward_conv2d+0xd6e>
 800456a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800456e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004570:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004574:	edc3 6a00 	vstr	s13, [r3]
 8004578:	4608      	mov	r0, r1
 800457a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800457e:	440b      	add	r3, r1
 8004580:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8004584:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004586:	4410      	add	r0, r2
 8004588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800458a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800458e:	4608      	mov	r0, r1
 8004590:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8004594:	4418      	add	r0, r3
 8004596:	1acb      	subs	r3, r1, r3
 8004598:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800459c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045a0:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 80045a4:	f10b 0b01 	add.w	fp, fp, #1
 80045a8:	455b      	cmp	r3, fp
 80045aa:	eba8 0802 	sub.w	r8, r8, r2
 80045ae:	f47f af14 	bne.w	80043da <forward_conv2d+0xcfe>
 80045b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80045b6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80045ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045be:	440a      	add	r2, r1
 80045c0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045c4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045c8:	3204      	adds	r2, #4
 80045ca:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80045ce:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80045d2:	3301      	adds	r3, #1
 80045d4:	429a      	cmp	r2, r3
 80045d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80045da:	f47f aed0 	bne.w	800437e <forward_conv2d+0xca2>
 80045de:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 80045e2:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 80045e6:	f7ff bb33 	b.w	8003c50 <forward_conv2d+0x574>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e7a1      	b.n	8004532 <forward_conv2d+0xe56>
 80045ee:	eef0 6a46 	vmov.f32	s13, s12
 80045f2:	e7ba      	b.n	800456a <forward_conv2d+0xe8e>
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045fc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8004600:	eba8 0303 	sub.w	r3, r8, r3
 8004604:	e6f2      	b.n	80043ec <forward_conv2d+0xd10>
 8004606:	eeb0 6a48 	vmov.f32	s12, s16
 800460a:	e6cc      	b.n	80043a6 <forward_conv2d+0xcca>
 800460c:	2300      	movs	r3, #0
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	deff      	udf	#255	; 0xff
 8004612:	4603      	mov	r3, r0
 8004614:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004618:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800461c:	2301      	movs	r3, #1
 800461e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004622:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004626:	f7ff b8e8 	b.w	80037fa <forward_conv2d+0x11e>
 800462a:	2800      	cmp	r0, #0
 800462c:	d0f2      	beq.n	8004614 <forward_conv2d+0xf38>
 800462e:	6882      	ldr	r2, [r0, #8]
 8004630:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004634:	2301      	movs	r3, #1
 8004636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800463a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800463e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004642:	f7ff b8da 	b.w	80037fa <forward_conv2d+0x11e>
 8004646:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800464a:	f7ff b8b7 	b.w	80037bc <forward_conv2d+0xe0>
 800464e:	3318      	adds	r3, #24
 8004650:	d007      	beq.n	8004662 <forward_conv2d+0xf86>
 8004652:	462a      	mov	r2, r5
 8004654:	462c      	mov	r4, r5
 8004656:	462b      	mov	r3, r5
 8004658:	f7ff b86a 	b.w	8003730 <forward_conv2d+0x54>
 800465c:	2300      	movs	r3, #0
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	deff      	udf	#255	; 0xff
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	deff      	udf	#255	; 0xff
 8004666:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800466a:	f7ff b850 	b.w	800370e <forward_conv2d+0x32>
 800466e:	2300      	movs	r3, #0
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	deff      	udf	#255	; 0xff
 8004674:	6853      	ldr	r3, [r2, #4]
 8004676:	deff      	udf	#255	; 0xff
 8004678:	2200      	movs	r2, #0
 800467a:	f7ff b858 	b.w	800372e <forward_conv2d+0x52>
 800467e:	bf00      	nop

08004680 <forward_conv2d_nl_pool>:
 8004680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	ed2d 8b10 	vpush	{d8-d15}
 8004688:	b0e1      	sub	sp, #388	; 0x184
 800468a:	6983      	ldr	r3, [r0, #24]
 800468c:	881e      	ldrh	r6, [r3, #0]
 800468e:	af0a      	add	r7, sp, #40	; 0x28
 8004690:	2e00      	cmp	r6, #0
 8004692:	f000 859b 	beq.w	80051cc <forward_conv2d_nl_pool+0xb4c>
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	684a      	ldr	r2, [r1, #4]
 800469a:	2a00      	cmp	r2, #0
 800469c:	f000 8593 	beq.w	80051c6 <forward_conv2d_nl_pool+0xb46>
 80046a0:	f8d2 c000 	ldr.w	ip, [r2]
 80046a4:	2e01      	cmp	r6, #1
 80046a6:	f240 858b 	bls.w	80051c0 <forward_conv2d_nl_pool+0xb40>
 80046aa:	690a      	ldr	r2, [r1, #16]
 80046ac:	2a00      	cmp	r2, #0
 80046ae:	f000 8582 	beq.w	80051b6 <forward_conv2d_nl_pool+0xb36>
 80046b2:	f8d2 9000 	ldr.w	r9, [r2]
 80046b6:	2e02      	cmp	r6, #2
 80046b8:	f000 8582 	beq.w	80051c0 <forward_conv2d_nl_pool+0xb40>
 80046bc:	69cd      	ldr	r5, [r1, #28]
 80046be:	2d00      	cmp	r5, #0
 80046c0:	f000 8571 	beq.w	80051a6 <forward_conv2d_nl_pool+0xb26>
 80046c4:	682a      	ldr	r2, [r5, #0]
 80046c6:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80046ca:	f111 0218 	adds.w	r2, r1, #24
 80046ce:	d004      	beq.n	80046da <forward_conv2d_nl_pool+0x5a>
 80046d0:	8b0a      	ldrh	r2, [r1, #24]
 80046d2:	2a01      	cmp	r2, #1
 80046d4:	f240 857c 	bls.w	80051d0 <forward_conv2d_nl_pool+0xb50>
 80046d8:	686a      	ldr	r2, [r5, #4]
 80046da:	68a9      	ldr	r1, [r5, #8]
 80046dc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80046de:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 80046e2:	f8dc b018 	ldr.w	fp, [ip, #24]
 80046e6:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 80046ea:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80046ee:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80046f2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80046f6:	f8db 4008 	ldr.w	r4, [fp, #8]
 80046fa:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80046fe:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8004702:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8004706:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 800470a:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800470e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004712:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004716:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800471a:	f8de 4004 	ldr.w	r4, [lr, #4]
 800471e:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8004722:	f8de 400c 	ldr.w	r4, [lr, #12]
 8004726:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800472a:	f8de 4008 	ldr.w	r4, [lr, #8]
 800472e:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8004732:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8004736:	6824      	ldr	r4, [r4, #0]
 8004738:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 800473c:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8004740:	6864      	ldr	r4, [r4, #4]
 8004742:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8004746:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800474a:	68a5      	ldr	r5, [r4, #8]
 800474c:	f8da 4004 	ldr.w	r4, [sl, #4]
 8004750:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8004754:	f8da 4008 	ldr.w	r4, [sl, #8]
 8004758:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800475c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800475e:	6824      	ldr	r4, [r4, #0]
 8004760:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 8004764:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004766:	6864      	ldr	r4, [r4, #4]
 8004768:	643c      	str	r4, [r7, #64]	; 0x40
 800476a:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800476e:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8004772:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004774:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8004778:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800477a:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800477e:	69c4      	ldr	r4, [r0, #28]
 8004780:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 8004784:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004786:	64bc      	str	r4, [r7, #72]	; 0x48
 8004788:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800478a:	647c      	str	r4, [r7, #68]	; 0x44
 800478c:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800478e:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8004792:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 8004796:	2a00      	cmp	r2, #0
 8004798:	f000 84f8 	beq.w	800518c <forward_conv2d_nl_pool+0xb0c>
 800479c:	6992      	ldr	r2, [r2, #24]
 800479e:	6892      	ldr	r2, [r2, #8]
 80047a0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80047a4:	4680      	mov	r8, r0
 80047a6:	6a00      	ldr	r0, [r0, #32]
 80047a8:	2900      	cmp	r1, #0
 80047aa:	f000 84e4 	beq.w	8005176 <forward_conv2d_nl_pool+0xaf6>
 80047ae:	698a      	ldr	r2, [r1, #24]
 80047b0:	2a00      	cmp	r2, #0
 80047b2:	f000 8533 	beq.w	800521c <forward_conv2d_nl_pool+0xb9c>
 80047b6:	694b      	ldr	r3, [r1, #20]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80047be:	e9d2 0100 	ldrd	r0, r1, [r2]
 80047c2:	6893      	ldr	r3, [r2, #8]
 80047c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80047c8:	f001 fef0 	bl	80065ac <ai_array_get_byte_size>
 80047cc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80047d0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80047d4:	881e      	ldrh	r6, [r3, #0]
 80047d6:	f8d2 c018 	ldr.w	ip, [r2, #24]
 80047da:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80047de:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 80047e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80047e4:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 80047e8:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80047ec:	fa11 f585 	uxtah	r5, r1, r5
 80047f0:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80047f4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80047f8:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80047fc:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8004800:	3901      	subs	r1, #1
 8004802:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8004806:	eb05 0e00 	add.w	lr, r5, r0
 800480a:	fa1f f28a 	uxth.w	r2, sl
 800480e:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 8004812:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8004816:	f8dc 4000 	ldr.w	r4, [ip]
 800481a:	f8dc 1000 	ldr.w	r1, [ip]
 800481e:	3a01      	subs	r2, #1
 8004820:	fb00 5002 	mla	r0, r0, r2, r5
 8004824:	fa1f f28b 	uxth.w	r2, fp
 8004828:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 800482c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8004830:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8004834:	1e50      	subs	r0, r2, #1
 8004836:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800483a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800483e:	fa44 f101 	asr.w	r1, r4, r1
 8004842:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8004846:	f8dc 4000 	ldr.w	r4, [ip]
 800484a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800484e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004852:	f3c4 4543 	ubfx	r5, r4, #17, #4
 8004856:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800485a:	ebae 0202 	sub.w	r2, lr, r2
 800485e:	fa1f fe81 	uxth.w	lr, r1
 8004862:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8004866:	fbb2 f2f1 	udiv	r2, r2, r1
 800486a:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800486e:	3c01      	subs	r4, #1
 8004870:	fb04 1100 	mla	r1, r4, r0, r1
 8004874:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004878:	1c51      	adds	r1, r2, #1
 800487a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800487e:	487c      	ldr	r0, [pc, #496]	; (8004a70 <forward_conv2d_nl_pool+0x3f0>)
 8004880:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8004884:	4611      	mov	r1, r2
 8004886:	2a00      	cmp	r2, #0
 8004888:	bf08      	it	eq
 800488a:	4601      	moveq	r1, r0
 800488c:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8004890:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004894:	2d04      	cmp	r5, #4
 8004896:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800489a:	f000 849e 	beq.w	80051da <forward_conv2d_nl_pool+0xb5a>
 800489e:	2d08      	cmp	r5, #8
 80048a0:	f000 849b 	beq.w	80051da <forward_conv2d_nl_pool+0xb5a>
 80048a4:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80048a8:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80048ac:	2e03      	cmp	r6, #3
 80048ae:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 80048b2:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80048b6:	f240 8483 	bls.w	80051c0 <forward_conv2d_nl_pool+0xb40>
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8489 	beq.w	80051d6 <forward_conv2d_nl_pool+0xb56>
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80048d2:	6899      	ldr	r1, [r3, #8]
 80048d4:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 80048d8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80048dc:	6896      	ldr	r6, [r2, #8]
 80048de:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 80048e2:	4249      	negs	r1, r1
 80048e4:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80048e8:	2800      	cmp	r0, #0
 80048ea:	f000 82dd 	beq.w	8004ea8 <forward_conv2d_nl_pool+0x828>
 80048ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80048f2:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80048f6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80048fa:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 80048fe:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8004a74 <forward_conv2d_nl_pool+0x3f4>
 8004902:	fb03 f200 	mul.w	r2, r3, r0
 8004906:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800490a:	008c      	lsls	r4, r1, #2
 800490c:	fb04 f000 	mul.w	r0, r4, r0
 8004910:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8004914:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8004918:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800491c:	fb01 fc02 	mul.w	ip, r1, r2
 8004920:	00a2      	lsls	r2, r4, #2
 8004922:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8004926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800492a:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800492e:	00ab      	lsls	r3, r5, #2
 8004930:	4694      	mov	ip, r2
 8004932:	fb0c f204 	mul.w	r2, ip, r4
 8004936:	fb04 f303 	mul.w	r3, r4, r3
 800493a:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800493e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8004942:	00a4      	lsls	r4, r4, #2
 8004944:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004948:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800494c:	f04f 0c00 	mov.w	ip, #0
 8004950:	fa0f f58b 	sxth.w	r5, fp
 8004954:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8004958:	46a4      	mov	ip, r4
 800495a:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 800495e:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 8004962:	fa0f f58a 	sxth.w	r5, sl
 8004966:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 800496a:	fb0c fc04 	mul.w	ip, ip, r4
 800496e:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8004972:	fb06 fc03 	mul.w	ip, r6, r3
 8004976:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800497a:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800497e:	4240      	negs	r0, r0
 8004980:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8004984:	469c      	mov	ip, r3
 8004986:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800498a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800498e:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8004992:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 8004996:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 800499a:	fb00 f303 	mul.w	r3, r0, r3
 800499e:	460d      	mov	r5, r1
 80049a0:	fb0c fc04 	mul.w	ip, ip, r4
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
 80049a6:	fb04 f305 	mul.w	r3, r4, r5
 80049aa:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 80049ae:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049b8:	46a6      	mov	lr, r4
 80049ba:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80049be:	fb05 f503 	mul.w	r5, r5, r3
 80049c2:	667d      	str	r5, [r7, #100]	; 0x64
 80049c4:	4625      	mov	r5, r4
 80049c6:	fb05 f503 	mul.w	r5, r5, r3
 80049ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80049ce:	66bd      	str	r5, [r7, #104]	; 0x68
 80049d0:	fb00 f101 	mul.w	r1, r0, r1
 80049d4:	fb03 f306 	mul.w	r3, r3, r6
 80049d8:	657b      	str	r3, [r7, #84]	; 0x54
 80049da:	008b      	lsls	r3, r1, #2
 80049dc:	633b      	str	r3, [r7, #48]	; 0x30
 80049de:	0093      	lsls	r3, r2, #2
 80049e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e2:	0083      	lsls	r3, r0, #2
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049ea:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80049ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80049f2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80049f6:	2400      	movs	r4, #0
 80049f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049fa:	4603      	mov	r3, r0
 80049fc:	fb03 f301 	mul.w	r3, r3, r1
 8004a00:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8004a04:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8004a08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a0c:	00d1      	lsls	r1, r2, #3
 8004a0e:	0113      	lsls	r3, r2, #4
 8004a10:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8004a14:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8004a18:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004a1c:	fb00 f004 	mul.w	r0, r0, r4
 8004a20:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004a24:	66f8      	str	r0, [r7, #108]	; 0x6c
 8004a26:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004a2a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8004a2e:	469a      	mov	sl, r3
 8004a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f340 81d0 	ble.w	8004dda <forward_conv2d_nl_pool+0x75a>
 8004a3a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8004a3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004a42:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004a46:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004a4a:	2900      	cmp	r1, #0
 8004a4c:	441a      	add	r2, r3
 8004a4e:	bfb4      	ite	lt
 8004a50:	2100      	movlt	r1, #0
 8004a52:	2300      	movge	r3, #0
 8004a54:	4282      	cmp	r2, r0
 8004a56:	bf28      	it	cs
 8004a58:	4602      	movcs	r2, r0
 8004a5a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004a5e:	2801      	cmp	r0, #1
 8004a60:	f000 83f6 	beq.w	8005250 <forward_conv2d_nl_pool+0xbd0>
 8004a64:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004a68:	4281      	cmp	r1, r0
 8004a6a:	f000 822a 	beq.w	8004ec2 <forward_conv2d_nl_pool+0x842>
 8004a6e:	e003      	b.n	8004a78 <forward_conv2d_nl_pool+0x3f8>
 8004a70:	08003321 	.word	0x08003321
 8004a74:	00000000 	.word	0x00000000
 8004a78:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004a7c:	2900      	cmp	r1, #0
 8004a7e:	f000 819f 	beq.w	8004dc0 <forward_conv2d_nl_pool+0x740>
 8004a82:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8004a86:	fb93 f1f0 	sdiv	r1, r3, r0
 8004a8a:	fb00 3111 	mls	r1, r0, r1, r3
 8004a8e:	1a41      	subs	r1, r0, r1
 8004a90:	1ad2      	subs	r2, r2, r3
 8004a92:	fb91 f5f0 	sdiv	r5, r1, r0
 8004a96:	fb00 1515 	mls	r5, r0, r5, r1
 8004a9a:	1b52      	subs	r2, r2, r5
 8004a9c:	4601      	mov	r1, r0
 8004a9e:	4402      	add	r2, r0
 8004aa0:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004aa4:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004aae:	fbb4 f4f0 	udiv	r4, r4, r0
 8004ab2:	6a38      	ldr	r0, [r7, #32]
 8004ab4:	3a01      	subs	r2, #1
 8004ab6:	fb92 f8f1 	sdiv	r8, r2, r1
 8004aba:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004abe:	eba0 0c04 	sub.w	ip, r0, r4
 8004ac2:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004ac6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004aca:	4614      	mov	r4, r2
 8004acc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004ad0:	fbb4 f2f2 	udiv	r2, r4, r2
 8004ad4:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8004ad8:	663a      	str	r2, [r7, #96]	; 0x60
 8004ada:	441d      	add	r5, r3
 8004adc:	fb0e f000 	mul.w	r0, lr, r0
 8004ae0:	440b      	add	r3, r1
 8004ae2:	eba6 0608 	sub.w	r6, r6, r8
 8004ae6:	fb04 f505 	mul.w	r5, r4, r5
 8004aea:	3b01      	subs	r3, #1
 8004aec:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8004af0:	fb93 f3f4 	sdiv	r3, r3, r4
 8004af4:	fb00 f406 	mul.w	r4, r0, r6
 8004af8:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004afc:	677d      	str	r5, [r7, #116]	; 0x74
 8004afe:	0091      	lsls	r1, r2, #2
 8004b00:	fb00 f003 	mul.w	r0, r0, r3
 8004b04:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8004b08:	65f8      	str	r0, [r7, #92]	; 0x5c
 8004b0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b0e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8004b12:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8004b16:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8004b1a:	1ac3      	subs	r3, r0, r3
 8004b1c:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8004b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b24:	008b      	lsls	r3, r1, #2
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b28:	00d3      	lsls	r3, r2, #3
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8004b42:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8004b46:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b48:	46c2      	mov	sl, r8
 8004b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b4e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004b52:	eb03 0c02 	add.w	ip, r3, r2
 8004b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f2c0 811c 	blt.w	8004d98 <forward_conv2d_nl_pool+0x718>
 8004b60:	2000      	movs	r0, #0
 8004b62:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8004b64:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 8004b68:	4605      	mov	r5, r0
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b70:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004b74:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8004b78:	4413      	add	r3, r2
 8004b7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004b7e:	440a      	add	r2, r1
 8004b80:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004b84:	428b      	cmp	r3, r1
 8004b86:	bf94      	ite	ls
 8004b88:	ebc6 0303 	rsbls	r3, r6, r3
 8004b8c:	ebc6 0301 	rsbhi	r3, r6, r1
 8004b90:	4415      	add	r5, r2
 8004b92:	1a1b      	subs	r3, r3, r0
 8004b94:	00a4      	lsls	r4, r4, #2
 8004b96:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004b9a:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8004b9e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8004ba2:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	bf08      	it	eq
 8004baa:	4662      	moveq	r2, ip
 8004bac:	f108 31ff 	add.w	r1, r8, #4294967295
 8004bb0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004bb4:	fb91 f1f0 	sdiv	r1, r1, r0
 8004bb8:	4429      	add	r1, r5
 8004bba:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 8004bbe:	fb0e 5501 	mla	r5, lr, r1, r5
 8004bc2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004bc6:	4403      	add	r3, r0
 8004bc8:	fb01 6104 	mla	r1, r1, r4, r6
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	fb93 f6f0 	sdiv	r6, r3, r0
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8004bd8:	fb06 3110 	mls	r1, r6, r0, r3
 8004bdc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004be0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004be4:	4562      	cmp	r2, ip
 8004be6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004bea:	bf08      	it	eq
 8004bec:	eeb0 6a48 	vmoveq.f32	s12, s16
 8004bf0:	1b9b      	subs	r3, r3, r6
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d070      	beq.n	8004cd8 <forward_conv2d_nl_pool+0x658>
 8004bf6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004bfa:	fb0e f803 	mul.w	r8, lr, r3
 8004bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c00:	fb00 fb01 	mul.w	fp, r0, r1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d067      	beq.n	8004cd8 <forward_conv2d_nl_pool+0x658>
 8004c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c0c:	18d3      	adds	r3, r2, r3
 8004c0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	673b      	str	r3, [r7, #112]	; 0x70
 8004c1e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	4413      	add	r3, r2
 8004c26:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	4413      	add	r3, r2
 8004c30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004c34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c38:	ecf3 7a01 	vldmia	r3!, {s15}
 8004c3c:	f1ba 0f00 	cmp.w	sl, #0
 8004c40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c44:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004c48:	f340 80a4 	ble.w	8004d94 <forward_conv2d_nl_pool+0x714>
 8004c4c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8004c50:	f04f 0c00 	mov.w	ip, #0
 8004c54:	2e00      	cmp	r6, #0
 8004c56:	dd19      	ble.n	8004c8c <forward_conv2d_nl_pool+0x60c>
 8004c58:	2100      	movs	r1, #0
 8004c5a:	eb00 040e 	add.w	r4, r0, lr
 8004c5e:	4284      	cmp	r4, r0
 8004c60:	d910      	bls.n	8004c84 <forward_conv2d_nl_pool+0x604>
 8004c62:	4603      	mov	r3, r0
 8004c64:	462a      	mov	r2, r5
 8004c66:	ecb3 7a01 	vldmia	r3!, {s14}
 8004c6a:	ecf2 6a01 	vldmia	r2!, {s13}
 8004c6e:	429c      	cmp	r4, r3
 8004c70:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004c74:	d8f7      	bhi.n	8004c66 <forward_conv2d_nl_pool+0x5e6>
 8004c76:	43c3      	mvns	r3, r0
 8004c78:	441c      	add	r4, r3
 8004c7a:	f024 0403 	bic.w	r4, r4, #3
 8004c7e:	3404      	adds	r4, #4
 8004c80:	4425      	add	r5, r4
 8004c82:	4420      	add	r0, r4
 8004c84:	3101      	adds	r1, #1
 8004c86:	428e      	cmp	r6, r1
 8004c88:	4448      	add	r0, r9
 8004c8a:	d1e6      	bne.n	8004c5a <forward_conv2d_nl_pool+0x5da>
 8004c8c:	f10c 0c01 	add.w	ip, ip, #1
 8004c90:	45e2      	cmp	sl, ip
 8004c92:	4458      	add	r0, fp
 8004c94:	4445      	add	r5, r8
 8004c96:	d1dd      	bne.n	8004c54 <forward_conv2d_nl_pool+0x5d4>
 8004c98:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ca0:	441d      	add	r5, r3
 8004ca2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ca6:	ece3 7a01 	vstmia	r3!, {s15}
 8004caa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d1be      	bne.n	8004c34 <forward_conv2d_nl_pool+0x5b4>
 8004cb6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004cba:	69f9      	ldr	r1, [r7, #28]
 8004cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cbe:	4472      	add	r2, lr
 8004cc0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004cc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cc6:	1a52      	subs	r2, r2, r1
 8004cc8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004ccc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	673b      	str	r3, [r7, #112]	; 0x70
 8004cd6:	d1a2      	bne.n	8004c1e <forward_conv2d_nl_pool+0x59e>
 8004cd8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004cdc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ce2:	4608      	mov	r0, r1
 8004ce4:	4410      	add	r0, r2
 8004ce6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004cea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8004cee:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8004cf2:	4401      	add	r1, r0
 8004cf4:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8004cf8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004cfc:	1a8a      	subs	r2, r1, r2
 8004cfe:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004d02:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004d06:	3301      	adds	r3, #1
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d0c:	f47f af1d 	bne.w	8004b4a <forward_conv2d_nl_pool+0x4ca>
 8004d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d18:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2a00      	cmp	r2, #0
 8004d20:	f000 8210 	beq.w	8005144 <forward_conv2d_nl_pool+0xac4>
 8004d24:	2400      	movs	r4, #0
 8004d26:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 8004d2a:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 8004d2e:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8004d32:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 8004d36:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8004d3a:	609e      	str	r6, [r3, #8]
 8004d3c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004d40:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8004d44:	462b      	mov	r3, r5
 8004d46:	4641      	mov	r1, r8
 8004d48:	4640      	mov	r0, r8
 8004d4a:	47a0      	blx	r4
 8004d4c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8004d50:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8004d54:	6859      	ldr	r1, [r3, #4]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8004d5c:	4405      	add	r5, r0
 8004d5e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8004d62:	0089      	lsls	r1, r1, #2
 8004d64:	4406      	add	r6, r0
 8004d66:	eba5 0c09 	sub.w	ip, r5, r9
 8004d6a:	1850      	adds	r0, r2, r1
 8004d6c:	45a4      	cmp	ip, r4
 8004d6e:	bfa8      	it	ge
 8004d70:	464d      	movge	r5, r9
 8004d72:	4286      	cmp	r6, r0
 8004d74:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8004d78:	bf28      	it	cs
 8004d7a:	1a76      	subcs	r6, r6, r1
 8004d7c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004d80:	3001      	adds	r0, #1
 8004d82:	4281      	cmp	r1, r0
 8004d84:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8004d88:	d1d7      	bne.n	8004d3a <forward_conv2d_nl_pool+0x6ba>
 8004d8a:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 8004d8e:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 8004d92:	e019      	b.n	8004dc8 <forward_conv2d_nl_pool+0x748>
 8004d94:	461a      	mov	r2, r3
 8004d96:	e781      	b.n	8004c9c <forward_conv2d_nl_pool+0x61c>
 8004d98:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004d9c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004da0:	fb90 f3f2 	sdiv	r3, r0, r2
 8004da4:	fb02 0313 	mls	r3, r2, r3, r0
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	4605      	mov	r5, r0
 8004dac:	fb93 f0f2 	sdiv	r0, r3, r2
 8004db0:	fb02 3010 	mls	r0, r2, r0, r3
 8004db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db6:	462e      	mov	r6, r5
 8004db8:	18c4      	adds	r4, r0, r3
 8004dba:	eb02 0805 	add.w	r8, r2, r5
 8004dbe:	e6d5      	b.n	8004b6c <forward_conv2d_nl_pool+0x4ec>
 8004dc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	609a      	str	r2, [r3, #8]
 8004dca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004dce:	3301      	adds	r3, #1
 8004dd0:	b21b      	sxth	r3, r3
 8004dd2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004de0:	f100 83bf 	bmi.w	8005562 <forward_conv2d_nl_pool+0xee2>
 8004de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004de8:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	f200 839d 	bhi.w	800552c <forward_conv2d_nl_pool+0xeac>
 8004df2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	6990      	ldr	r0, [r2, #24]
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e00:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8004e04:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	fa1f f188 	uxth.w	r1, r8
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e14:	9308      	str	r3, [sp, #32]
 8004e16:	9105      	str	r1, [sp, #20]
 8004e18:	2601      	movs	r6, #1
 8004e1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004e1e:	9607      	str	r6, [sp, #28]
 8004e20:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8004e24:	9506      	str	r5, [sp, #24]
 8004e26:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	1a64      	subs	r4, r4, r1
 8004e2e:	b2b1      	uxth	r1, r6
 8004e30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8004e3a:	b224      	sxth	r4, r4
 8004e3c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8004e40:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8004e44:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8004e48:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8004e4a:	47a0      	blx	r4
 8004e4c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8004e50:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8004e54:	688a      	ldr	r2, [r1, #8]
 8004e56:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004e58:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8004e5c:	fa0f f388 	sxth.w	r3, r8
 8004e60:	1af3      	subs	r3, r6, r3
 8004e62:	4422      	add	r2, r4
 8004e64:	462e      	mov	r6, r5
 8004e66:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8004e6a:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 8004e6e:	608a      	str	r2, [r1, #8]
 8004e70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004e74:	4426      	add	r6, r4
 8004e76:	b21b      	sxth	r3, r3
 8004e78:	1b2c      	subs	r4, r5, r4
 8004e7a:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8004e7e:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 8004e80:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8004e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e8c:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 8004e90:	3001      	adds	r0, #1
 8004e92:	442c      	add	r4, r5
 8004e94:	4283      	cmp	r3, r0
 8004e96:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8004e9a:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 8004e9e:	f63f adc7 	bhi.w	8004a30 <forward_conv2d_nl_pool+0x3b0>
 8004ea2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004eb0:	68d3      	ldr	r3, [r2, #12]
 8004eb2:	6093      	str	r3, [r2, #8]
 8004eb4:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	ecbd 8b10 	vpop	{d8-d15}
 8004ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ec4:	2901      	cmp	r1, #1
 8004ec6:	f47f add7 	bne.w	8004a78 <forward_conv2d_nl_pool+0x3f8>
 8004eca:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004ece:	2900      	cmp	r1, #0
 8004ed0:	f43f af76 	beq.w	8004dc0 <forward_conv2d_nl_pool+0x740>
 8004ed4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8004ed8:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8004edc:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004ee0:	1ad2      	subs	r2, r2, r3
 8004ee2:	1a8c      	subs	r4, r1, r2
 8004ee4:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8004ee8:	00b2      	lsls	r2, r6, #2
 8004eea:	fb02 f204 	mul.w	r2, r2, r4
 8004eee:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8004ef2:	fbb1 f1f0 	udiv	r1, r1, r0
 8004ef6:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8004efa:	460d      	mov	r5, r1
 8004efc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004efe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f00:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8004f04:	0082      	lsls	r2, r0, #2
 8004f06:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f08:	00ca      	lsls	r2, r1, #3
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	00aa      	lsls	r2, r5, #2
 8004f0e:	60ba      	str	r2, [r7, #8]
 8004f10:	fb03 f206 	mul.w	r2, r3, r6
 8004f14:	67ba      	str	r2, [r7, #120]	; 0x78
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f2a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f36:	2300      	movs	r3, #0
 8004f38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f2c0 8112 	blt.w	800516a <forward_conv2d_nl_pool+0xaea>
 8004f46:	2100      	movs	r1, #0
 8004f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8004f50:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8004f54:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8004f58:	4420      	add	r0, r4
 8004f5a:	4408      	add	r0, r1
 8004f5c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8004f60:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8004f64:	190c      	adds	r4, r1, r4
 8004f66:	42ac      	cmp	r4, r5
 8004f68:	bf28      	it	cs
 8004f6a:	462c      	movcs	r4, r5
 8004f6c:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8004f70:	0080      	lsls	r0, r0, #2
 8004f72:	1aa4      	subs	r4, r4, r2
 8004f74:	2d00      	cmp	r5, #0
 8004f76:	f000 80e9 	beq.w	800514c <forward_conv2d_nl_pool+0xacc>
 8004f7a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004f7e:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 8004f82:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8004f86:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004f8a:	42b5      	cmp	r5, r6
 8004f8c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8004f90:	eba3 0204 	sub.w	r2, r3, r4
 8004f94:	eba1 0104 	sub.w	r1, r1, r4
 8004f98:	bf08      	it	eq
 8004f9a:	eef0 3a48 	vmoveq.f32	s7, s16
 8004f9e:	462b      	mov	r3, r5
 8004fa0:	697d      	ldr	r5, [r7, #20]
 8004fa2:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8004fa6:	4428      	add	r0, r5
 8004fa8:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8004fac:	fb05 6e00 	mla	lr, r5, r0, r6
 8004fb0:	eb0e 000b 	add.w	r0, lr, fp
 8004fb4:	4586      	cmp	lr, r0
 8004fb6:	61f8      	str	r0, [r7, #28]
 8004fb8:	f080 80a5 	bcs.w	8005106 <forward_conv2d_nl_pool+0xa86>
 8004fbc:	0092      	lsls	r2, r2, #2
 8004fbe:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8004fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc4:	fb01 f10b 	mul.w	r1, r1, fp
 8004fc8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8004fcc:	f024 0803 	bic.w	r8, r4, #3
 8004fd0:	2a00      	cmp	r2, #0
 8004fd2:	f000 8098 	beq.w	8005106 <forward_conv2d_nl_pool+0xa86>
 8004fd6:	f108 32ff 	add.w	r2, r8, #4294967295
 8004fda:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004fdc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004fe0:	0892      	lsrs	r2, r2, #2
 8004fe2:	3201      	adds	r2, #1
 8004fe4:	4401      	add	r1, r0
 8004fe6:	fb02 f00a 	mul.w	r0, r2, sl
 8004fea:	6638      	str	r0, [r7, #96]	; 0x60
 8004fec:	0110      	lsls	r0, r2, #4
 8004fee:	0092      	lsls	r2, r2, #2
 8004ff0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004ff2:	1aca      	subs	r2, r1, r3
 8004ff4:	613a      	str	r2, [r7, #16]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	6738      	str	r0, [r7, #112]	; 0x70
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005000:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005006:	4413      	add	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4413      	add	r3, r2
 8005012:	677b      	str	r3, [r7, #116]	; 0x74
 8005014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005018:	ecf3 6a01 	vldmia	r3!, {s13}
 800501c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005020:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005024:	2b00      	cmp	r3, #0
 8005026:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800502a:	dd57      	ble.n	80050dc <forward_conv2d_nl_pool+0xa5c>
 800502c:	4676      	mov	r6, lr
 800502e:	f04f 0c00 	mov.w	ip, #0
 8005032:	f1b8 0f00 	cmp.w	r8, #0
 8005036:	f340 8087 	ble.w	8005148 <forward_conv2d_nl_pool+0xac8>
 800503a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800503e:	f109 0310 	add.w	r3, r9, #16
 8005042:	18b1      	adds	r1, r6, r2
 8005044:	2000      	movs	r0, #0
 8005046:	4632      	mov	r2, r6
 8005048:	eb02 050b 	add.w	r5, r2, fp
 800504c:	ed95 7a00 	vldr	s14, [r5]
 8005050:	ed53 7a03 	vldr	s15, [r3, #-12]
 8005054:	ed92 4a00 	vldr	s8, [r2]
 8005058:	ed53 4a04 	vldr	s9, [r3, #-16]
 800505c:	ed91 5a00 	vldr	s10, [r1]
 8005060:	ed53 5a02 	vldr	s11, [r3, #-8]
 8005064:	ed13 6a01 	vldr	s12, [r3, #-4]
 8005068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506c:	eb01 050b 	add.w	r5, r1, fp
 8005070:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005074:	3004      	adds	r0, #4
 8005076:	4540      	cmp	r0, r8
 8005078:	ed95 7a00 	vldr	s14, [r5]
 800507c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005080:	4452      	add	r2, sl
 8005082:	4451      	add	r1, sl
 8005084:	f103 0310 	add.w	r3, r3, #16
 8005088:	eee7 7a06 	vfma.f32	s15, s14, s12
 800508c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005090:	dbda      	blt.n	8005048 <forward_conv2d_nl_pool+0x9c8>
 8005092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005094:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005096:	441e      	add	r6, r3
 8005098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800509a:	4499      	add	r9, r3
 800509c:	42a0      	cmp	r0, r4
 800509e:	da11      	bge.n	80050c4 <forward_conv2d_nl_pool+0xa44>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4633      	mov	r3, r6
 80050a4:	4649      	mov	r1, r9
 80050a6:	edd3 7a00 	vldr	s15, [r3]
 80050aa:	ecb1 7a01 	vldmia	r1!, {s14}
 80050ae:	3201      	adds	r2, #1
 80050b0:	42a2      	cmp	r2, r4
 80050b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80050b6:	445b      	add	r3, fp
 80050b8:	d1f5      	bne.n	80050a6 <forward_conv2d_nl_pool+0xa26>
 80050ba:	1a20      	subs	r0, r4, r0
 80050bc:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80050c0:	fb00 660b 	mla	r6, r0, fp, r6
 80050c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050c8:	441e      	add	r6, r3
 80050ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050ce:	4499      	add	r9, r3
 80050d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80050d4:	f10c 0c01 	add.w	ip, ip, #1
 80050d8:	4563      	cmp	r3, ip
 80050da:	d1aa      	bne.n	8005032 <forward_conv2d_nl_pool+0x9b2>
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	4499      	add	r9, r3
 80050e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050e2:	ece3 6a01 	vstmia	r3!, {s13}
 80050e6:	677b      	str	r3, [r7, #116]	; 0x74
 80050e8:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d191      	bne.n	8005014 <forward_conv2d_nl_pool+0x994>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	f10e 0e04 	add.w	lr, lr, #4
 8005100:	459e      	cmp	lr, r3
 8005102:	f4ff af7d 	bcc.w	8005000 <forward_conv2d_nl_pool+0x980>
 8005106:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800510a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800510e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005112:	440a      	add	r2, r1
 8005114:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8005118:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800511c:	4608      	mov	r0, r1
 800511e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005122:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8005126:	4410      	add	r0, r2
 8005128:	1a8a      	subs	r2, r1, r2
 800512a:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800512e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005132:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8005136:	3301      	adds	r3, #1
 8005138:	429a      	cmp	r2, r3
 800513a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800513e:	f47f aefd 	bne.w	8004f3c <forward_conv2d_nl_pool+0x8bc>
 8005142:	e5e7      	b.n	8004d14 <forward_conv2d_nl_pool+0x694>
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	e63f      	b.n	8004dc8 <forward_conv2d_nl_pool+0x748>
 8005148:	2000      	movs	r0, #0
 800514a:	e7a7      	b.n	800509c <forward_conv2d_nl_pool+0xa1c>
 800514c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005150:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8005154:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005158:	1b19      	subs	r1, r3, r4
 800515a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800515e:	eef0 3a48 	vmov.f32	s7, s16
 8005162:	1b1a      	subs	r2, r3, r4
 8005164:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005168:	e71a      	b.n	8004fa0 <forward_conv2d_nl_pool+0x920>
 800516a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800516e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005170:	460a      	mov	r2, r1
 8005172:	440b      	add	r3, r1
 8005174:	e6ea      	b.n	8004f4c <forward_conv2d_nl_pool+0x8cc>
 8005176:	b168      	cbz	r0, 8005194 <forward_conv2d_nl_pool+0xb14>
 8005178:	6882      	ldr	r2, [r0, #8]
 800517a:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800517e:	2201      	movs	r2, #1
 8005180:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8005184:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005188:	f7ff bb29 	b.w	80047de <forward_conv2d_nl_pool+0x15e>
 800518c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8005190:	f7ff bb08 	b.w	80047a4 <forward_conv2d_nl_pool+0x124>
 8005194:	2201      	movs	r2, #1
 8005196:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800519a:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800519e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80051a2:	f7ff bb1c 	b.w	80047de <forward_conv2d_nl_pool+0x15e>
 80051a6:	3118      	adds	r1, #24
 80051a8:	d008      	beq.n	80051bc <forward_conv2d_nl_pool+0xb3c>
 80051aa:	462a      	mov	r2, r5
 80051ac:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 80051b0:	4629      	mov	r1, r5
 80051b2:	f7ff ba93 	b.w	80046dc <forward_conv2d_nl_pool+0x5c>
 80051b6:	4691      	mov	r9, r2
 80051b8:	f7ff ba7d 	b.w	80046b6 <forward_conv2d_nl_pool+0x36>
 80051bc:	68cb      	ldr	r3, [r1, #12]
 80051be:	deff      	udf	#255	; 0xff
 80051c0:	2300      	movs	r3, #0
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	deff      	udf	#255	; 0xff
 80051c6:	4694      	mov	ip, r2
 80051c8:	f7ff ba6c 	b.w	80046a4 <forward_conv2d_nl_pool+0x24>
 80051cc:	6873      	ldr	r3, [r6, #4]
 80051ce:	deff      	udf	#255	; 0xff
 80051d0:	2200      	movs	r2, #0
 80051d2:	f7ff ba82 	b.w	80046da <forward_conv2d_nl_pool+0x5a>
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	deff      	udf	#255	; 0xff
 80051da:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80051de:	2a00      	cmp	r2, #0
 80051e0:	f43f ab60 	beq.w	80048a4 <forward_conv2d_nl_pool+0x224>
 80051e4:	2e03      	cmp	r6, #3
 80051e6:	d9eb      	bls.n	80051c0 <forward_conv2d_nl_pool+0xb40>
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	b323      	cbz	r3, 8005238 <forward_conv2d_nl_pool+0xbb8>
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	b313      	cbz	r3, 8005238 <forward_conv2d_nl_pool+0xbb8>
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80051f8:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005202:	9000      	str	r0, [sp, #0]
 8005204:	4673      	mov	r3, lr
 8005206:	4620      	mov	r0, r4
 8005208:	f7fe fa18 	bl	800363c <ai_dict_decompress_f32>
 800520c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005210:	b17c      	cbz	r4, 8005232 <forward_conv2d_nl_pool+0xbb2>
 8005212:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8005216:	881e      	ldrh	r6, [r3, #0]
 8005218:	f7ff bb44 	b.w	80048a4 <forward_conv2d_nl_pool+0x224>
 800521c:	b178      	cbz	r0, 800523e <forward_conv2d_nl_pool+0xbbe>
 800521e:	6881      	ldr	r1, [r0, #8]
 8005220:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8005224:	2201      	movs	r2, #1
 8005226:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800522a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800522e:	f7ff bad6 	b.w	80047de <forward_conv2d_nl_pool+0x15e>
 8005232:	881e      	ldrh	r6, [r3, #0]
 8005234:	f7ff bb36 	b.w	80048a4 <forward_conv2d_nl_pool+0x224>
 8005238:	2300      	movs	r3, #0
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	deff      	udf	#255	; 0xff
 800523e:	2201      	movs	r2, #1
 8005240:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8005244:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8005248:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800524c:	f7ff bac7 	b.w	80047de <forward_conv2d_nl_pool+0x15e>
 8005250:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005252:	2801      	cmp	r0, #1
 8005254:	f47f ac10 	bne.w	8004a78 <forward_conv2d_nl_pool+0x3f8>
 8005258:	1ad2      	subs	r2, r2, r3
 800525a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800525c:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8005260:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8005264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005266:	fb00 4101 	mla	r1, r0, r1, r4
 800526a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800526e:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8005272:	f080 81c4 	bcs.w	80055fe <forward_conv2d_nl_pool+0xf7e>
 8005276:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800527a:	2a00      	cmp	r2, #0
 800527c:	f43f ad4a 	beq.w	8004d14 <forward_conv2d_nl_pool+0x694>
 8005280:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800528a:	677b      	str	r3, [r7, #116]	; 0x74
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	663b      	str	r3, [r7, #96]	; 0x60
 8005290:	188b      	adds	r3, r1, r2
 8005292:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005294:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005298:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800529c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052a4:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 80052a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052b0:	2300      	movs	r3, #0
 80052b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 8133 	beq.w	8005526 <forward_conv2d_nl_pool+0xea6>
 80052c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052c4:	ed93 6a00 	vldr	s12, [r3]
 80052c8:	3304      	adds	r3, #4
 80052ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8101 	beq.w	80054da <forward_conv2d_nl_pool+0xe5a>
 80052d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052dc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80052e0:	eb03 0802 	add.w	r8, r3, r2
 80052e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80052f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052fe:	f04f 0b00 	mov.w	fp, #0
 8005302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005306:	2b00      	cmp	r3, #0
 8005308:	f2c0 8104 	blt.w	8005514 <forward_conv2d_nl_pool+0xe94>
 800530c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005310:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005312:	2300      	movs	r3, #0
 8005314:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8005318:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800531c:	eb02 0c04 	add.w	ip, r2, r4
 8005320:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005324:	4540      	cmp	r0, r8
 8005326:	bf94      	ite	ls
 8005328:	ebc3 0300 	rsbls	r3, r3, r0
 800532c:	ebc3 0308 	rsbhi	r3, r3, r8
 8005330:	eba2 0903 	sub.w	r9, r2, r3
 8005334:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8005338:	1ac4      	subs	r4, r0, r3
 800533a:	fb03 f302 	mul.w	r3, r3, r2
 800533e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8005342:	2a00      	cmp	r2, #0
 8005344:	f340 80e3 	ble.w	800550e <forward_conv2d_nl_pool+0xe8e>
 8005348:	f023 050f 	bic.w	r5, r3, #15
 800534c:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8005350:	1e68      	subs	r0, r5, #1
 8005352:	0900      	lsrs	r0, r0, #4
 8005354:	3001      	adds	r0, #1
 8005356:	fb06 f204 	mul.w	r2, r6, r4
 800535a:	673a      	str	r2, [r7, #112]	; 0x70
 800535c:	0102      	lsls	r2, r0, #4
 800535e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005360:	fb06 f909 	mul.w	r9, r6, r9
 8005364:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8005368:	eef0 6a46 	vmov.f32	s13, s12
 800536c:	f04f 0e00 	mov.w	lr, #0
 8005370:	4662      	mov	r2, ip
 8005372:	2d00      	cmp	r5, #0
 8005374:	f340 80c9 	ble.w	800550a <forward_conv2d_nl_pool+0xe8a>
 8005378:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800537c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8005380:	2600      	movs	r6, #0
 8005382:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8005386:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800538a:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800538e:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8005392:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8005396:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800539a:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800539e:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80053a2:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80053a6:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80053aa:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80053ae:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 80053b2:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 80053b6:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 80053ba:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 80053be:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 80053c2:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 80053c6:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 80053ca:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 80053ce:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80053d2:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80053d6:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80053da:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 80053de:	ed50 3a04 	vldr	s7, [r0, #-16]
 80053e2:	ed14 4a04 	vldr	s8, [r4, #-16]
 80053e6:	ed50 4a03 	vldr	s9, [r0, #-12]
 80053ea:	ed14 5a03 	vldr	s10, [r4, #-12]
 80053ee:	ed50 5a02 	vldr	s11, [r0, #-8]
 80053f2:	ed14 7a02 	vldr	s14, [r4, #-8]
 80053f6:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80053fa:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 80053fe:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8005402:	3610      	adds	r6, #16
 8005404:	42ae      	cmp	r6, r5
 8005406:	ed14 fa01 	vldr	s30, [r4, #-4]
 800540a:	ed50 ea01 	vldr	s29, [r0, #-4]
 800540e:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8005412:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8005416:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800541a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800541e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8005422:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8005426:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800542a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800542e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8005432:	eee0 7a81 	vfma.f32	s15, s1, s2
 8005436:	eee1 7a82 	vfma.f32	s15, s3, s4
 800543a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800543e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005442:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005446:	eee5 7a87 	vfma.f32	s15, s11, s14
 800544a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800544e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005452:	db96      	blt.n	8005382 <forward_conv2d_nl_pool+0xd02>
 8005454:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005456:	4451      	add	r1, sl
 8005458:	4452      	add	r2, sl
 800545a:	4283      	cmp	r3, r0
 800545c:	dd0f      	ble.n	800547e <forward_conv2d_nl_pool+0xdfe>
 800545e:	4604      	mov	r4, r0
 8005460:	468c      	mov	ip, r1
 8005462:	4616      	mov	r6, r2
 8005464:	ecb6 7a01 	vldmia	r6!, {s14}
 8005468:	ecfc 7a01 	vldmia	ip!, {s15}
 800546c:	3401      	adds	r4, #1
 800546e:	42a3      	cmp	r3, r4
 8005470:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005474:	d1f6      	bne.n	8005464 <forward_conv2d_nl_pool+0xde4>
 8005476:	1a18      	subs	r0, r3, r0
 8005478:	0080      	lsls	r0, r0, #2
 800547a:	4402      	add	r2, r0
 800547c:	4401      	add	r1, r0
 800547e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005480:	4402      	add	r2, r0
 8005482:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8005486:	f10e 0e01 	add.w	lr, lr, #1
 800548a:	4570      	cmp	r0, lr
 800548c:	4449      	add	r1, r9
 800548e:	f47f af70 	bne.w	8005372 <forward_conv2d_nl_pool+0xcf2>
 8005492:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005498:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800549c:	edc3 6a00 	vstr	s13, [r3]
 80054a0:	4608      	mov	r0, r1
 80054a2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80054a6:	440b      	add	r3, r1
 80054a8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80054ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80054ae:	4410      	add	r0, r2
 80054b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054b2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80054b6:	4608      	mov	r0, r1
 80054b8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80054bc:	4418      	add	r0, r3
 80054be:	1acb      	subs	r3, r1, r3
 80054c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80054c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80054cc:	f10b 0b01 	add.w	fp, fp, #1
 80054d0:	455b      	cmp	r3, fp
 80054d2:	eba8 0802 	sub.w	r8, r8, r2
 80054d6:	f47f af14 	bne.w	8005302 <forward_conv2d_nl_pool+0xc82>
 80054da:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80054de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054e4:	440a      	add	r2, r1
 80054e6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80054ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80054ee:	3204      	adds	r2, #4
 80054f0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80054f4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80054f8:	3301      	adds	r3, #1
 80054fa:	429a      	cmp	r2, r3
 80054fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005500:	f47f aed9 	bne.w	80052b6 <forward_conv2d_nl_pool+0xc36>
 8005504:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8005508:	e404      	b.n	8004d14 <forward_conv2d_nl_pool+0x694>
 800550a:	2000      	movs	r0, #0
 800550c:	e7a5      	b.n	800545a <forward_conv2d_nl_pool+0xdda>
 800550e:	eef0 6a46 	vmov.f32	s13, s12
 8005512:	e7be      	b.n	8005492 <forward_conv2d_nl_pool+0xe12>
 8005514:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005518:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800551c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005520:	eba8 0303 	sub.w	r3, r8, r3
 8005524:	e6f6      	b.n	8005314 <forward_conv2d_nl_pool+0xc94>
 8005526:	eeb0 6a48 	vmov.f32	s12, s16
 800552a:	e6d0      	b.n	80052ce <forward_conv2d_nl_pool+0xc4e>
 800552c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005534:	4611      	mov	r1, r2
 8005536:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800553a:	4419      	add	r1, r3
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005542:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005548:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800554c:	4413      	add	r3, r2
 800554e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005552:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005556:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800555a:	4293      	cmp	r3, r2
 800555c:	f63f aa68 	bhi.w	8004a30 <forward_conv2d_nl_pool+0x3b0>
 8005560:	e49f      	b.n	8004ea2 <forward_conv2d_nl_pool+0x822>
 8005562:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005566:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800556a:	699a      	ldr	r2, [r3, #24]
 800556c:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8005570:	68d1      	ldr	r1, [r2, #12]
 8005572:	6853      	ldr	r3, [r2, #4]
 8005574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005576:	fb00 4012 	mls	r0, r0, r2, r4
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4281      	cmp	r1, r0
 800557e:	bf88      	it	hi
 8005580:	18c0      	addhi	r0, r0, r3
 8005582:	4281      	cmp	r1, r0
 8005584:	eb01 0203 	add.w	r2, r1, r3
 8005588:	d216      	bcs.n	80055b8 <forward_conv2d_nl_pool+0xf38>
 800558a:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 800558e:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8005592:	42a1      	cmp	r1, r4
 8005594:	d010      	beq.n	80055b8 <forward_conv2d_nl_pool+0xf38>
 8005596:	4290      	cmp	r0, r2
 8005598:	d20e      	bcs.n	80055b8 <forward_conv2d_nl_pool+0xf38>
 800559a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800559e:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 80055a2:	f850 3b04 	ldr.w	r3, [r0], #4
 80055a6:	f841 3b04 	str.w	r3, [r1], #4
 80055aa:	69a2      	ldr	r2, [r4, #24]
 80055ac:	6853      	ldr	r3, [r2, #4]
 80055ae:	68d2      	ldr	r2, [r2, #12]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	4282      	cmp	r2, r0
 80055b6:	d8f4      	bhi.n	80055a2 <forward_conv2d_nl_pool+0xf22>
 80055b8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80055bc:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80055c0:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 80055c4:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80055c6:	4420      	add	r0, r4
 80055c8:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80055cc:	1a40      	subs	r0, r0, r1
 80055ce:	4421      	add	r1, r4
 80055d0:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 80055d4:	442c      	add	r4, r5
 80055d6:	b209      	sxth	r1, r1
 80055d8:	b200      	sxth	r0, r0
 80055da:	4294      	cmp	r4, r2
 80055dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80055e0:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 80055e4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80055e8:	4621      	mov	r1, r4
 80055ea:	f4ff abfb 	bcc.w	8004de4 <forward_conv2d_nl_pool+0x764>
 80055ee:	425b      	negs	r3, r3
 80055f0:	4419      	add	r1, r3
 80055f2:	4291      	cmp	r1, r2
 80055f4:	d2fc      	bcs.n	80055f0 <forward_conv2d_nl_pool+0xf70>
 80055f6:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 80055fa:	f7ff bbf3 	b.w	8004de4 <forward_conv2d_nl_pool+0x764>
 80055fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005602:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8005606:	320a      	adds	r2, #10
 8005608:	f022 0207 	bic.w	r2, r2, #7
 800560c:	ebad 0d02 	sub.w	sp, sp, r2
 8005610:	aa0a      	add	r2, sp, #40	; 0x28
 8005612:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005616:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800561a:	2a00      	cmp	r2, #0
 800561c:	f000 8153 	beq.w	80058c6 <forward_conv2d_nl_pool+0x1246>
 8005620:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005624:	f8c7 b01c 	str.w	fp, [r7, #28]
 8005628:	fb02 f303 	mul.w	r3, r2, r3
 800562c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800562e:	663b      	str	r3, [r7, #96]	; 0x60
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	65bb      	str	r3, [r7, #88]	; 0x58
 8005634:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005638:	f8c7 a014 	str.w	sl, [r7, #20]
 800563c:	4413      	add	r3, r2
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005640:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005644:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800564c:	67bb      	str	r3, [r7, #120]	; 0x78
 800564e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005652:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005656:	2300      	movs	r3, #0
 8005658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800565c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005660:	b13b      	cbz	r3, 8005672 <forward_conv2d_nl_pool+0xff2>
 8005662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005666:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800566a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800566e:	f000 fff1 	bl	8006654 <memcpy>
 8005672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8137 	beq.w	80058ea <forward_conv2d_nl_pool+0x126a>
 800567c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800567e:	ed93 6a00 	vldr	s12, [r3]
 8005682:	3304      	adds	r3, #4
 8005684:	67bb      	str	r3, [r7, #120]	; 0x78
 8005686:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8101 	beq.w	8005892 <forward_conv2d_nl_pool+0x1212>
 8005690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005694:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005698:	eb03 0802 	add.w	r8, r3, r2
 800569c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800569e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ac:	677b      	str	r3, [r7, #116]	; 0x74
 80056ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80056b6:	f04f 0b00 	mov.w	fp, #0
 80056ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f2c0 810a 	blt.w	80058d8 <forward_conv2d_nl_pool+0x1258>
 80056c4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80056c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056ca:	2300      	movs	r3, #0
 80056cc:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 80056d0:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80056d4:	eb02 0c04 	add.w	ip, r2, r4
 80056d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80056dc:	4540      	cmp	r0, r8
 80056de:	bf94      	ite	ls
 80056e0:	ebc3 0300 	rsbls	r3, r3, r0
 80056e4:	ebc3 0308 	rsbhi	r3, r3, r8
 80056e8:	eba2 0903 	sub.w	r9, r2, r3
 80056ec:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80056f0:	1ac4      	subs	r4, r0, r3
 80056f2:	fb03 f302 	mul.w	r3, r3, r2
 80056f6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80056fa:	2a00      	cmp	r2, #0
 80056fc:	f340 80e9 	ble.w	80058d2 <forward_conv2d_nl_pool+0x1252>
 8005700:	f023 050f 	bic.w	r5, r3, #15
 8005704:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8005708:	1e68      	subs	r0, r5, #1
 800570a:	0900      	lsrs	r0, r0, #4
 800570c:	3001      	adds	r0, #1
 800570e:	fb06 f204 	mul.w	r2, r6, r4
 8005712:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005714:	0102      	lsls	r2, r0, #4
 8005716:	62ba      	str	r2, [r7, #40]	; 0x28
 8005718:	fb06 f909 	mul.w	r9, r6, r9
 800571c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8005720:	eef0 6a46 	vmov.f32	s13, s12
 8005724:	f04f 0e00 	mov.w	lr, #0
 8005728:	4662      	mov	r2, ip
 800572a:	2d00      	cmp	r5, #0
 800572c:	f340 80cf 	ble.w	80058ce <forward_conv2d_nl_pool+0x124e>
 8005730:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8005734:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8005738:	2600      	movs	r6, #0
 800573a:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800573e:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8005742:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8005746:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800574a:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800574e:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8005752:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8005756:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800575a:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800575e:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8005762:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8005766:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800576a:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800576e:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8005772:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8005776:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800577a:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800577e:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8005782:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8005786:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800578a:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800578e:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8005792:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8005796:	ed50 3a04 	vldr	s7, [r0, #-16]
 800579a:	ed14 4a04 	vldr	s8, [r4, #-16]
 800579e:	ed54 4a03 	vldr	s9, [r4, #-12]
 80057a2:	ed10 5a03 	vldr	s10, [r0, #-12]
 80057a6:	ed50 5a02 	vldr	s11, [r0, #-8]
 80057aa:	ed14 7a02 	vldr	s14, [r4, #-8]
 80057ae:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80057b2:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 80057b6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80057ba:	3610      	adds	r6, #16
 80057bc:	42ae      	cmp	r6, r5
 80057be:	ed14 fa01 	vldr	s30, [r4, #-4]
 80057c2:	ed50 ea01 	vldr	s29, [r0, #-4]
 80057c6:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80057ca:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80057ce:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80057d2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80057d6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80057da:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80057de:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80057e2:	eee9 7a89 	vfma.f32	s15, s19, s18
 80057e6:	eee8 7a80 	vfma.f32	s15, s17, s0
 80057ea:	eee0 7a81 	vfma.f32	s15, s1, s2
 80057ee:	eee1 7a82 	vfma.f32	s15, s3, s4
 80057f2:	eee2 7a83 	vfma.f32	s15, s5, s6
 80057f6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80057fa:	eee4 7a85 	vfma.f32	s15, s9, s10
 80057fe:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005802:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8005806:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800580a:	db96      	blt.n	800573a <forward_conv2d_nl_pool+0x10ba>
 800580c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580e:	4451      	add	r1, sl
 8005810:	4452      	add	r2, sl
 8005812:	4283      	cmp	r3, r0
 8005814:	dd0f      	ble.n	8005836 <forward_conv2d_nl_pool+0x11b6>
 8005816:	4604      	mov	r4, r0
 8005818:	468c      	mov	ip, r1
 800581a:	4616      	mov	r6, r2
 800581c:	ecb6 7a01 	vldmia	r6!, {s14}
 8005820:	ecfc 7a01 	vldmia	ip!, {s15}
 8005824:	3401      	adds	r4, #1
 8005826:	42a3      	cmp	r3, r4
 8005828:	eee7 6a27 	vfma.f32	s13, s14, s15
 800582c:	d1f6      	bne.n	800581c <forward_conv2d_nl_pool+0x119c>
 800582e:	1a18      	subs	r0, r3, r0
 8005830:	0080      	lsls	r0, r0, #2
 8005832:	4402      	add	r2, r0
 8005834:	4401      	add	r1, r0
 8005836:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005838:	4402      	add	r2, r0
 800583a:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800583e:	f10e 0e01 	add.w	lr, lr, #1
 8005842:	4570      	cmp	r0, lr
 8005844:	4449      	add	r1, r9
 8005846:	f47f af70 	bne.w	800572a <forward_conv2d_nl_pool+0x10aa>
 800584a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800584e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005850:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005854:	edc3 6a00 	vstr	s13, [r3]
 8005858:	4608      	mov	r0, r1
 800585a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800585e:	440b      	add	r3, r1
 8005860:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005864:	677b      	str	r3, [r7, #116]	; 0x74
 8005866:	4410      	add	r0, r2
 8005868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800586e:	4608      	mov	r0, r1
 8005870:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005874:	4418      	add	r0, r3
 8005876:	1acb      	subs	r3, r1, r3
 8005878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800587c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005880:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8005884:	f10b 0b01 	add.w	fp, fp, #1
 8005888:	455b      	cmp	r3, fp
 800588a:	eba8 0802 	sub.w	r8, r8, r2
 800588e:	f47f af14 	bne.w	80056ba <forward_conv2d_nl_pool+0x103a>
 8005892:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005896:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800589a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800589e:	440a      	add	r2, r1
 80058a0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80058a4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80058a8:	3204      	adds	r2, #4
 80058aa:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80058ae:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80058b2:	3301      	adds	r3, #1
 80058b4:	429a      	cmp	r2, r3
 80058b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ba:	f47f aecf 	bne.w	800565c <forward_conv2d_nl_pool+0xfdc>
 80058be:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 80058c2:	f8d7 a014 	ldr.w	sl, [r7, #20]
 80058c6:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 80058ca:	f7ff ba23 	b.w	8004d14 <forward_conv2d_nl_pool+0x694>
 80058ce:	2000      	movs	r0, #0
 80058d0:	e79f      	b.n	8005812 <forward_conv2d_nl_pool+0x1192>
 80058d2:	eef0 6a46 	vmov.f32	s13, s12
 80058d6:	e7b8      	b.n	800584a <forward_conv2d_nl_pool+0x11ca>
 80058d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80058dc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80058e0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80058e4:	eba8 0303 	sub.w	r3, r8, r3
 80058e8:	e6f0      	b.n	80056cc <forward_conv2d_nl_pool+0x104c>
 80058ea:	eeb0 6a48 	vmov.f32	s12, s16
 80058ee:	e6ca      	b.n	8005686 <forward_conv2d_nl_pool+0x1006>

080058f0 <forward_dense>:
 80058f0:	6982      	ldr	r2, [r0, #24]
 80058f2:	8813      	ldrh	r3, [r2, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 81ca 	beq.w	8005c8e <forward_dense+0x39e>
 80058fa:	6852      	ldr	r2, [r2, #4]
 80058fc:	6850      	ldr	r0, [r2, #4]
 80058fe:	b100      	cbz	r0, 8005902 <forward_dense+0x12>
 8005900:	6800      	ldr	r0, [r0, #0]
 8005902:	2b01      	cmp	r3, #1
 8005904:	f240 81c0 	bls.w	8005c88 <forward_dense+0x398>
 8005908:	6911      	ldr	r1, [r2, #16]
 800590a:	b101      	cbz	r1, 800590e <forward_dense+0x1e>
 800590c:	6809      	ldr	r1, [r1, #0]
 800590e:	2b02      	cmp	r3, #2
 8005910:	f000 81bf 	beq.w	8005c92 <forward_dense+0x3a2>
 8005914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005918:	ed2d 8b10 	vpush	{d8-d15}
 800591c:	69d3      	ldr	r3, [r2, #28]
 800591e:	b091      	sub	sp, #68	; 0x44
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 820b 	beq.w	8005d3c <forward_dense+0x44c>
 8005926:	681c      	ldr	r4, [r3, #0]
 8005928:	9408      	str	r4, [sp, #32]
 800592a:	f112 0418 	adds.w	r4, r2, #24
 800592e:	f000 81df 	beq.w	8005cf0 <forward_dense+0x400>
 8005932:	8b12      	ldrh	r2, [r2, #24]
 8005934:	2a01      	cmp	r2, #1
 8005936:	f240 81fe 	bls.w	8005d36 <forward_dense+0x446>
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 81da 	beq.w	8005cf4 <forward_dense+0x404>
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	9306      	str	r3, [sp, #24]
 8005944:	9b08      	ldr	r3, [sp, #32]
 8005946:	68cc      	ldr	r4, [r1, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	68c5      	ldr	r5, [r0, #12]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005952:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005956:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 800595a:	f3c2 5541 	ubfx	r5, r2, #21, #2
 800595e:	fa4c f505 	asr.w	r5, ip, r5
 8005962:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8005966:	950b      	str	r5, [sp, #44]	; 0x2c
 8005968:	2a04      	cmp	r2, #4
 800596a:	fb07 f506 	mul.w	r5, r7, r6
 800596e:	6864      	ldr	r4, [r4, #4]
 8005970:	9507      	str	r5, [sp, #28]
 8005972:	f000 81dd 	beq.w	8005d30 <forward_dense+0x440>
 8005976:	2a08      	cmp	r2, #8
 8005978:	f000 81da 	beq.w	8005d30 <forward_dense+0x440>
 800597c:	f04f 0a00 	mov.w	sl, #0
 8005980:	698a      	ldr	r2, [r1, #24]
 8005982:	6981      	ldr	r1, [r0, #24]
 8005984:	6890      	ldr	r0, [r2, #8]
 8005986:	9a08      	ldr	r2, [sp, #32]
 8005988:	9004      	str	r0, [sp, #16]
 800598a:	6952      	ldr	r2, [r2, #20]
 800598c:	688f      	ldr	r7, [r1, #8]
 800598e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005992:	00a2      	lsls	r2, r4, #2
 8005994:	9209      	str	r2, [sp, #36]	; 0x24
 8005996:	1886      	adds	r6, r0, r2
 8005998:	9a07      	ldr	r2, [sp, #28]
 800599a:	2a00      	cmp	r2, #0
 800599c:	f000 81c3 	beq.w	8005d26 <forward_dense+0x436>
 80059a0:	f1a8 0210 	sub.w	r2, r8, #16
 80059a4:	0912      	lsrs	r2, r2, #4
 80059a6:	3201      	adds	r2, #1
 80059a8:	0192      	lsls	r2, r2, #6
 80059aa:	920c      	str	r2, [sp, #48]	; 0x30
 80059ac:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80059b0:	920a      	str	r2, [sp, #40]	; 0x28
 80059b2:	689d      	ldr	r5, [r3, #8]
 80059b4:	9b06      	ldr	r3, [sp, #24]
 80059b6:	eddf aad0 	vldr	s21, [pc, #832]	; 8005cf8 <forward_dense+0x408>
 80059ba:	2200      	movs	r2, #0
 80059bc:	9205      	str	r2, [sp, #20]
 80059be:	f008 020f 	and.w	r2, r8, #15
 80059c2:	920d      	str	r2, [sp, #52]	; 0x34
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d043      	beq.n	8005a50 <forward_dense+0x160>
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	689c      	ldr	r4, [r3, #8]
 80059cc:	9b04      	ldr	r3, [sp, #16]
 80059ce:	f1ba 0f00 	cmp.w	sl, #0
 80059d2:	d042      	beq.n	8005a5a <forward_dense+0x16a>
 80059d4:	42b3      	cmp	r3, r6
 80059d6:	d22a      	bcs.n	8005a2e <forward_dense+0x13e>
 80059d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059da:	469b      	mov	fp, r3
 80059dc:	ab0f      	add	r3, sp, #60	; 0x3c
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	2a04      	cmp	r2, #4
 80059e2:	4633      	mov	r3, r6
 80059e4:	4646      	mov	r6, r8
 80059e6:	4698      	mov	r8, r3
 80059e8:	f000 8156 	beq.w	8005c98 <forward_dense+0x3a8>
 80059ec:	2c00      	cmp	r4, #0
 80059ee:	f000 8185 	beq.w	8005cfc <forward_dense+0x40c>
 80059f2:	f8d4 c000 	ldr.w	ip, [r4]
 80059f6:	9803      	ldr	r0, [sp, #12]
 80059f8:	9600      	str	r6, [sp, #0]
 80059fa:	463b      	mov	r3, r7
 80059fc:	4629      	mov	r1, r5
 80059fe:	4652      	mov	r2, sl
 8005a00:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005a04:	f7fd fc8e 	bl	8003324 <ai_dict8_dot_array_f32>
 8005a08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a0a:	f84b 3b04 	str.w	r3, [fp], #4
 8005a0e:	45c3      	cmp	fp, r8
 8005a10:	f104 0404 	add.w	r4, r4, #4
 8005a14:	444d      	add	r5, r9
 8005a16:	d3e9      	bcc.n	80059ec <forward_dense+0xfc>
 8005a18:	4643      	mov	r3, r8
 8005a1a:	46b0      	mov	r8, r6
 8005a1c:	461e      	mov	r6, r3
 8005a1e:	9a04      	ldr	r2, [sp, #16]
 8005a20:	43d3      	mvns	r3, r2
 8005a22:	4433      	add	r3, r6
 8005a24:	f023 0303 	bic.w	r3, r3, #3
 8005a28:	3304      	adds	r3, #4
 8005a2a:	18d3      	adds	r3, r2, r3
 8005a2c:	9304      	str	r3, [sp, #16]
 8005a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a30:	9b05      	ldr	r3, [sp, #20]
 8005a32:	4417      	add	r7, r2
 8005a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a36:	4416      	add	r6, r2
 8005a38:	9a07      	ldr	r2, [sp, #28]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	9305      	str	r3, [sp, #20]
 8005a40:	f000 8171 	beq.w	8005d26 <forward_dense+0x436>
 8005a44:	9b08      	ldr	r3, [sp, #32]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	689d      	ldr	r5, [r3, #8]
 8005a4a:	9b06      	ldr	r3, [sp, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1bb      	bne.n	80059c8 <forward_dense+0xd8>
 8005a50:	461c      	mov	r4, r3
 8005a52:	9b04      	ldr	r3, [sp, #16]
 8005a54:	f1ba 0f00 	cmp.w	sl, #0
 8005a58:	d1bc      	bne.n	80059d4 <forward_dense+0xe4>
 8005a5a:	42b3      	cmp	r3, r6
 8005a5c:	d2e7      	bcs.n	8005a2e <forward_dense+0x13e>
 8005a5e:	4618      	mov	r0, r3
 8005a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a62:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8005a66:	eb07 0c03 	add.w	ip, r7, r3
 8005a6a:	469e      	mov	lr, r3
 8005a6c:	2c00      	cmp	r4, #0
 8005a6e:	f000 80ff 	beq.w	8005c70 <forward_dense+0x380>
 8005a72:	f1b8 0f0f 	cmp.w	r8, #15
 8005a76:	edd4 fa00 	vldr	s31, [r4]
 8005a7a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8005cf8 <forward_dense+0x408>
 8005a7e:	f104 0404 	add.w	r4, r4, #4
 8005a82:	f240 80fd 	bls.w	8005c80 <forward_dense+0x390>
 8005a86:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005a8a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005a8e:	4641      	mov	r1, r8
 8005a90:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8005a94:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005a98:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8005a9c:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8005aa0:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8005aa4:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8005aa8:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8005aac:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8005ab0:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8005ab4:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8005ab8:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8005abc:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8005ac0:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8005ac4:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8005ac8:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8005acc:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8005ad0:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8005ad4:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8005ad8:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8005adc:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8005ae0:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8005ae4:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8005ae8:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8005aec:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005af0:	ed52 4a04 	vldr	s9, [r2, #-16]
 8005af4:	ed12 5a03 	vldr	s10, [r2, #-12]
 8005af8:	ed53 5a03 	vldr	s11, [r3, #-12]
 8005afc:	ed12 6a02 	vldr	s12, [r2, #-8]
 8005b00:	ed13 7a02 	vldr	s14, [r3, #-8]
 8005b04:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8005b08:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8005b0c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005b10:	3910      	subs	r1, #16
 8005b12:	290f      	cmp	r1, #15
 8005b14:	ed53 ea01 	vldr	s29, [r3, #-4]
 8005b18:	ed12 ea01 	vldr	s28, [r2, #-4]
 8005b1c:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8005b20:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005b24:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005b28:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8005b2c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8005b30:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8005b34:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005b38:	eee8 7a88 	vfma.f32	s15, s17, s16
 8005b3c:	eee0 7a20 	vfma.f32	s15, s0, s1
 8005b40:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005b44:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005b48:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005b4c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005b50:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005b54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005b58:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005b5c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b60:	d896      	bhi.n	8005a90 <forward_dense+0x1a0>
 8005b62:	eb05 010e 	add.w	r1, r5, lr
 8005b66:	465b      	mov	r3, fp
 8005b68:	4662      	mov	r2, ip
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d075      	beq.n	8005c5a <forward_dense+0x36a>
 8005b6e:	ed91 7a00 	vldr	s14, [r1]
 8005b72:	edd2 7a00 	vldr	s15, [r2]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b7c:	d06d      	beq.n	8005c5a <forward_dense+0x36a>
 8005b7e:	ed91 7a01 	vldr	s14, [r1, #4]
 8005b82:	edd2 7a01 	vldr	s15, [r2, #4]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b8c:	d065      	beq.n	8005c5a <forward_dense+0x36a>
 8005b8e:	ed91 7a02 	vldr	s14, [r1, #8]
 8005b92:	edd2 7a02 	vldr	s15, [r2, #8]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b9c:	d05d      	beq.n	8005c5a <forward_dense+0x36a>
 8005b9e:	ed91 7a03 	vldr	s14, [r1, #12]
 8005ba2:	edd2 7a03 	vldr	s15, [r2, #12]
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bac:	d055      	beq.n	8005c5a <forward_dense+0x36a>
 8005bae:	ed91 7a04 	vldr	s14, [r1, #16]
 8005bb2:	edd2 7a04 	vldr	s15, [r2, #16]
 8005bb6:	2b05      	cmp	r3, #5
 8005bb8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bbc:	d04d      	beq.n	8005c5a <forward_dense+0x36a>
 8005bbe:	ed91 7a05 	vldr	s14, [r1, #20]
 8005bc2:	edd2 7a05 	vldr	s15, [r2, #20]
 8005bc6:	2b06      	cmp	r3, #6
 8005bc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bcc:	d045      	beq.n	8005c5a <forward_dense+0x36a>
 8005bce:	ed91 7a06 	vldr	s14, [r1, #24]
 8005bd2:	edd2 7a06 	vldr	s15, [r2, #24]
 8005bd6:	2b07      	cmp	r3, #7
 8005bd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bdc:	d03d      	beq.n	8005c5a <forward_dense+0x36a>
 8005bde:	ed91 7a07 	vldr	s14, [r1, #28]
 8005be2:	edd2 7a07 	vldr	s15, [r2, #28]
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bec:	d035      	beq.n	8005c5a <forward_dense+0x36a>
 8005bee:	ed91 7a08 	vldr	s14, [r1, #32]
 8005bf2:	edd2 7a08 	vldr	s15, [r2, #32]
 8005bf6:	2b09      	cmp	r3, #9
 8005bf8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bfc:	d02d      	beq.n	8005c5a <forward_dense+0x36a>
 8005bfe:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8005c02:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8005c06:	2b0a      	cmp	r3, #10
 8005c08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005c0c:	d025      	beq.n	8005c5a <forward_dense+0x36a>
 8005c0e:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8005c12:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8005c16:	2b0b      	cmp	r3, #11
 8005c18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005c1c:	d01d      	beq.n	8005c5a <forward_dense+0x36a>
 8005c1e:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8005c22:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8005c26:	2b0c      	cmp	r3, #12
 8005c28:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005c2c:	d015      	beq.n	8005c5a <forward_dense+0x36a>
 8005c2e:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8005c32:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005c36:	2b0d      	cmp	r3, #13
 8005c38:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005c3c:	d00d      	beq.n	8005c5a <forward_dense+0x36a>
 8005c3e:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8005c42:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005c46:	2b0e      	cmp	r3, #14
 8005c48:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005c4c:	d005      	beq.n	8005c5a <forward_dense+0x36a>
 8005c4e:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8005c52:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005c56:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005c5a:	444d      	add	r5, r9
 8005c5c:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8005c60:	ece0 6a01 	vstmia	r0!, {s13}
 8005c64:	42b0      	cmp	r0, r6
 8005c66:	f4bf aeda 	bcs.w	8005a1e <forward_dense+0x12e>
 8005c6a:	2c00      	cmp	r4, #0
 8005c6c:	f47f af01 	bne.w	8005a72 <forward_dense+0x182>
 8005c70:	f1b8 0f0f 	cmp.w	r8, #15
 8005c74:	eef0 fa6a 	vmov.f32	s31, s21
 8005c78:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005cf8 <forward_dense+0x408>
 8005c7c:	f63f af03 	bhi.w	8005a86 <forward_dense+0x196>
 8005c80:	4643      	mov	r3, r8
 8005c82:	4629      	mov	r1, r5
 8005c84:	463a      	mov	r2, r7
 8005c86:	e770      	b.n	8005b6a <forward_dense+0x27a>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	deff      	udf	#255	; 0xff
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	deff      	udf	#255	; 0xff
 8005c92:	2300      	movs	r3, #0
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	deff      	udf	#255	; 0xff
 8005c98:	b1ac      	cbz	r4, 8005cc6 <forward_dense+0x3d6>
 8005c9a:	f8d4 c000 	ldr.w	ip, [r4]
 8005c9e:	9803      	ldr	r0, [sp, #12]
 8005ca0:	9600      	str	r6, [sp, #0]
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	4652      	mov	r2, sl
 8005ca8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005cac:	f7fd fc08 	bl	80034c0 <ai_dict4_dot_array_f32>
 8005cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cb2:	f84b 3b04 	str.w	r3, [fp], #4
 8005cb6:	45c3      	cmp	fp, r8
 8005cb8:	f104 0404 	add.w	r4, r4, #4
 8005cbc:	444d      	add	r5, r9
 8005cbe:	f4bf aeab 	bcs.w	8005a18 <forward_dense+0x128>
 8005cc2:	2c00      	cmp	r4, #0
 8005cc4:	d1e9      	bne.n	8005c9a <forward_dense+0x3aa>
 8005cc6:	4634      	mov	r4, r6
 8005cc8:	4646      	mov	r6, r8
 8005cca:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005cce:	9400      	str	r4, [sp, #0]
 8005cd0:	463b      	mov	r3, r7
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005cdc:	f7fd fbf0 	bl	80034c0 <ai_dict4_dot_array_f32>
 8005ce0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ce2:	f84b 3b04 	str.w	r3, [fp], #4
 8005ce6:	45b3      	cmp	fp, r6
 8005ce8:	444d      	add	r5, r9
 8005cea:	d3f0      	bcc.n	8005cce <forward_dense+0x3de>
 8005cec:	46a0      	mov	r8, r4
 8005cee:	e696      	b.n	8005a1e <forward_dense+0x12e>
 8005cf0:	9406      	str	r4, [sp, #24]
 8005cf2:	e627      	b.n	8005944 <forward_dense+0x54>
 8005cf4:	9306      	str	r3, [sp, #24]
 8005cf6:	e625      	b.n	8005944 <forward_dense+0x54>
 8005cf8:	00000000 	.word	0x00000000
 8005cfc:	4634      	mov	r4, r6
 8005cfe:	4646      	mov	r6, r8
 8005d00:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d04:	9400      	str	r4, [sp, #0]
 8005d06:	463b      	mov	r3, r7
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4652      	mov	r2, sl
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005d12:	f7fd fb07 	bl	8003324 <ai_dict8_dot_array_f32>
 8005d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d18:	f84b 3b04 	str.w	r3, [fp], #4
 8005d1c:	45b3      	cmp	fp, r6
 8005d1e:	444d      	add	r5, r9
 8005d20:	d3f0      	bcc.n	8005d04 <forward_dense+0x414>
 8005d22:	46a0      	mov	r8, r4
 8005d24:	e67b      	b.n	8005a1e <forward_dense+0x12e>
 8005d26:	b011      	add	sp, #68	; 0x44
 8005d28:	ecbd 8b10 	vpop	{d8-d15}
 8005d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d30:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8005d34:	e624      	b.n	8005980 <forward_dense+0x90>
 8005d36:	2300      	movs	r3, #0
 8005d38:	9306      	str	r3, [sp, #24]
 8005d3a:	e603      	b.n	8005944 <forward_dense+0x54>
 8005d3c:	9308      	str	r3, [sp, #32]
 8005d3e:	e5f4      	b.n	800592a <forward_dense+0x3a>

08005d40 <nl_func_relu_array_f32>:
 8005d40:	b410      	push	{r4}
 8005d42:	698c      	ldr	r4, [r1, #24]
 8005d44:	6981      	ldr	r1, [r0, #24]
 8005d46:	68a3      	ldr	r3, [r4, #8]
 8005d48:	6889      	ldr	r1, [r1, #8]
 8005d4a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005d4e:	3a01      	subs	r2, #1
 8005d50:	0092      	lsls	r2, r2, #2
 8005d52:	189b      	adds	r3, r3, r2
 8005d54:	d216      	bcs.n	8005d84 <nl_func_relu_array_f32+0x44>
 8005d56:	3204      	adds	r2, #4
 8005d58:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005d8c <nl_func_relu_array_f32+0x4c>
 8005d5c:	4411      	add	r1, r2
 8005d5e:	3304      	adds	r3, #4
 8005d60:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005d64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6c:	bfb8      	it	lt
 8005d6e:	eef0 7a47 	vmovlt.f32	s15, s14
 8005d72:	ed61 7a01 	vstmdb	r1!, {s15}
 8005d76:	68a0      	ldr	r0, [r4, #8]
 8005d78:	f1a3 0208 	sub.w	r2, r3, #8
 8005d7c:	4290      	cmp	r0, r2
 8005d7e:	f1a3 0304 	sub.w	r3, r3, #4
 8005d82:	d9ed      	bls.n	8005d60 <nl_func_relu_array_f32+0x20>
 8005d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	00000000 	.word	0x00000000

08005d90 <nl_func_sm_array_f32>:
 8005d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	ed2d 8b04 	vpush	{d8-d9}
 8005d98:	b089      	sub	sp, #36	; 0x24
 8005d9a:	698f      	ldr	r7, [r1, #24]
 8005d9c:	6984      	ldr	r4, [r0, #24]
 8005d9e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8005da2:	68bd      	ldr	r5, [r7, #8]
 8005da4:	9402      	str	r4, [sp, #8]
 8005da6:	4626      	mov	r6, r4
 8005da8:	4696      	mov	lr, r2
 8005daa:	eba2 020c 	sub.w	r2, r2, ip
 8005dae:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8005db2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	68b6      	ldr	r6, [r6, #8]
 8005db8:	ebae 0e04 	sub.w	lr, lr, r4
 8005dbc:	4295      	cmp	r5, r2
 8005dbe:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8005dc2:	d354      	bcc.n	8005e6e <nl_func_sm_array_f32+0xde>
 8005dc4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005dc8:	f1cc 0200 	rsb	r2, ip, #0
 8005dcc:	00a4      	lsls	r4, r4, #2
 8005dce:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8005dd2:	9303      	str	r3, [sp, #12]
 8005dd4:	9204      	str	r2, [sp, #16]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4262      	negs	r2, r4
 8005dda:	9205      	str	r2, [sp, #20]
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8005de2:	9b02      	ldr	r3, [sp, #8]
 8005de4:	9a07      	ldr	r2, [sp, #28]
 8005de6:	60bd      	str	r5, [r7, #8]
 8005de8:	609e      	str	r6, [r3, #8]
 8005dea:	9b06      	ldr	r3, [sp, #24]
 8005dec:	6992      	ldr	r2, [r2, #24]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	6894      	ldr	r4, [r2, #8]
 8005df2:	9a03      	ldr	r2, [sp, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2a01      	cmp	r2, #1
 8005df8:	ed93 8a00 	vldr	s16, [r3]
 8005dfc:	d940      	bls.n	8005e80 <nl_func_sm_array_f32+0xf0>
 8005dfe:	9901      	ldr	r1, [sp, #4]
 8005e00:	1d1a      	adds	r2, r3, #4
 8005e02:	eb03 0b01 	add.w	fp, r3, r1
 8005e06:	ecf2 7a01 	vldmia	r2!, {s15}
 8005e0a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e12:	bfb8      	it	lt
 8005e14:	eeb0 8a67 	vmovlt.f32	s16, s15
 8005e18:	4593      	cmp	fp, r2
 8005e1a:	d1f4      	bne.n	8005e06 <nl_func_sm_array_f32+0x76>
 8005e1c:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8005e8c <nl_func_sm_array_f32+0xfc>
 8005e20:	469a      	mov	sl, r3
 8005e22:	46a1      	mov	r9, r4
 8005e24:	46a0      	mov	r8, r4
 8005e26:	ecba 0a01 	vldmia	sl!, {s0}
 8005e2a:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005e2e:	f003 f8f7 	bl	8009020 <expf>
 8005e32:	45d3      	cmp	fp, sl
 8005e34:	eca8 0a01 	vstmia	r8!, {s0}
 8005e38:	ee78 8a80 	vadd.f32	s17, s17, s0
 8005e3c:	d1f3      	bne.n	8005e26 <nl_func_sm_array_f32+0x96>
 8005e3e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e46:	d00b      	beq.n	8005e60 <nl_func_sm_array_f32+0xd0>
 8005e48:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8005e4c:	9b01      	ldr	r3, [sp, #4]
 8005e4e:	441c      	add	r4, r3
 8005e50:	edd9 7a00 	vldr	s15, [r9]
 8005e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e58:	ece9 7a01 	vstmia	r9!, {s15}
 8005e5c:	454c      	cmp	r4, r9
 8005e5e:	d1f7      	bne.n	8005e50 <nl_func_sm_array_f32+0xc0>
 8005e60:	9b04      	ldr	r3, [sp, #16]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	441d      	add	r5, r3
 8005e66:	9b05      	ldr	r3, [sp, #20]
 8005e68:	42aa      	cmp	r2, r5
 8005e6a:	441e      	add	r6, r3
 8005e6c:	d9b9      	bls.n	8005de2 <nl_func_sm_array_f32+0x52>
 8005e6e:	60ba      	str	r2, [r7, #8]
 8005e70:	9a02      	ldr	r2, [sp, #8]
 8005e72:	68d3      	ldr	r3, [r2, #12]
 8005e74:	6093      	str	r3, [r2, #8]
 8005e76:	b009      	add	sp, #36	; 0x24
 8005e78:	ecbd 8b04 	vpop	{d8-d9}
 8005e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e80:	2a00      	cmp	r2, #0
 8005e82:	d0ed      	beq.n	8005e60 <nl_func_sm_array_f32+0xd0>
 8005e84:	9a01      	ldr	r2, [sp, #4]
 8005e86:	eb03 0b02 	add.w	fp, r3, r2
 8005e8a:	e7c7      	b.n	8005e1c <nl_func_sm_array_f32+0x8c>
 8005e8c:	00000000 	.word	0x00000000

08005e90 <nl_func_relu_generic_array_f32>:
 8005e90:	b430      	push	{r4, r5}
 8005e92:	6989      	ldr	r1, [r1, #24]
 8005e94:	6980      	ldr	r0, [r0, #24]
 8005e96:	edd3 6a02 	vldr	s13, [r3, #8]
 8005e9a:	688c      	ldr	r4, [r1, #8]
 8005e9c:	6880      	ldr	r0, [r0, #8]
 8005e9e:	ed93 7a00 	vldr	s14, [r3]
 8005ea2:	ed93 6a01 	vldr	s12, [r3, #4]
 8005ea6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005eaa:	3a01      	subs	r2, #1
 8005eac:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005eb0:	0092      	lsls	r2, r2, #2
 8005eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb6:	4410      	add	r0, r2
 8005eb8:	4422      	add	r2, r4
 8005eba:	d421      	bmi.n	8005f00 <nl_func_relu_generic_array_f32+0x70>
 8005ebc:	4294      	cmp	r4, r2
 8005ebe:	d83d      	bhi.n	8005f3c <nl_func_relu_generic_array_f32+0xac>
 8005ec0:	1d13      	adds	r3, r2, #4
 8005ec2:	1d02      	adds	r2, r0, #4
 8005ec4:	e010      	b.n	8005ee8 <nl_func_relu_generic_array_f32+0x58>
 8005ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ece:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005ed2:	d501      	bpl.n	8005ed8 <nl_func_relu_generic_array_f32+0x48>
 8005ed4:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005ed8:	ed62 7a01 	vstmdb	r2!, {s15}
 8005edc:	6888      	ldr	r0, [r1, #8]
 8005ede:	f1a3 0408 	sub.w	r4, r3, #8
 8005ee2:	4284      	cmp	r4, r0
 8005ee4:	462b      	mov	r3, r5
 8005ee6:	d329      	bcc.n	8005f3c <nl_func_relu_generic_array_f32+0xac>
 8005ee8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005eec:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef4:	f1a3 0504 	sub.w	r5, r3, #4
 8005ef8:	d4e5      	bmi.n	8005ec6 <nl_func_relu_generic_array_f32+0x36>
 8005efa:	eef0 7a66 	vmov.f32	s15, s13
 8005efe:	e7eb      	b.n	8005ed8 <nl_func_relu_generic_array_f32+0x48>
 8005f00:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f08:	d01a      	beq.n	8005f40 <nl_func_relu_generic_array_f32+0xb0>
 8005f0a:	4294      	cmp	r4, r2
 8005f0c:	d816      	bhi.n	8005f3c <nl_func_relu_generic_array_f32+0xac>
 8005f0e:	1d13      	adds	r3, r2, #4
 8005f10:	1d02      	adds	r2, r0, #4
 8005f12:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005f16:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f1e:	f1a3 0408 	sub.w	r4, r3, #8
 8005f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f26:	f1a3 0004 	sub.w	r0, r3, #4
 8005f2a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005f2e:	4623      	mov	r3, r4
 8005f30:	d51e      	bpl.n	8005f70 <nl_func_relu_generic_array_f32+0xe0>
 8005f32:	ed62 6a01 	vstmdb	r2!, {s13}
 8005f36:	688b      	ldr	r3, [r1, #8]
 8005f38:	42a3      	cmp	r3, r4
 8005f3a:	d91e      	bls.n	8005f7a <nl_func_relu_generic_array_f32+0xea>
 8005f3c:	bc30      	pop	{r4, r5}
 8005f3e:	4770      	bx	lr
 8005f40:	4294      	cmp	r4, r2
 8005f42:	d8fb      	bhi.n	8005f3c <nl_func_relu_generic_array_f32+0xac>
 8005f44:	1d13      	adds	r3, r2, #4
 8005f46:	2500      	movs	r5, #0
 8005f48:	1d02      	adds	r2, r0, #4
 8005f4a:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f52:	f1a3 0408 	sub.w	r4, r3, #8
 8005f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5a:	f1a3 0004 	sub.w	r0, r3, #4
 8005f5e:	4623      	mov	r3, r4
 8005f60:	db0d      	blt.n	8005f7e <nl_func_relu_generic_array_f32+0xee>
 8005f62:	ed62 7a01 	vstmdb	r2!, {s15}
 8005f66:	688b      	ldr	r3, [r1, #8]
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	d8e7      	bhi.n	8005f3c <nl_func_relu_generic_array_f32+0xac>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	e7ec      	b.n	8005f4a <nl_func_relu_generic_array_f32+0xba>
 8005f70:	ed62 7a01 	vstmdb	r2!, {s15}
 8005f74:	688c      	ldr	r4, [r1, #8]
 8005f76:	429c      	cmp	r4, r3
 8005f78:	d8e0      	bhi.n	8005f3c <nl_func_relu_generic_array_f32+0xac>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	e7c9      	b.n	8005f12 <nl_func_relu_generic_array_f32+0x82>
 8005f7e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005f82:	688c      	ldr	r4, [r1, #8]
 8005f84:	429c      	cmp	r4, r3
 8005f86:	d8d9      	bhi.n	8005f3c <nl_func_relu_generic_array_f32+0xac>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	e7de      	b.n	8005f4a <nl_func_relu_generic_array_f32+0xba>

08005f8c <forward_relu>:
 8005f8c:	6982      	ldr	r2, [r0, #24]
 8005f8e:	8813      	ldrh	r3, [r2, #0]
 8005f90:	b333      	cbz	r3, 8005fe0 <forward_relu+0x54>
 8005f92:	6852      	ldr	r2, [r2, #4]
 8005f94:	6851      	ldr	r1, [r2, #4]
 8005f96:	b101      	cbz	r1, 8005f9a <forward_relu+0xe>
 8005f98:	6809      	ldr	r1, [r1, #0]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d91d      	bls.n	8005fda <forward_relu+0x4e>
 8005f9e:	b4f0      	push	{r4, r5, r6, r7}
 8005fa0:	6917      	ldr	r7, [r2, #16]
 8005fa2:	b107      	cbz	r7, 8005fa6 <forward_relu+0x1a>
 8005fa4:	683f      	ldr	r7, [r7, #0]
 8005fa6:	688c      	ldr	r4, [r1, #8]
 8005fa8:	69c3      	ldr	r3, [r0, #28]
 8005faa:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d044      	beq.n	800603c <forward_relu+0xb0>
 8005fb2:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8005fb6:	2d01      	cmp	r5, #1
 8005fb8:	d014      	beq.n	8005fe4 <forward_relu+0x58>
 8005fba:	2c00      	cmp	r4, #0
 8005fbc:	d074      	beq.n	80060a8 <forward_relu+0x11c>
 8005fbe:	68ce      	ldr	r6, [r1, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005fc6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	fb05 f202 	mul.w	r2, r5, r2
 8005fd0:	d1f9      	bne.n	8005fc6 <forward_relu+0x3a>
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	bcf0      	pop	{r4, r5, r6, r7}
 8005fd6:	f7ff bf5b 	b.w	8005e90 <nl_func_relu_generic_array_f32>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	deff      	udf	#255	; 0xff
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	deff      	udf	#255	; 0xff
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	6988      	ldr	r0, [r1, #24]
 8005fe8:	6896      	ldr	r6, [r2, #8]
 8005fea:	ed93 7a00 	vldr	s14, [r3]
 8005fee:	6882      	ldr	r2, [r0, #8]
 8005ff0:	b184      	cbz	r4, 8006014 <forward_relu+0x88>
 8005ff2:	68cf      	ldr	r7, [r1, #12]
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8005ffa:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8005ffe:	42a7      	cmp	r7, r4
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	d1f9      	bne.n	8005ffa <forward_relu+0x6e>
 8006006:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800600a:	3b01      	subs	r3, #1
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	18d2      	adds	r2, r2, r3
 8006010:	441e      	add	r6, r3
 8006012:	d23f      	bcs.n	8006094 <forward_relu+0x108>
 8006014:	1d13      	adds	r3, r2, #4
 8006016:	2500      	movs	r5, #0
 8006018:	1d32      	adds	r2, r6, #4
 800601a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800601e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006026:	f1a3 0104 	sub.w	r1, r3, #4
 800602a:	d835      	bhi.n	8006098 <forward_relu+0x10c>
 800602c:	ed62 7a01 	vstmdb	r2!, {s15}
 8006030:	6884      	ldr	r4, [r0, #8]
 8006032:	3b08      	subs	r3, #8
 8006034:	429c      	cmp	r4, r3
 8006036:	d82d      	bhi.n	8006094 <forward_relu+0x108>
 8006038:	460b      	mov	r3, r1
 800603a:	e7ee      	b.n	800601a <forward_relu+0x8e>
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	698d      	ldr	r5, [r1, #24]
 8006040:	6898      	ldr	r0, [r3, #8]
 8006042:	68ab      	ldr	r3, [r5, #8]
 8006044:	b184      	cbz	r4, 8006068 <forward_relu+0xdc>
 8006046:	68ce      	ldr	r6, [r1, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800604e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8006052:	42a6      	cmp	r6, r4
 8006054:	fb01 f202 	mul.w	r2, r1, r2
 8006058:	d1f9      	bne.n	800604e <forward_relu+0xc2>
 800605a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800605e:	3a01      	subs	r2, #1
 8006060:	0092      	lsls	r2, r2, #2
 8006062:	189b      	adds	r3, r3, r2
 8006064:	4410      	add	r0, r2
 8006066:	d215      	bcs.n	8006094 <forward_relu+0x108>
 8006068:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80060ac <forward_relu+0x120>
 800606c:	3304      	adds	r3, #4
 800606e:	1d01      	adds	r1, r0, #4
 8006070:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607c:	bfb8      	it	lt
 800607e:	eef0 7a47 	vmovlt.f32	s15, s14
 8006082:	ed61 7a01 	vstmdb	r1!, {s15}
 8006086:	68a8      	ldr	r0, [r5, #8]
 8006088:	f1a3 0208 	sub.w	r2, r3, #8
 800608c:	4290      	cmp	r0, r2
 800608e:	f1a3 0304 	sub.w	r3, r3, #4
 8006092:	d9ed      	bls.n	8006070 <forward_relu+0xe4>
 8006094:	bcf0      	pop	{r4, r5, r6, r7}
 8006096:	4770      	bx	lr
 8006098:	f842 5d04 	str.w	r5, [r2, #-4]!
 800609c:	6884      	ldr	r4, [r0, #8]
 800609e:	3b08      	subs	r3, #8
 80060a0:	429c      	cmp	r4, r3
 80060a2:	d8f7      	bhi.n	8006094 <forward_relu+0x108>
 80060a4:	460b      	mov	r3, r1
 80060a6:	e7b8      	b.n	800601a <forward_relu+0x8e>
 80060a8:	2201      	movs	r2, #1
 80060aa:	e792      	b.n	8005fd2 <forward_relu+0x46>
 80060ac:	00000000 	.word	0x00000000

080060b0 <forward_sm>:
 80060b0:	6982      	ldr	r2, [r0, #24]
 80060b2:	8813      	ldrh	r3, [r2, #0]
 80060b4:	b32b      	cbz	r3, 8006102 <forward_sm+0x52>
 80060b6:	6852      	ldr	r2, [r2, #4]
 80060b8:	6851      	ldr	r1, [r2, #4]
 80060ba:	b101      	cbz	r1, 80060be <forward_sm+0xe>
 80060bc:	6809      	ldr	r1, [r1, #0]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d91c      	bls.n	80060fc <forward_sm+0x4c>
 80060c2:	6913      	ldr	r3, [r2, #16]
 80060c4:	b1c3      	cbz	r3, 80060f8 <forward_sm+0x48>
 80060c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	688c      	ldr	r4, [r1, #8]
 80060cc:	68c3      	ldr	r3, [r0, #12]
 80060ce:	68ce      	ldr	r6, [r1, #12]
 80060d0:	685f      	ldr	r7, [r3, #4]
 80060d2:	6873      	ldr	r3, [r6, #4]
 80060d4:	0a24      	lsrs	r4, r4, #8
 80060d6:	b083      	sub	sp, #12
 80060d8:	d015      	beq.n	8006106 <forward_sm+0x56>
 80060da:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80060de:	2201      	movs	r2, #1
 80060e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060e4:	42a6      	cmp	r6, r4
 80060e6:	fb05 f202 	mul.w	r2, r5, r2
 80060ea:	d1f9      	bne.n	80060e0 <forward_sm+0x30>
 80060ec:	e9cd 3700 	strd	r3, r7, [sp]
 80060f0:	f7ff fe4e 	bl	8005d90 <nl_func_sm_array_f32>
 80060f4:	b003      	add	sp, #12
 80060f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	deff      	udf	#255	; 0xff
 80060fc:	2300      	movs	r3, #0
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	deff      	udf	#255	; 0xff
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	deff      	udf	#255	; 0xff
 8006106:	2201      	movs	r2, #1
 8006108:	e9cd 3700 	strd	r3, r7, [sp]
 800610c:	f7ff fe40 	bl	8005d90 <nl_func_sm_array_f32>
 8006110:	b003      	add	sp, #12
 8006112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006114 <pool_func_mp_array_f32>:
 8006114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006118:	b093      	sub	sp, #76	; 0x4c
 800611a:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800611e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8006120:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8006124:	68a8      	ldr	r0, [r5, #8]
 8006126:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800612a:	9508      	str	r5, [sp, #32]
 800612c:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 8006130:	9002      	str	r0, [sp, #8]
 8006132:	950d      	str	r5, [sp, #52]	; 0x34
 8006134:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 8006138:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800613c:	9004      	str	r0, [sp, #16]
 800613e:	9506      	str	r5, [sp, #24]
 8006140:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8006144:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8006148:	9009      	str	r0, [sp, #36]	; 0x24
 800614a:	950b      	str	r5, [sp, #44]	; 0x2c
 800614c:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8006150:	9200      	str	r2, [sp, #0]
 8006152:	468a      	mov	sl, r1
 8006154:	4699      	mov	r9, r3
 8006156:	b95c      	cbnz	r4, 8006170 <pool_func_mp_array_f32+0x5c>
 8006158:	b950      	cbnz	r0, 8006170 <pool_func_mp_array_f32+0x5c>
 800615a:	9b04      	ldr	r3, [sp, #16]
 800615c:	1a5a      	subs	r2, r3, r1
 800615e:	9b06      	ldr	r3, [sp, #24]
 8006160:	9908      	ldr	r1, [sp, #32]
 8006162:	3a01      	subs	r2, #1
 8006164:	3b01      	subs	r3, #1
 8006166:	fb13 2301 	smlabb	r3, r3, r1, r2
 800616a:	041a      	lsls	r2, r3, #16
 800616c:	f100 809b 	bmi.w	80062a6 <pool_func_mp_array_f32+0x192>
 8006170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 808b 	beq.w	800628e <pool_func_mp_array_f32+0x17a>
 8006178:	9b06      	ldr	r3, [sp, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8087 	beq.w	800628e <pool_func_mp_array_f32+0x17a>
 8006180:	f1b9 0f00 	cmp.w	r9, #0
 8006184:	f000 8083 	beq.w	800628e <pool_func_mp_array_f32+0x17a>
 8006188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618a:	1b1c      	subs	r4, r3, r4
 800618c:	9b04      	ldr	r3, [sp, #16]
 800618e:	1a1b      	subs	r3, r3, r0
 8006190:	b29b      	uxth	r3, r3
 8006192:	4240      	negs	r0, r0
 8006194:	2200      	movs	r2, #0
 8006196:	b2a1      	uxth	r1, r4
 8006198:	930f      	str	r3, [sp, #60]	; 0x3c
 800619a:	b283      	uxth	r3, r0
 800619c:	920e      	str	r2, [sp, #56]	; 0x38
 800619e:	910c      	str	r1, [sp, #48]	; 0x30
 80061a0:	9310      	str	r3, [sp, #64]	; 0x40
 80061a2:	9c06      	ldr	r4, [sp, #24]
 80061a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a8:	fb02 f204 	mul.w	r2, r2, r4
 80061ac:	1acb      	subs	r3, r1, r3
 80061ae:	920a      	str	r2, [sp, #40]	; 0x28
 80061b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061b2:	9205      	str	r2, [sp, #20]
 80061b4:	2000      	movs	r0, #0
 80061b6:	b21b      	sxth	r3, r3
 80061b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061ba:	9303      	str	r3, [sp, #12]
 80061bc:	9007      	str	r0, [sp, #28]
 80061be:	4603      	mov	r3, r0
 80061c0:	fa0f f881 	sxth.w	r8, r1
 80061c4:	9204      	str	r2, [sp, #16]
 80061c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061c8:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80061cc:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	f04f 0e00 	mov.w	lr, #0
 80061d6:	fb09 f303 	mul.w	r3, r9, r3
 80061da:	9301      	str	r3, [sp, #4]
 80061dc:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 80061e0:	4675      	mov	r5, lr
 80061e2:	9903      	ldr	r1, [sp, #12]
 80061e4:	eddf 7a78 	vldr	s15, [pc, #480]	; 80063c8 <pool_func_mp_array_f32+0x2b4>
 80061e8:	4588      	cmp	r8, r1
 80061ea:	dd24      	ble.n	8006236 <pool_func_mp_array_f32+0x122>
 80061ec:	4564      	cmp	r4, ip
 80061ee:	dd1e      	ble.n	800622e <pool_func_mp_array_f32+0x11a>
 80061f0:	2900      	cmp	r1, #0
 80061f2:	fb0a f601 	mul.w	r6, sl, r1
 80061f6:	db1a      	blt.n	800622e <pool_func_mp_array_f32+0x11a>
 80061f8:	9b00      	ldr	r3, [sp, #0]
 80061fa:	4299      	cmp	r1, r3
 80061fc:	da17      	bge.n	800622e <pool_func_mp_array_f32+0x11a>
 80061fe:	f1bc 0f00 	cmp.w	ip, #0
 8006202:	4663      	mov	r3, ip
 8006204:	db46      	blt.n	8006294 <pool_func_mp_array_f32+0x180>
 8006206:	18f2      	adds	r2, r6, r3
 8006208:	fb09 5202 	mla	r2, r9, r2, r5
 800620c:	1c58      	adds	r0, r3, #1
 800620e:	459a      	cmp	sl, r3
 8006210:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8006214:	b203      	sxth	r3, r0
 8006216:	dd08      	ble.n	800622a <pool_func_mp_array_f32+0x116>
 8006218:	ed92 7a00 	vldr	s14, [r2]
 800621c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006224:	bfb8      	it	lt
 8006226:	eef0 7a47 	vmovlt.f32	s15, s14
 800622a:	429c      	cmp	r4, r3
 800622c:	dceb      	bgt.n	8006206 <pool_func_mp_array_f32+0xf2>
 800622e:	3101      	adds	r1, #1
 8006230:	b209      	sxth	r1, r1
 8006232:	4588      	cmp	r8, r1
 8006234:	dcda      	bgt.n	80061ec <pool_func_mp_array_f32+0xd8>
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	f10e 0e01 	add.w	lr, lr, #1
 800623c:	441d      	add	r5, r3
 800623e:	9b02      	ldr	r3, [sp, #8]
 8006240:	fa0f fe8e 	sxth.w	lr, lr
 8006244:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006248:	45ce      	cmp	lr, r9
 800624a:	edc5 7a00 	vstr	s15, [r5]
 800624e:	4675      	mov	r5, lr
 8006250:	dbc7      	blt.n	80061e2 <pool_func_mp_array_f32+0xce>
 8006252:	9b07      	ldr	r3, [sp, #28]
 8006254:	9808      	ldr	r0, [sp, #32]
 8006256:	3301      	adds	r3, #1
 8006258:	b219      	sxth	r1, r3
 800625a:	9b05      	ldr	r3, [sp, #20]
 800625c:	9107      	str	r1, [sp, #28]
 800625e:	461a      	mov	r2, r3
 8006260:	4402      	add	r2, r0
 8006262:	9b04      	ldr	r3, [sp, #16]
 8006264:	b292      	uxth	r2, r2
 8006266:	9205      	str	r2, [sp, #20]
 8006268:	9a06      	ldr	r2, [sp, #24]
 800626a:	4403      	add	r3, r0
 800626c:	b29b      	uxth	r3, r3
 800626e:	428a      	cmp	r2, r1
 8006270:	9304      	str	r3, [sp, #16]
 8006272:	460b      	mov	r3, r1
 8006274:	dca7      	bgt.n	80061c6 <pool_func_mp_array_f32+0xb2>
 8006276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006278:	3301      	adds	r3, #1
 800627a:	b21a      	sxth	r2, r3
 800627c:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8006280:	440b      	add	r3, r1
 8006282:	b29b      	uxth	r3, r3
 8006284:	930c      	str	r3, [sp, #48]	; 0x30
 8006286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006288:	920e      	str	r2, [sp, #56]	; 0x38
 800628a:	4293      	cmp	r3, r2
 800628c:	dc89      	bgt.n	80061a2 <pool_func_mp_array_f32+0x8e>
 800628e:	b013      	add	sp, #76	; 0x4c
 8006290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006294:	3301      	adds	r3, #1
 8006296:	b21b      	sxth	r3, r3
 8006298:	42bb      	cmp	r3, r7
 800629a:	dac6      	bge.n	800622a <pool_func_mp_array_f32+0x116>
 800629c:	3301      	adds	r3, #1
 800629e:	b21b      	sxth	r3, r3
 80062a0:	42bb      	cmp	r3, r7
 80062a2:	dbf7      	blt.n	8006294 <pool_func_mp_array_f32+0x180>
 80062a4:	e7c1      	b.n	800622a <pool_func_mp_array_f32+0x116>
 80062a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a8:	9a00      	ldr	r2, [sp, #0]
 80062aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062ac:	1a9a      	subs	r2, r3, r2
 80062ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b0:	3a01      	subs	r2, #1
 80062b2:	3b01      	subs	r3, #1
 80062b4:	fb13 2301 	smlabb	r3, r3, r1, r2
 80062b8:	041b      	lsls	r3, r3, #16
 80062ba:	f57f af59 	bpl.w	8006170 <pool_func_mp_array_f32+0x5c>
 80062be:	fb0a f309 	mul.w	r3, sl, r9
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 80062c8:	930e      	str	r3, [sp, #56]	; 0x38
 80062ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062cc:	9001      	str	r0, [sp, #4]
 80062ce:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80062d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062da:	429a      	cmp	r2, r3
 80062dc:	ddd7      	ble.n	800628e <pool_func_mp_array_f32+0x17a>
 80062de:	9a00      	ldr	r2, [sp, #0]
 80062e0:	9906      	ldr	r1, [sp, #24]
 80062e2:	fa0f f882 	sxth.w	r8, r2
 80062e6:	2900      	cmp	r1, #0
 80062e8:	d062      	beq.n	80063b0 <pool_func_mp_array_f32+0x29c>
 80062ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ec:	fb01 f303 	mul.w	r3, r1, r3
 80062f0:	1a12      	subs	r2, r2, r0
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	b213      	sxth	r3, r2
 80062f6:	9307      	str	r3, [sp, #28]
 80062f8:	f1b9 0f00 	cmp.w	r9, #0
 80062fc:	d058      	beq.n	80063b0 <pool_func_mp_array_f32+0x29c>
 80062fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	2600      	movs	r6, #0
 8006306:	930c      	str	r3, [sp, #48]	; 0x30
 8006308:	9b04      	ldr	r3, [sp, #16]
 800630a:	9303      	str	r3, [sp, #12]
 800630c:	4637      	mov	r7, r6
 800630e:	46b2      	mov	sl, r6
 8006310:	9b05      	ldr	r3, [sp, #20]
 8006312:	9611      	str	r6, [sp, #68]	; 0x44
 8006314:	eb0a 0b03 	add.w	fp, sl, r3
 8006318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800631a:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800631e:	b235      	sxth	r5, r6
 8006320:	18eb      	adds	r3, r5, r3
 8006322:	f04f 0a00 	mov.w	sl, #0
 8006326:	fb09 f303 	mul.w	r3, r9, r3
 800632a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800632c:	930a      	str	r3, [sp, #40]	; 0x28
 800632e:	fb09 fb0b 	mul.w	fp, r9, fp
 8006332:	46d6      	mov	lr, sl
 8006334:	9807      	ldr	r0, [sp, #28]
 8006336:	4580      	cmp	r8, r0
 8006338:	dd43      	ble.n	80063c2 <pool_func_mp_array_f32+0x2ae>
 800633a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633c:	eddf 7a22 	vldr	s15, [pc, #136]	; 80063c8 <pool_func_mp_array_f32+0x2b4>
 8006340:	eb0e 0403 	add.w	r4, lr, r3
 8006344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006346:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800634a:	42a9      	cmp	r1, r5
 800634c:	dd0f      	ble.n	800636e <pool_func_mp_array_f32+0x25a>
 800634e:	4622      	mov	r2, r4
 8006350:	462b      	mov	r3, r5
 8006352:	ed92 7a00 	vldr	s14, [r2]
 8006356:	3301      	adds	r3, #1
 8006358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006360:	b21b      	sxth	r3, r3
 8006362:	bfb8      	it	lt
 8006364:	eef0 7a47 	vmovlt.f32	s15, s14
 8006368:	4299      	cmp	r1, r3
 800636a:	4462      	add	r2, ip
 800636c:	d1f1      	bne.n	8006352 <pool_func_mp_array_f32+0x23e>
 800636e:	3001      	adds	r0, #1
 8006370:	b200      	sxth	r0, r0
 8006372:	4580      	cmp	r8, r0
 8006374:	4434      	add	r4, r6
 8006376:	d1e8      	bne.n	800634a <pool_func_mp_array_f32+0x236>
 8006378:	f10a 0a01 	add.w	sl, sl, #1
 800637c:	9a02      	ldr	r2, [sp, #8]
 800637e:	eb0b 030e 	add.w	r3, fp, lr
 8006382:	fa0f fa8a 	sxth.w	sl, sl
 8006386:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800638a:	45ca      	cmp	sl, r9
 800638c:	edc3 7a00 	vstr	s15, [r3]
 8006390:	46d6      	mov	lr, sl
 8006392:	dbcf      	blt.n	8006334 <pool_func_mp_array_f32+0x220>
 8006394:	9b03      	ldr	r3, [sp, #12]
 8006396:	9a08      	ldr	r2, [sp, #32]
 8006398:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800639a:	4413      	add	r3, r2
 800639c:	b29b      	uxth	r3, r3
 800639e:	3701      	adds	r7, #1
 80063a0:	9303      	str	r3, [sp, #12]
 80063a2:	9b06      	ldr	r3, [sp, #24]
 80063a4:	b23f      	sxth	r7, r7
 80063a6:	4416      	add	r6, r2
 80063a8:	42bb      	cmp	r3, r7
 80063aa:	b2b6      	uxth	r6, r6
 80063ac:	46ba      	mov	sl, r7
 80063ae:	dcaf      	bgt.n	8006310 <pool_func_mp_array_f32+0x1fc>
 80063b0:	9b00      	ldr	r3, [sp, #0]
 80063b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063b4:	4413      	add	r3, r2
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	9b01      	ldr	r3, [sp, #4]
 80063bc:	3301      	adds	r3, #1
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	e788      	b.n	80062d4 <pool_func_mp_array_f32+0x1c0>
 80063c2:	eddf 7a01 	vldr	s15, [pc, #4]	; 80063c8 <pool_func_mp_array_f32+0x2b4>
 80063c6:	e7d7      	b.n	8006378 <pool_func_mp_array_f32+0x264>
 80063c8:	cf000000 	.word	0xcf000000

080063cc <ai_check_custom_types>:
 80063cc:	4b13      	ldr	r3, [pc, #76]	; (800641c <ai_check_custom_types+0x50>)
 80063ce:	b082      	sub	sp, #8
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	9301      	str	r3, [sp, #4]
 80063d4:	b118      	cbz	r0, 80063de <ai_check_custom_types+0x12>
 80063d6:	7803      	ldrb	r3, [r0, #0]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d002      	beq.n	80063e2 <ai_check_custom_types+0x16>
 80063dc:	2000      	movs	r0, #0
 80063de:	b002      	add	sp, #8
 80063e0:	4770      	bx	lr
 80063e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <ai_check_custom_types+0x28>
 80063ea:	2001      	movs	r0, #1
 80063ec:	f080 0001 	eor.w	r0, r0, #1
 80063f0:	b002      	add	sp, #8
 80063f2:	4770      	bx	lr
 80063f4:	7842      	ldrb	r2, [r0, #1]
 80063f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	f100 0001 	add.w	r0, r0, #1
 8006400:	d1f3      	bne.n	80063ea <ai_check_custom_types+0x1e>
 8006402:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006406:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800640a:	429a      	cmp	r2, r3
 800640c:	d1ed      	bne.n	80063ea <ai_check_custom_types+0x1e>
 800640e:	7842      	ldrb	r2, [r0, #1]
 8006410:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006414:	429a      	cmp	r2, r3
 8006416:	d1e8      	bne.n	80063ea <ai_check_custom_types+0x1e>
 8006418:	2000      	movs	r0, #0
 800641a:	e7e7      	b.n	80063ec <ai_check_custom_types+0x20>
 800641c:	08009330 	.word	0x08009330

08006420 <ai_layers_init_all>:
 8006420:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006422:	b17a      	cbz	r2, 8006444 <ai_layers_init_all+0x24>
 8006424:	6913      	ldr	r3, [r2, #16]
 8006426:	60d0      	str	r0, [r2, #12]
 8006428:	429a      	cmp	r2, r3
 800642a:	f04f 0201 	mov.w	r2, #1
 800642e:	d009      	beq.n	8006444 <ai_layers_init_all+0x24>
 8006430:	b143      	cbz	r3, 8006444 <ai_layers_init_all+0x24>
 8006432:	6919      	ldr	r1, [r3, #16]
 8006434:	60d8      	str	r0, [r3, #12]
 8006436:	4299      	cmp	r1, r3
 8006438:	f102 0201 	add.w	r2, r2, #1
 800643c:	d002      	beq.n	8006444 <ai_layers_init_all+0x24>
 800643e:	460b      	mov	r3, r1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1f6      	bne.n	8006432 <ai_layers_init_all+0x12>
 8006444:	4610      	mov	r0, r2
 8006446:	4770      	bx	lr

08006448 <ai_layers_post_init_all>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800644c:	b18c      	cbz	r4, 8006472 <ai_layers_post_init_all+0x2a>
 800644e:	2500      	movs	r5, #0
 8006450:	6863      	ldr	r3, [r4, #4]
 8006452:	f013 0f01 	tst.w	r3, #1
 8006456:	4620      	mov	r0, r4
 8006458:	d003      	beq.n	8006462 <ai_layers_post_init_all+0x1a>
 800645a:	6a23      	ldr	r3, [r4, #32]
 800645c:	b10b      	cbz	r3, 8006462 <ai_layers_post_init_all+0x1a>
 800645e:	4798      	blx	r3
 8006460:	3501      	adds	r5, #1
 8006462:	6923      	ldr	r3, [r4, #16]
 8006464:	42a3      	cmp	r3, r4
 8006466:	d002      	beq.n	800646e <ai_layers_post_init_all+0x26>
 8006468:	461c      	mov	r4, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f0      	bne.n	8006450 <ai_layers_post_init_all+0x8>
 800646e:	4628      	mov	r0, r5
 8006470:	bd38      	pop	{r3, r4, r5, pc}
 8006472:	4625      	mov	r5, r4
 8006474:	e7fb      	b.n	800646e <ai_layers_post_init_all+0x26>
 8006476:	bf00      	nop

08006478 <ai_layers_forward_all>:
 8006478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800647c:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800647e:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8006480:	4604      	mov	r4, r0
 8006482:	2f00      	cmp	r7, #0
 8006484:	d02c      	beq.n	80064e0 <ai_layers_forward_all+0x68>
 8006486:	2d00      	cmp	r5, #0
 8006488:	d03f      	beq.n	800650a <ai_layers_forward_all+0x92>
 800648a:	6545      	str	r5, [r0, #84]	; 0x54
 800648c:	4629      	mov	r1, r5
 800648e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006490:	2001      	movs	r0, #1
 8006492:	47b8      	blx	r7
 8006494:	2600      	movs	r6, #0
 8006496:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006498:	46b0      	mov	r8, r6
 800649a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800649c:	2002      	movs	r0, #2
 800649e:	47b8      	blx	r7
 80064a0:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80064a2:	696b      	ldr	r3, [r5, #20]
 80064a4:	4628      	mov	r0, r5
 80064a6:	4798      	blx	r3
 80064a8:	692b      	ldr	r3, [r5, #16]
 80064aa:	429d      	cmp	r5, r3
 80064ac:	f04f 0003 	mov.w	r0, #3
 80064b0:	4619      	mov	r1, r3
 80064b2:	d009      	beq.n	80064c8 <ai_layers_forward_all+0x50>
 80064b4:	6563      	str	r3, [r4, #84]	; 0x54
 80064b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80064b8:	47b8      	blx	r7
 80064ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80064bc:	3601      	adds	r6, #1
 80064be:	2900      	cmp	r1, #0
 80064c0:	d1eb      	bne.n	800649a <ai_layers_forward_all+0x22>
 80064c2:	4630      	mov	r0, r6
 80064c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c8:	2100      	movs	r1, #0
 80064ca:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 80064ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80064d0:	47b8      	blx	r7
 80064d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80064d4:	3601      	adds	r6, #1
 80064d6:	2900      	cmp	r1, #0
 80064d8:	d1df      	bne.n	800649a <ai_layers_forward_all+0x22>
 80064da:	4630      	mov	r0, r6
 80064dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e0:	b19d      	cbz	r5, 800650a <ai_layers_forward_all+0x92>
 80064e2:	6545      	str	r5, [r0, #84]	; 0x54
 80064e4:	463e      	mov	r6, r7
 80064e6:	696b      	ldr	r3, [r5, #20]
 80064e8:	4628      	mov	r0, r5
 80064ea:	4798      	blx	r3
 80064ec:	692b      	ldr	r3, [r5, #16]
 80064ee:	42ab      	cmp	r3, r5
 80064f0:	f106 0601 	add.w	r6, r6, #1
 80064f4:	d004      	beq.n	8006500 <ai_layers_forward_all+0x88>
 80064f6:	6563      	str	r3, [r4, #84]	; 0x54
 80064f8:	461d      	mov	r5, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f3      	bne.n	80064e6 <ai_layers_forward_all+0x6e>
 80064fe:	e7e0      	b.n	80064c2 <ai_layers_forward_all+0x4a>
 8006500:	2300      	movs	r3, #0
 8006502:	6563      	str	r3, [r4, #84]	; 0x54
 8006504:	4630      	mov	r0, r6
 8006506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800650a:	462e      	mov	r6, r5
 800650c:	4630      	mov	r0, r6
 800650e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006512:	bf00      	nop

08006514 <ai_array_to_buffer_fmt>:
 8006514:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006518:	2b02      	cmp	r3, #2
 800651a:	d02e      	beq.n	800657a <ai_array_to_buffer_fmt+0x66>
 800651c:	4a1b      	ldr	r2, [pc, #108]	; (800658c <ai_array_to_buffer_fmt+0x78>)
 800651e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8006522:	4293      	cmp	r3, r2
 8006524:	d00e      	beq.n	8006544 <ai_array_to_buffer_fmt+0x30>
 8006526:	dd11      	ble.n	800654c <ai_array_to_buffer_fmt+0x38>
 8006528:	4a19      	ldr	r2, [pc, #100]	; (8006590 <ai_array_to_buffer_fmt+0x7c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00a      	beq.n	8006544 <ai_array_to_buffer_fmt+0x30>
 800652e:	dd18      	ble.n	8006562 <ai_array_to_buffer_fmt+0x4e>
 8006530:	4a18      	ldr	r2, [pc, #96]	; (8006594 <ai_array_to_buffer_fmt+0x80>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d006      	beq.n	8006544 <ai_array_to_buffer_fmt+0x30>
 8006536:	4a18      	ldr	r2, [pc, #96]	; (8006598 <ai_array_to_buffer_fmt+0x84>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <ai_array_to_buffer_fmt+0x30>
 800653c:	4a17      	ldr	r2, [pc, #92]	; (800659c <ai_array_to_buffer_fmt+0x88>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d000      	beq.n	8006544 <ai_array_to_buffer_fmt+0x30>
 8006542:	2340      	movs	r3, #64	; 0x40
 8006544:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006548:	4318      	orrs	r0, r3
 800654a:	4770      	bx	lr
 800654c:	4a14      	ldr	r2, [pc, #80]	; (80065a0 <ai_array_to_buffer_fmt+0x8c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d0f8      	beq.n	8006544 <ai_array_to_buffer_fmt+0x30>
 8006552:	dd06      	ble.n	8006562 <ai_array_to_buffer_fmt+0x4e>
 8006554:	4a13      	ldr	r2, [pc, #76]	; (80065a4 <ai_array_to_buffer_fmt+0x90>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d0f4      	beq.n	8006544 <ai_array_to_buffer_fmt+0x30>
 800655a:	320f      	adds	r2, #15
 800655c:	4293      	cmp	r3, r2
 800655e:	d0f1      	beq.n	8006544 <ai_array_to_buffer_fmt+0x30>
 8006560:	e7ef      	b.n	8006542 <ai_array_to_buffer_fmt+0x2e>
 8006562:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8006566:	4293      	cmp	r3, r2
 8006568:	d0ec      	beq.n	8006544 <ai_array_to_buffer_fmt+0x30>
 800656a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800656e:	4293      	cmp	r3, r2
 8006570:	d1e7      	bne.n	8006542 <ai_array_to_buffer_fmt+0x2e>
 8006572:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006576:	4318      	orrs	r0, r3
 8006578:	4770      	bx	lr
 800657a:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <ai_array_to_buffer_fmt+0x94>)
 800657c:	4003      	ands	r3, r0
 800657e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006582:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006586:	4318      	orrs	r0, r3
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	00060440 	.word	0x00060440
 8006590:	00840447 	.word	0x00840447
 8006594:	0084084f 	.word	0x0084084f
 8006598:	01821040 	.word	0x01821040
 800659c:	00840840 	.word	0x00840840
 80065a0:	00040447 	.word	0x00040447
 80065a4:	00040840 	.word	0x00040840
 80065a8:	00803fff 	.word	0x00803fff

080065ac <ai_array_get_byte_size>:
 80065ac:	b1c1      	cbz	r1, 80065e0 <ai_array_get_byte_size+0x34>
 80065ae:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80065b2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80065b6:	4413      	add	r3, r2
 80065b8:	fb01 f103 	mul.w	r1, r1, r3
 80065bc:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80065c0:	3107      	adds	r1, #7
 80065c2:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80065c6:	f021 0107 	bic.w	r1, r1, #7
 80065ca:	2804      	cmp	r0, #4
 80065cc:	fa21 f102 	lsr.w	r1, r1, r2
 80065d0:	d008      	beq.n	80065e4 <ai_array_get_byte_size+0x38>
 80065d2:	2808      	cmp	r0, #8
 80065d4:	d101      	bne.n	80065da <ai_array_get_byte_size+0x2e>
 80065d6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80065da:	3107      	adds	r1, #7
 80065dc:	08c8      	lsrs	r0, r1, #3
 80065de:	4770      	bx	lr
 80065e0:	4608      	mov	r0, r1
 80065e2:	4770      	bx	lr
 80065e4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80065e8:	3107      	adds	r1, #7
 80065ea:	08c8      	lsrs	r0, r1, #3
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop

080065f0 <__errno>:
 80065f0:	4b01      	ldr	r3, [pc, #4]	; (80065f8 <__errno+0x8>)
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20000844 	.word	0x20000844

080065fc <__libc_init_array>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	4d0d      	ldr	r5, [pc, #52]	; (8006634 <__libc_init_array+0x38>)
 8006600:	4c0d      	ldr	r4, [pc, #52]	; (8006638 <__libc_init_array+0x3c>)
 8006602:	1b64      	subs	r4, r4, r5
 8006604:	10a4      	asrs	r4, r4, #2
 8006606:	2600      	movs	r6, #0
 8006608:	42a6      	cmp	r6, r4
 800660a:	d109      	bne.n	8006620 <__libc_init_array+0x24>
 800660c:	4d0b      	ldr	r5, [pc, #44]	; (800663c <__libc_init_array+0x40>)
 800660e:	4c0c      	ldr	r4, [pc, #48]	; (8006640 <__libc_init_array+0x44>)
 8006610:	f002 fe60 	bl	80092d4 <_init>
 8006614:	1b64      	subs	r4, r4, r5
 8006616:	10a4      	asrs	r4, r4, #2
 8006618:	2600      	movs	r6, #0
 800661a:	42a6      	cmp	r6, r4
 800661c:	d105      	bne.n	800662a <__libc_init_array+0x2e>
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	f855 3b04 	ldr.w	r3, [r5], #4
 8006624:	4798      	blx	r3
 8006626:	3601      	adds	r6, #1
 8006628:	e7ee      	b.n	8006608 <__libc_init_array+0xc>
 800662a:	f855 3b04 	ldr.w	r3, [r5], #4
 800662e:	4798      	blx	r3
 8006630:	3601      	adds	r6, #1
 8006632:	e7f2      	b.n	800661a <__libc_init_array+0x1e>
 8006634:	08009e6c 	.word	0x08009e6c
 8006638:	08009e6c 	.word	0x08009e6c
 800663c:	08009e6c 	.word	0x08009e6c
 8006640:	08009e70 	.word	0x08009e70

08006644 <malloc>:
 8006644:	4b02      	ldr	r3, [pc, #8]	; (8006650 <malloc+0xc>)
 8006646:	4601      	mov	r1, r0
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	f000 b869 	b.w	8006720 <_malloc_r>
 800664e:	bf00      	nop
 8006650:	20000844 	.word	0x20000844

08006654 <memcpy>:
 8006654:	440a      	add	r2, r1
 8006656:	4291      	cmp	r1, r2
 8006658:	f100 33ff 	add.w	r3, r0, #4294967295
 800665c:	d100      	bne.n	8006660 <memcpy+0xc>
 800665e:	4770      	bx	lr
 8006660:	b510      	push	{r4, lr}
 8006662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800666a:	4291      	cmp	r1, r2
 800666c:	d1f9      	bne.n	8006662 <memcpy+0xe>
 800666e:	bd10      	pop	{r4, pc}

08006670 <memset>:
 8006670:	4402      	add	r2, r0
 8006672:	4603      	mov	r3, r0
 8006674:	4293      	cmp	r3, r2
 8006676:	d100      	bne.n	800667a <memset+0xa>
 8006678:	4770      	bx	lr
 800667a:	f803 1b01 	strb.w	r1, [r3], #1
 800667e:	e7f9      	b.n	8006674 <memset+0x4>

08006680 <_free_r>:
 8006680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006682:	2900      	cmp	r1, #0
 8006684:	d048      	beq.n	8006718 <_free_r+0x98>
 8006686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800668a:	9001      	str	r0, [sp, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f1a1 0404 	sub.w	r4, r1, #4
 8006692:	bfb8      	it	lt
 8006694:	18e4      	addlt	r4, r4, r3
 8006696:	f001 fca5 	bl	8007fe4 <__malloc_lock>
 800669a:	4a20      	ldr	r2, [pc, #128]	; (800671c <_free_r+0x9c>)
 800669c:	9801      	ldr	r0, [sp, #4]
 800669e:	6813      	ldr	r3, [r2, #0]
 80066a0:	4615      	mov	r5, r2
 80066a2:	b933      	cbnz	r3, 80066b2 <_free_r+0x32>
 80066a4:	6063      	str	r3, [r4, #4]
 80066a6:	6014      	str	r4, [r2, #0]
 80066a8:	b003      	add	sp, #12
 80066aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066ae:	f001 bc9f 	b.w	8007ff0 <__malloc_unlock>
 80066b2:	42a3      	cmp	r3, r4
 80066b4:	d90b      	bls.n	80066ce <_free_r+0x4e>
 80066b6:	6821      	ldr	r1, [r4, #0]
 80066b8:	1862      	adds	r2, r4, r1
 80066ba:	4293      	cmp	r3, r2
 80066bc:	bf04      	itt	eq
 80066be:	681a      	ldreq	r2, [r3, #0]
 80066c0:	685b      	ldreq	r3, [r3, #4]
 80066c2:	6063      	str	r3, [r4, #4]
 80066c4:	bf04      	itt	eq
 80066c6:	1852      	addeq	r2, r2, r1
 80066c8:	6022      	streq	r2, [r4, #0]
 80066ca:	602c      	str	r4, [r5, #0]
 80066cc:	e7ec      	b.n	80066a8 <_free_r+0x28>
 80066ce:	461a      	mov	r2, r3
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	b10b      	cbz	r3, 80066d8 <_free_r+0x58>
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	d9fa      	bls.n	80066ce <_free_r+0x4e>
 80066d8:	6811      	ldr	r1, [r2, #0]
 80066da:	1855      	adds	r5, r2, r1
 80066dc:	42a5      	cmp	r5, r4
 80066de:	d10b      	bne.n	80066f8 <_free_r+0x78>
 80066e0:	6824      	ldr	r4, [r4, #0]
 80066e2:	4421      	add	r1, r4
 80066e4:	1854      	adds	r4, r2, r1
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	6011      	str	r1, [r2, #0]
 80066ea:	d1dd      	bne.n	80066a8 <_free_r+0x28>
 80066ec:	681c      	ldr	r4, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	6053      	str	r3, [r2, #4]
 80066f2:	4421      	add	r1, r4
 80066f4:	6011      	str	r1, [r2, #0]
 80066f6:	e7d7      	b.n	80066a8 <_free_r+0x28>
 80066f8:	d902      	bls.n	8006700 <_free_r+0x80>
 80066fa:	230c      	movs	r3, #12
 80066fc:	6003      	str	r3, [r0, #0]
 80066fe:	e7d3      	b.n	80066a8 <_free_r+0x28>
 8006700:	6825      	ldr	r5, [r4, #0]
 8006702:	1961      	adds	r1, r4, r5
 8006704:	428b      	cmp	r3, r1
 8006706:	bf04      	itt	eq
 8006708:	6819      	ldreq	r1, [r3, #0]
 800670a:	685b      	ldreq	r3, [r3, #4]
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	bf04      	itt	eq
 8006710:	1949      	addeq	r1, r1, r5
 8006712:	6021      	streq	r1, [r4, #0]
 8006714:	6054      	str	r4, [r2, #4]
 8006716:	e7c7      	b.n	80066a8 <_free_r+0x28>
 8006718:	b003      	add	sp, #12
 800671a:	bd30      	pop	{r4, r5, pc}
 800671c:	20000aec 	.word	0x20000aec

08006720 <_malloc_r>:
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	1ccd      	adds	r5, r1, #3
 8006724:	f025 0503 	bic.w	r5, r5, #3
 8006728:	3508      	adds	r5, #8
 800672a:	2d0c      	cmp	r5, #12
 800672c:	bf38      	it	cc
 800672e:	250c      	movcc	r5, #12
 8006730:	2d00      	cmp	r5, #0
 8006732:	4606      	mov	r6, r0
 8006734:	db01      	blt.n	800673a <_malloc_r+0x1a>
 8006736:	42a9      	cmp	r1, r5
 8006738:	d903      	bls.n	8006742 <_malloc_r+0x22>
 800673a:	230c      	movs	r3, #12
 800673c:	6033      	str	r3, [r6, #0]
 800673e:	2000      	movs	r0, #0
 8006740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006742:	f001 fc4f 	bl	8007fe4 <__malloc_lock>
 8006746:	4921      	ldr	r1, [pc, #132]	; (80067cc <_malloc_r+0xac>)
 8006748:	680a      	ldr	r2, [r1, #0]
 800674a:	4614      	mov	r4, r2
 800674c:	b99c      	cbnz	r4, 8006776 <_malloc_r+0x56>
 800674e:	4f20      	ldr	r7, [pc, #128]	; (80067d0 <_malloc_r+0xb0>)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	b923      	cbnz	r3, 800675e <_malloc_r+0x3e>
 8006754:	4621      	mov	r1, r4
 8006756:	4630      	mov	r0, r6
 8006758:	f000 fcbe 	bl	80070d8 <_sbrk_r>
 800675c:	6038      	str	r0, [r7, #0]
 800675e:	4629      	mov	r1, r5
 8006760:	4630      	mov	r0, r6
 8006762:	f000 fcb9 	bl	80070d8 <_sbrk_r>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	d123      	bne.n	80067b2 <_malloc_r+0x92>
 800676a:	230c      	movs	r3, #12
 800676c:	6033      	str	r3, [r6, #0]
 800676e:	4630      	mov	r0, r6
 8006770:	f001 fc3e 	bl	8007ff0 <__malloc_unlock>
 8006774:	e7e3      	b.n	800673e <_malloc_r+0x1e>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	1b5b      	subs	r3, r3, r5
 800677a:	d417      	bmi.n	80067ac <_malloc_r+0x8c>
 800677c:	2b0b      	cmp	r3, #11
 800677e:	d903      	bls.n	8006788 <_malloc_r+0x68>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	441c      	add	r4, r3
 8006784:	6025      	str	r5, [r4, #0]
 8006786:	e004      	b.n	8006792 <_malloc_r+0x72>
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	42a2      	cmp	r2, r4
 800678c:	bf0c      	ite	eq
 800678e:	600b      	streq	r3, [r1, #0]
 8006790:	6053      	strne	r3, [r2, #4]
 8006792:	4630      	mov	r0, r6
 8006794:	f001 fc2c 	bl	8007ff0 <__malloc_unlock>
 8006798:	f104 000b 	add.w	r0, r4, #11
 800679c:	1d23      	adds	r3, r4, #4
 800679e:	f020 0007 	bic.w	r0, r0, #7
 80067a2:	1ac2      	subs	r2, r0, r3
 80067a4:	d0cc      	beq.n	8006740 <_malloc_r+0x20>
 80067a6:	1a1b      	subs	r3, r3, r0
 80067a8:	50a3      	str	r3, [r4, r2]
 80067aa:	e7c9      	b.n	8006740 <_malloc_r+0x20>
 80067ac:	4622      	mov	r2, r4
 80067ae:	6864      	ldr	r4, [r4, #4]
 80067b0:	e7cc      	b.n	800674c <_malloc_r+0x2c>
 80067b2:	1cc4      	adds	r4, r0, #3
 80067b4:	f024 0403 	bic.w	r4, r4, #3
 80067b8:	42a0      	cmp	r0, r4
 80067ba:	d0e3      	beq.n	8006784 <_malloc_r+0x64>
 80067bc:	1a21      	subs	r1, r4, r0
 80067be:	4630      	mov	r0, r6
 80067c0:	f000 fc8a 	bl	80070d8 <_sbrk_r>
 80067c4:	3001      	adds	r0, #1
 80067c6:	d1dd      	bne.n	8006784 <_malloc_r+0x64>
 80067c8:	e7cf      	b.n	800676a <_malloc_r+0x4a>
 80067ca:	bf00      	nop
 80067cc:	20000aec 	.word	0x20000aec
 80067d0:	20000af0 	.word	0x20000af0

080067d4 <__cvt>:
 80067d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	ec55 4b10 	vmov	r4, r5, d0
 80067dc:	2d00      	cmp	r5, #0
 80067de:	460e      	mov	r6, r1
 80067e0:	4619      	mov	r1, r3
 80067e2:	462b      	mov	r3, r5
 80067e4:	bfbb      	ittet	lt
 80067e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80067ea:	461d      	movlt	r5, r3
 80067ec:	2300      	movge	r3, #0
 80067ee:	232d      	movlt	r3, #45	; 0x2d
 80067f0:	700b      	strb	r3, [r1, #0]
 80067f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067f8:	4691      	mov	r9, r2
 80067fa:	f023 0820 	bic.w	r8, r3, #32
 80067fe:	bfbc      	itt	lt
 8006800:	4622      	movlt	r2, r4
 8006802:	4614      	movlt	r4, r2
 8006804:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006808:	d005      	beq.n	8006816 <__cvt+0x42>
 800680a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800680e:	d100      	bne.n	8006812 <__cvt+0x3e>
 8006810:	3601      	adds	r6, #1
 8006812:	2102      	movs	r1, #2
 8006814:	e000      	b.n	8006818 <__cvt+0x44>
 8006816:	2103      	movs	r1, #3
 8006818:	ab03      	add	r3, sp, #12
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	ab02      	add	r3, sp, #8
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	ec45 4b10 	vmov	d0, r4, r5
 8006824:	4653      	mov	r3, sl
 8006826:	4632      	mov	r2, r6
 8006828:	f000 fcf2 	bl	8007210 <_dtoa_r>
 800682c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006830:	4607      	mov	r7, r0
 8006832:	d102      	bne.n	800683a <__cvt+0x66>
 8006834:	f019 0f01 	tst.w	r9, #1
 8006838:	d022      	beq.n	8006880 <__cvt+0xac>
 800683a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800683e:	eb07 0906 	add.w	r9, r7, r6
 8006842:	d110      	bne.n	8006866 <__cvt+0x92>
 8006844:	783b      	ldrb	r3, [r7, #0]
 8006846:	2b30      	cmp	r3, #48	; 0x30
 8006848:	d10a      	bne.n	8006860 <__cvt+0x8c>
 800684a:	2200      	movs	r2, #0
 800684c:	2300      	movs	r3, #0
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	f7fa f939 	bl	8000ac8 <__aeabi_dcmpeq>
 8006856:	b918      	cbnz	r0, 8006860 <__cvt+0x8c>
 8006858:	f1c6 0601 	rsb	r6, r6, #1
 800685c:	f8ca 6000 	str.w	r6, [sl]
 8006860:	f8da 3000 	ldr.w	r3, [sl]
 8006864:	4499      	add	r9, r3
 8006866:	2200      	movs	r2, #0
 8006868:	2300      	movs	r3, #0
 800686a:	4620      	mov	r0, r4
 800686c:	4629      	mov	r1, r5
 800686e:	f7fa f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006872:	b108      	cbz	r0, 8006878 <__cvt+0xa4>
 8006874:	f8cd 900c 	str.w	r9, [sp, #12]
 8006878:	2230      	movs	r2, #48	; 0x30
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	454b      	cmp	r3, r9
 800687e:	d307      	bcc.n	8006890 <__cvt+0xbc>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006884:	1bdb      	subs	r3, r3, r7
 8006886:	4638      	mov	r0, r7
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	b004      	add	sp, #16
 800688c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006890:	1c59      	adds	r1, r3, #1
 8006892:	9103      	str	r1, [sp, #12]
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	e7f0      	b.n	800687a <__cvt+0xa6>

08006898 <__exponent>:
 8006898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800689a:	4603      	mov	r3, r0
 800689c:	2900      	cmp	r1, #0
 800689e:	bfb8      	it	lt
 80068a0:	4249      	neglt	r1, r1
 80068a2:	f803 2b02 	strb.w	r2, [r3], #2
 80068a6:	bfb4      	ite	lt
 80068a8:	222d      	movlt	r2, #45	; 0x2d
 80068aa:	222b      	movge	r2, #43	; 0x2b
 80068ac:	2909      	cmp	r1, #9
 80068ae:	7042      	strb	r2, [r0, #1]
 80068b0:	dd2a      	ble.n	8006908 <__exponent+0x70>
 80068b2:	f10d 0407 	add.w	r4, sp, #7
 80068b6:	46a4      	mov	ip, r4
 80068b8:	270a      	movs	r7, #10
 80068ba:	46a6      	mov	lr, r4
 80068bc:	460a      	mov	r2, r1
 80068be:	fb91 f6f7 	sdiv	r6, r1, r7
 80068c2:	fb07 1516 	mls	r5, r7, r6, r1
 80068c6:	3530      	adds	r5, #48	; 0x30
 80068c8:	2a63      	cmp	r2, #99	; 0x63
 80068ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80068ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068d2:	4631      	mov	r1, r6
 80068d4:	dcf1      	bgt.n	80068ba <__exponent+0x22>
 80068d6:	3130      	adds	r1, #48	; 0x30
 80068d8:	f1ae 0502 	sub.w	r5, lr, #2
 80068dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80068e0:	1c44      	adds	r4, r0, #1
 80068e2:	4629      	mov	r1, r5
 80068e4:	4561      	cmp	r1, ip
 80068e6:	d30a      	bcc.n	80068fe <__exponent+0x66>
 80068e8:	f10d 0209 	add.w	r2, sp, #9
 80068ec:	eba2 020e 	sub.w	r2, r2, lr
 80068f0:	4565      	cmp	r5, ip
 80068f2:	bf88      	it	hi
 80068f4:	2200      	movhi	r2, #0
 80068f6:	4413      	add	r3, r2
 80068f8:	1a18      	subs	r0, r3, r0
 80068fa:	b003      	add	sp, #12
 80068fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006902:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006906:	e7ed      	b.n	80068e4 <__exponent+0x4c>
 8006908:	2330      	movs	r3, #48	; 0x30
 800690a:	3130      	adds	r1, #48	; 0x30
 800690c:	7083      	strb	r3, [r0, #2]
 800690e:	70c1      	strb	r1, [r0, #3]
 8006910:	1d03      	adds	r3, r0, #4
 8006912:	e7f1      	b.n	80068f8 <__exponent+0x60>

08006914 <_printf_float>:
 8006914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006918:	ed2d 8b02 	vpush	{d8}
 800691c:	b08d      	sub	sp, #52	; 0x34
 800691e:	460c      	mov	r4, r1
 8006920:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006924:	4616      	mov	r6, r2
 8006926:	461f      	mov	r7, r3
 8006928:	4605      	mov	r5, r0
 800692a:	f001 fb53 	bl	8007fd4 <_localeconv_r>
 800692e:	f8d0 a000 	ldr.w	sl, [r0]
 8006932:	4650      	mov	r0, sl
 8006934:	f7f9 fc4c 	bl	80001d0 <strlen>
 8006938:	2300      	movs	r3, #0
 800693a:	930a      	str	r3, [sp, #40]	; 0x28
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	9305      	str	r3, [sp, #20]
 8006940:	f8d8 3000 	ldr.w	r3, [r8]
 8006944:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006948:	3307      	adds	r3, #7
 800694a:	f023 0307 	bic.w	r3, r3, #7
 800694e:	f103 0208 	add.w	r2, r3, #8
 8006952:	f8c8 2000 	str.w	r2, [r8]
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800695e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006962:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006966:	9307      	str	r3, [sp, #28]
 8006968:	f8cd 8018 	str.w	r8, [sp, #24]
 800696c:	ee08 0a10 	vmov	s16, r0
 8006970:	4b9f      	ldr	r3, [pc, #636]	; (8006bf0 <_printf_float+0x2dc>)
 8006972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006976:	f04f 32ff 	mov.w	r2, #4294967295
 800697a:	f7fa f8d7 	bl	8000b2c <__aeabi_dcmpun>
 800697e:	bb88      	cbnz	r0, 80069e4 <_printf_float+0xd0>
 8006980:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006984:	4b9a      	ldr	r3, [pc, #616]	; (8006bf0 <_printf_float+0x2dc>)
 8006986:	f04f 32ff 	mov.w	r2, #4294967295
 800698a:	f7fa f8b1 	bl	8000af0 <__aeabi_dcmple>
 800698e:	bb48      	cbnz	r0, 80069e4 <_printf_float+0xd0>
 8006990:	2200      	movs	r2, #0
 8006992:	2300      	movs	r3, #0
 8006994:	4640      	mov	r0, r8
 8006996:	4649      	mov	r1, r9
 8006998:	f7fa f8a0 	bl	8000adc <__aeabi_dcmplt>
 800699c:	b110      	cbz	r0, 80069a4 <_printf_float+0x90>
 800699e:	232d      	movs	r3, #45	; 0x2d
 80069a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069a4:	4b93      	ldr	r3, [pc, #588]	; (8006bf4 <_printf_float+0x2e0>)
 80069a6:	4894      	ldr	r0, [pc, #592]	; (8006bf8 <_printf_float+0x2e4>)
 80069a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80069ac:	bf94      	ite	ls
 80069ae:	4698      	movls	r8, r3
 80069b0:	4680      	movhi	r8, r0
 80069b2:	2303      	movs	r3, #3
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	9b05      	ldr	r3, [sp, #20]
 80069b8:	f023 0204 	bic.w	r2, r3, #4
 80069bc:	6022      	str	r2, [r4, #0]
 80069be:	f04f 0900 	mov.w	r9, #0
 80069c2:	9700      	str	r7, [sp, #0]
 80069c4:	4633      	mov	r3, r6
 80069c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80069c8:	4621      	mov	r1, r4
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 f9d8 	bl	8006d80 <_printf_common>
 80069d0:	3001      	adds	r0, #1
 80069d2:	f040 8090 	bne.w	8006af6 <_printf_float+0x1e2>
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295
 80069da:	b00d      	add	sp, #52	; 0x34
 80069dc:	ecbd 8b02 	vpop	{d8}
 80069e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e4:	4642      	mov	r2, r8
 80069e6:	464b      	mov	r3, r9
 80069e8:	4640      	mov	r0, r8
 80069ea:	4649      	mov	r1, r9
 80069ec:	f7fa f89e 	bl	8000b2c <__aeabi_dcmpun>
 80069f0:	b140      	cbz	r0, 8006a04 <_printf_float+0xf0>
 80069f2:	464b      	mov	r3, r9
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	bfbc      	itt	lt
 80069f8:	232d      	movlt	r3, #45	; 0x2d
 80069fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069fe:	487f      	ldr	r0, [pc, #508]	; (8006bfc <_printf_float+0x2e8>)
 8006a00:	4b7f      	ldr	r3, [pc, #508]	; (8006c00 <_printf_float+0x2ec>)
 8006a02:	e7d1      	b.n	80069a8 <_printf_float+0x94>
 8006a04:	6863      	ldr	r3, [r4, #4]
 8006a06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a0a:	9206      	str	r2, [sp, #24]
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	d13f      	bne.n	8006a90 <_printf_float+0x17c>
 8006a10:	2306      	movs	r3, #6
 8006a12:	6063      	str	r3, [r4, #4]
 8006a14:	9b05      	ldr	r3, [sp, #20]
 8006a16:	6861      	ldr	r1, [r4, #4]
 8006a18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9303      	str	r3, [sp, #12]
 8006a20:	ab0a      	add	r3, sp, #40	; 0x28
 8006a22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a26:	ab09      	add	r3, sp, #36	; 0x24
 8006a28:	ec49 8b10 	vmov	d0, r8, r9
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	6022      	str	r2, [r4, #0]
 8006a30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a34:	4628      	mov	r0, r5
 8006a36:	f7ff fecd 	bl	80067d4 <__cvt>
 8006a3a:	9b06      	ldr	r3, [sp, #24]
 8006a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a3e:	2b47      	cmp	r3, #71	; 0x47
 8006a40:	4680      	mov	r8, r0
 8006a42:	d108      	bne.n	8006a56 <_printf_float+0x142>
 8006a44:	1cc8      	adds	r0, r1, #3
 8006a46:	db02      	blt.n	8006a4e <_printf_float+0x13a>
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	4299      	cmp	r1, r3
 8006a4c:	dd41      	ble.n	8006ad2 <_printf_float+0x1be>
 8006a4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a52:	fa5f fb8b 	uxtb.w	fp, fp
 8006a56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a5a:	d820      	bhi.n	8006a9e <_printf_float+0x18a>
 8006a5c:	3901      	subs	r1, #1
 8006a5e:	465a      	mov	r2, fp
 8006a60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a64:	9109      	str	r1, [sp, #36]	; 0x24
 8006a66:	f7ff ff17 	bl	8006898 <__exponent>
 8006a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a6c:	1813      	adds	r3, r2, r0
 8006a6e:	2a01      	cmp	r2, #1
 8006a70:	4681      	mov	r9, r0
 8006a72:	6123      	str	r3, [r4, #16]
 8006a74:	dc02      	bgt.n	8006a7c <_printf_float+0x168>
 8006a76:	6822      	ldr	r2, [r4, #0]
 8006a78:	07d2      	lsls	r2, r2, #31
 8006a7a:	d501      	bpl.n	8006a80 <_printf_float+0x16c>
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	6123      	str	r3, [r4, #16]
 8006a80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d09c      	beq.n	80069c2 <_printf_float+0xae>
 8006a88:	232d      	movs	r3, #45	; 0x2d
 8006a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a8e:	e798      	b.n	80069c2 <_printf_float+0xae>
 8006a90:	9a06      	ldr	r2, [sp, #24]
 8006a92:	2a47      	cmp	r2, #71	; 0x47
 8006a94:	d1be      	bne.n	8006a14 <_printf_float+0x100>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1bc      	bne.n	8006a14 <_printf_float+0x100>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e7b9      	b.n	8006a12 <_printf_float+0xfe>
 8006a9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006aa2:	d118      	bne.n	8006ad6 <_printf_float+0x1c2>
 8006aa4:	2900      	cmp	r1, #0
 8006aa6:	6863      	ldr	r3, [r4, #4]
 8006aa8:	dd0b      	ble.n	8006ac2 <_printf_float+0x1ae>
 8006aaa:	6121      	str	r1, [r4, #16]
 8006aac:	b913      	cbnz	r3, 8006ab4 <_printf_float+0x1a0>
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	07d0      	lsls	r0, r2, #31
 8006ab2:	d502      	bpl.n	8006aba <_printf_float+0x1a6>
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	440b      	add	r3, r1
 8006ab8:	6123      	str	r3, [r4, #16]
 8006aba:	65a1      	str	r1, [r4, #88]	; 0x58
 8006abc:	f04f 0900 	mov.w	r9, #0
 8006ac0:	e7de      	b.n	8006a80 <_printf_float+0x16c>
 8006ac2:	b913      	cbnz	r3, 8006aca <_printf_float+0x1b6>
 8006ac4:	6822      	ldr	r2, [r4, #0]
 8006ac6:	07d2      	lsls	r2, r2, #31
 8006ac8:	d501      	bpl.n	8006ace <_printf_float+0x1ba>
 8006aca:	3302      	adds	r3, #2
 8006acc:	e7f4      	b.n	8006ab8 <_printf_float+0x1a4>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e7f2      	b.n	8006ab8 <_printf_float+0x1a4>
 8006ad2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad8:	4299      	cmp	r1, r3
 8006ada:	db05      	blt.n	8006ae8 <_printf_float+0x1d4>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	6121      	str	r1, [r4, #16]
 8006ae0:	07d8      	lsls	r0, r3, #31
 8006ae2:	d5ea      	bpl.n	8006aba <_printf_float+0x1a6>
 8006ae4:	1c4b      	adds	r3, r1, #1
 8006ae6:	e7e7      	b.n	8006ab8 <_printf_float+0x1a4>
 8006ae8:	2900      	cmp	r1, #0
 8006aea:	bfd4      	ite	le
 8006aec:	f1c1 0202 	rsble	r2, r1, #2
 8006af0:	2201      	movgt	r2, #1
 8006af2:	4413      	add	r3, r2
 8006af4:	e7e0      	b.n	8006ab8 <_printf_float+0x1a4>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	055a      	lsls	r2, r3, #21
 8006afa:	d407      	bmi.n	8006b0c <_printf_float+0x1f8>
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	4642      	mov	r2, r8
 8006b00:	4631      	mov	r1, r6
 8006b02:	4628      	mov	r0, r5
 8006b04:	47b8      	blx	r7
 8006b06:	3001      	adds	r0, #1
 8006b08:	d12c      	bne.n	8006b64 <_printf_float+0x250>
 8006b0a:	e764      	b.n	80069d6 <_printf_float+0xc2>
 8006b0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b10:	f240 80e0 	bls.w	8006cd4 <_printf_float+0x3c0>
 8006b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f7f9 ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d034      	beq.n	8006b8e <_printf_float+0x27a>
 8006b24:	4a37      	ldr	r2, [pc, #220]	; (8006c04 <_printf_float+0x2f0>)
 8006b26:	2301      	movs	r3, #1
 8006b28:	4631      	mov	r1, r6
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	47b8      	blx	r7
 8006b2e:	3001      	adds	r0, #1
 8006b30:	f43f af51 	beq.w	80069d6 <_printf_float+0xc2>
 8006b34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	db02      	blt.n	8006b42 <_printf_float+0x22e>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	07d8      	lsls	r0, r3, #31
 8006b40:	d510      	bpl.n	8006b64 <_printf_float+0x250>
 8006b42:	ee18 3a10 	vmov	r3, s16
 8006b46:	4652      	mov	r2, sl
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	47b8      	blx	r7
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f43f af41 	beq.w	80069d6 <_printf_float+0xc2>
 8006b54:	f04f 0800 	mov.w	r8, #0
 8006b58:	f104 091a 	add.w	r9, r4, #26
 8006b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	4543      	cmp	r3, r8
 8006b62:	dc09      	bgt.n	8006b78 <_printf_float+0x264>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	079b      	lsls	r3, r3, #30
 8006b68:	f100 8105 	bmi.w	8006d76 <_printf_float+0x462>
 8006b6c:	68e0      	ldr	r0, [r4, #12]
 8006b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b70:	4298      	cmp	r0, r3
 8006b72:	bfb8      	it	lt
 8006b74:	4618      	movlt	r0, r3
 8006b76:	e730      	b.n	80069da <_printf_float+0xc6>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	464a      	mov	r2, r9
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4628      	mov	r0, r5
 8006b80:	47b8      	blx	r7
 8006b82:	3001      	adds	r0, #1
 8006b84:	f43f af27 	beq.w	80069d6 <_printf_float+0xc2>
 8006b88:	f108 0801 	add.w	r8, r8, #1
 8006b8c:	e7e6      	b.n	8006b5c <_printf_float+0x248>
 8006b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	dc39      	bgt.n	8006c08 <_printf_float+0x2f4>
 8006b94:	4a1b      	ldr	r2, [pc, #108]	; (8006c04 <_printf_float+0x2f0>)
 8006b96:	2301      	movs	r3, #1
 8006b98:	4631      	mov	r1, r6
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	47b8      	blx	r7
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	f43f af19 	beq.w	80069d6 <_printf_float+0xc2>
 8006ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	d102      	bne.n	8006bb2 <_printf_float+0x29e>
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	07d9      	lsls	r1, r3, #31
 8006bb0:	d5d8      	bpl.n	8006b64 <_printf_float+0x250>
 8006bb2:	ee18 3a10 	vmov	r3, s16
 8006bb6:	4652      	mov	r2, sl
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b8      	blx	r7
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	f43f af09 	beq.w	80069d6 <_printf_float+0xc2>
 8006bc4:	f04f 0900 	mov.w	r9, #0
 8006bc8:	f104 0a1a 	add.w	sl, r4, #26
 8006bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bce:	425b      	negs	r3, r3
 8006bd0:	454b      	cmp	r3, r9
 8006bd2:	dc01      	bgt.n	8006bd8 <_printf_float+0x2c4>
 8006bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd6:	e792      	b.n	8006afe <_printf_float+0x1ea>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	4652      	mov	r2, sl
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	f43f aef7 	beq.w	80069d6 <_printf_float+0xc2>
 8006be8:	f109 0901 	add.w	r9, r9, #1
 8006bec:	e7ee      	b.n	8006bcc <_printf_float+0x2b8>
 8006bee:	bf00      	nop
 8006bf0:	7fefffff 	.word	0x7fefffff
 8006bf4:	08009a6c 	.word	0x08009a6c
 8006bf8:	08009a70 	.word	0x08009a70
 8006bfc:	08009a78 	.word	0x08009a78
 8006c00:	08009a74 	.word	0x08009a74
 8006c04:	08009a7c 	.word	0x08009a7c
 8006c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	bfa8      	it	ge
 8006c10:	461a      	movge	r2, r3
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	4691      	mov	r9, r2
 8006c16:	dc37      	bgt.n	8006c88 <_printf_float+0x374>
 8006c18:	f04f 0b00 	mov.w	fp, #0
 8006c1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c20:	f104 021a 	add.w	r2, r4, #26
 8006c24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c26:	9305      	str	r3, [sp, #20]
 8006c28:	eba3 0309 	sub.w	r3, r3, r9
 8006c2c:	455b      	cmp	r3, fp
 8006c2e:	dc33      	bgt.n	8006c98 <_printf_float+0x384>
 8006c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c34:	429a      	cmp	r2, r3
 8006c36:	db3b      	blt.n	8006cb0 <_printf_float+0x39c>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	07da      	lsls	r2, r3, #31
 8006c3c:	d438      	bmi.n	8006cb0 <_printf_float+0x39c>
 8006c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c40:	9b05      	ldr	r3, [sp, #20]
 8006c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	eba2 0901 	sub.w	r9, r2, r1
 8006c4a:	4599      	cmp	r9, r3
 8006c4c:	bfa8      	it	ge
 8006c4e:	4699      	movge	r9, r3
 8006c50:	f1b9 0f00 	cmp.w	r9, #0
 8006c54:	dc35      	bgt.n	8006cc2 <_printf_float+0x3ae>
 8006c56:	f04f 0800 	mov.w	r8, #0
 8006c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c5e:	f104 0a1a 	add.w	sl, r4, #26
 8006c62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	eba3 0309 	sub.w	r3, r3, r9
 8006c6c:	4543      	cmp	r3, r8
 8006c6e:	f77f af79 	ble.w	8006b64 <_printf_float+0x250>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4652      	mov	r2, sl
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f43f aeaa 	beq.w	80069d6 <_printf_float+0xc2>
 8006c82:	f108 0801 	add.w	r8, r8, #1
 8006c86:	e7ec      	b.n	8006c62 <_printf_float+0x34e>
 8006c88:	4613      	mov	r3, r2
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	4628      	mov	r0, r5
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	d1c0      	bne.n	8006c18 <_printf_float+0x304>
 8006c96:	e69e      	b.n	80069d6 <_printf_float+0xc2>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	9205      	str	r2, [sp, #20]
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	f43f ae97 	beq.w	80069d6 <_printf_float+0xc2>
 8006ca8:	9a05      	ldr	r2, [sp, #20]
 8006caa:	f10b 0b01 	add.w	fp, fp, #1
 8006cae:	e7b9      	b.n	8006c24 <_printf_float+0x310>
 8006cb0:	ee18 3a10 	vmov	r3, s16
 8006cb4:	4652      	mov	r2, sl
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d1be      	bne.n	8006c3e <_printf_float+0x32a>
 8006cc0:	e689      	b.n	80069d6 <_printf_float+0xc2>
 8006cc2:	9a05      	ldr	r2, [sp, #20]
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	4442      	add	r2, r8
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d1c1      	bne.n	8006c56 <_printf_float+0x342>
 8006cd2:	e680      	b.n	80069d6 <_printf_float+0xc2>
 8006cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cd6:	2a01      	cmp	r2, #1
 8006cd8:	dc01      	bgt.n	8006cde <_printf_float+0x3ca>
 8006cda:	07db      	lsls	r3, r3, #31
 8006cdc:	d538      	bpl.n	8006d50 <_printf_float+0x43c>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	f43f ae74 	beq.w	80069d6 <_printf_float+0xc2>
 8006cee:	ee18 3a10 	vmov	r3, s16
 8006cf2:	4652      	mov	r2, sl
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	47b8      	blx	r7
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	f43f ae6b 	beq.w	80069d6 <_printf_float+0xc2>
 8006d00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d04:	2200      	movs	r2, #0
 8006d06:	2300      	movs	r3, #0
 8006d08:	f7f9 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d0c:	b9d8      	cbnz	r0, 8006d46 <_printf_float+0x432>
 8006d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d10:	f108 0201 	add.w	r2, r8, #1
 8006d14:	3b01      	subs	r3, #1
 8006d16:	4631      	mov	r1, r6
 8006d18:	4628      	mov	r0, r5
 8006d1a:	47b8      	blx	r7
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d10e      	bne.n	8006d3e <_printf_float+0x42a>
 8006d20:	e659      	b.n	80069d6 <_printf_float+0xc2>
 8006d22:	2301      	movs	r3, #1
 8006d24:	4652      	mov	r2, sl
 8006d26:	4631      	mov	r1, r6
 8006d28:	4628      	mov	r0, r5
 8006d2a:	47b8      	blx	r7
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	f43f ae52 	beq.w	80069d6 <_printf_float+0xc2>
 8006d32:	f108 0801 	add.w	r8, r8, #1
 8006d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	4543      	cmp	r3, r8
 8006d3c:	dcf1      	bgt.n	8006d22 <_printf_float+0x40e>
 8006d3e:	464b      	mov	r3, r9
 8006d40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d44:	e6dc      	b.n	8006b00 <_printf_float+0x1ec>
 8006d46:	f04f 0800 	mov.w	r8, #0
 8006d4a:	f104 0a1a 	add.w	sl, r4, #26
 8006d4e:	e7f2      	b.n	8006d36 <_printf_float+0x422>
 8006d50:	2301      	movs	r3, #1
 8006d52:	4642      	mov	r2, r8
 8006d54:	e7df      	b.n	8006d16 <_printf_float+0x402>
 8006d56:	2301      	movs	r3, #1
 8006d58:	464a      	mov	r2, r9
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	47b8      	blx	r7
 8006d60:	3001      	adds	r0, #1
 8006d62:	f43f ae38 	beq.w	80069d6 <_printf_float+0xc2>
 8006d66:	f108 0801 	add.w	r8, r8, #1
 8006d6a:	68e3      	ldr	r3, [r4, #12]
 8006d6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d6e:	1a5b      	subs	r3, r3, r1
 8006d70:	4543      	cmp	r3, r8
 8006d72:	dcf0      	bgt.n	8006d56 <_printf_float+0x442>
 8006d74:	e6fa      	b.n	8006b6c <_printf_float+0x258>
 8006d76:	f04f 0800 	mov.w	r8, #0
 8006d7a:	f104 0919 	add.w	r9, r4, #25
 8006d7e:	e7f4      	b.n	8006d6a <_printf_float+0x456>

08006d80 <_printf_common>:
 8006d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	4616      	mov	r6, r2
 8006d86:	4699      	mov	r9, r3
 8006d88:	688a      	ldr	r2, [r1, #8]
 8006d8a:	690b      	ldr	r3, [r1, #16]
 8006d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d90:	4293      	cmp	r3, r2
 8006d92:	bfb8      	it	lt
 8006d94:	4613      	movlt	r3, r2
 8006d96:	6033      	str	r3, [r6, #0]
 8006d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d9c:	4607      	mov	r7, r0
 8006d9e:	460c      	mov	r4, r1
 8006da0:	b10a      	cbz	r2, 8006da6 <_printf_common+0x26>
 8006da2:	3301      	adds	r3, #1
 8006da4:	6033      	str	r3, [r6, #0]
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	0699      	lsls	r1, r3, #26
 8006daa:	bf42      	ittt	mi
 8006dac:	6833      	ldrmi	r3, [r6, #0]
 8006dae:	3302      	addmi	r3, #2
 8006db0:	6033      	strmi	r3, [r6, #0]
 8006db2:	6825      	ldr	r5, [r4, #0]
 8006db4:	f015 0506 	ands.w	r5, r5, #6
 8006db8:	d106      	bne.n	8006dc8 <_printf_common+0x48>
 8006dba:	f104 0a19 	add.w	sl, r4, #25
 8006dbe:	68e3      	ldr	r3, [r4, #12]
 8006dc0:	6832      	ldr	r2, [r6, #0]
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	42ab      	cmp	r3, r5
 8006dc6:	dc26      	bgt.n	8006e16 <_printf_common+0x96>
 8006dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dcc:	1e13      	subs	r3, r2, #0
 8006dce:	6822      	ldr	r2, [r4, #0]
 8006dd0:	bf18      	it	ne
 8006dd2:	2301      	movne	r3, #1
 8006dd4:	0692      	lsls	r2, r2, #26
 8006dd6:	d42b      	bmi.n	8006e30 <_printf_common+0xb0>
 8006dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ddc:	4649      	mov	r1, r9
 8006dde:	4638      	mov	r0, r7
 8006de0:	47c0      	blx	r8
 8006de2:	3001      	adds	r0, #1
 8006de4:	d01e      	beq.n	8006e24 <_printf_common+0xa4>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	68e5      	ldr	r5, [r4, #12]
 8006dea:	6832      	ldr	r2, [r6, #0]
 8006dec:	f003 0306 	and.w	r3, r3, #6
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	bf08      	it	eq
 8006df4:	1aad      	subeq	r5, r5, r2
 8006df6:	68a3      	ldr	r3, [r4, #8]
 8006df8:	6922      	ldr	r2, [r4, #16]
 8006dfa:	bf0c      	ite	eq
 8006dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e00:	2500      	movne	r5, #0
 8006e02:	4293      	cmp	r3, r2
 8006e04:	bfc4      	itt	gt
 8006e06:	1a9b      	subgt	r3, r3, r2
 8006e08:	18ed      	addgt	r5, r5, r3
 8006e0a:	2600      	movs	r6, #0
 8006e0c:	341a      	adds	r4, #26
 8006e0e:	42b5      	cmp	r5, r6
 8006e10:	d11a      	bne.n	8006e48 <_printf_common+0xc8>
 8006e12:	2000      	movs	r0, #0
 8006e14:	e008      	b.n	8006e28 <_printf_common+0xa8>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4652      	mov	r2, sl
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	47c0      	blx	r8
 8006e20:	3001      	adds	r0, #1
 8006e22:	d103      	bne.n	8006e2c <_printf_common+0xac>
 8006e24:	f04f 30ff 	mov.w	r0, #4294967295
 8006e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	e7c6      	b.n	8006dbe <_printf_common+0x3e>
 8006e30:	18e1      	adds	r1, r4, r3
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	2030      	movs	r0, #48	; 0x30
 8006e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e3a:	4422      	add	r2, r4
 8006e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e44:	3302      	adds	r3, #2
 8006e46:	e7c7      	b.n	8006dd8 <_printf_common+0x58>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	4622      	mov	r2, r4
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	4638      	mov	r0, r7
 8006e50:	47c0      	blx	r8
 8006e52:	3001      	adds	r0, #1
 8006e54:	d0e6      	beq.n	8006e24 <_printf_common+0xa4>
 8006e56:	3601      	adds	r6, #1
 8006e58:	e7d9      	b.n	8006e0e <_printf_common+0x8e>
	...

08006e5c <_printf_i>:
 8006e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	460c      	mov	r4, r1
 8006e62:	4691      	mov	r9, r2
 8006e64:	7e27      	ldrb	r7, [r4, #24]
 8006e66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e68:	2f78      	cmp	r7, #120	; 0x78
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	469a      	mov	sl, r3
 8006e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e72:	d807      	bhi.n	8006e84 <_printf_i+0x28>
 8006e74:	2f62      	cmp	r7, #98	; 0x62
 8006e76:	d80a      	bhi.n	8006e8e <_printf_i+0x32>
 8006e78:	2f00      	cmp	r7, #0
 8006e7a:	f000 80d8 	beq.w	800702e <_printf_i+0x1d2>
 8006e7e:	2f58      	cmp	r7, #88	; 0x58
 8006e80:	f000 80a3 	beq.w	8006fca <_printf_i+0x16e>
 8006e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e8c:	e03a      	b.n	8006f04 <_printf_i+0xa8>
 8006e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e92:	2b15      	cmp	r3, #21
 8006e94:	d8f6      	bhi.n	8006e84 <_printf_i+0x28>
 8006e96:	a001      	add	r0, pc, #4	; (adr r0, 8006e9c <_printf_i+0x40>)
 8006e98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e9c:	08006ef5 	.word	0x08006ef5
 8006ea0:	08006f09 	.word	0x08006f09
 8006ea4:	08006e85 	.word	0x08006e85
 8006ea8:	08006e85 	.word	0x08006e85
 8006eac:	08006e85 	.word	0x08006e85
 8006eb0:	08006e85 	.word	0x08006e85
 8006eb4:	08006f09 	.word	0x08006f09
 8006eb8:	08006e85 	.word	0x08006e85
 8006ebc:	08006e85 	.word	0x08006e85
 8006ec0:	08006e85 	.word	0x08006e85
 8006ec4:	08006e85 	.word	0x08006e85
 8006ec8:	08007015 	.word	0x08007015
 8006ecc:	08006f39 	.word	0x08006f39
 8006ed0:	08006ff7 	.word	0x08006ff7
 8006ed4:	08006e85 	.word	0x08006e85
 8006ed8:	08006e85 	.word	0x08006e85
 8006edc:	08007037 	.word	0x08007037
 8006ee0:	08006e85 	.word	0x08006e85
 8006ee4:	08006f39 	.word	0x08006f39
 8006ee8:	08006e85 	.word	0x08006e85
 8006eec:	08006e85 	.word	0x08006e85
 8006ef0:	08006fff 	.word	0x08006fff
 8006ef4:	680b      	ldr	r3, [r1, #0]
 8006ef6:	1d1a      	adds	r2, r3, #4
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	600a      	str	r2, [r1, #0]
 8006efc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f04:	2301      	movs	r3, #1
 8006f06:	e0a3      	b.n	8007050 <_printf_i+0x1f4>
 8006f08:	6825      	ldr	r5, [r4, #0]
 8006f0a:	6808      	ldr	r0, [r1, #0]
 8006f0c:	062e      	lsls	r6, r5, #24
 8006f0e:	f100 0304 	add.w	r3, r0, #4
 8006f12:	d50a      	bpl.n	8006f2a <_printf_i+0xce>
 8006f14:	6805      	ldr	r5, [r0, #0]
 8006f16:	600b      	str	r3, [r1, #0]
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	da03      	bge.n	8006f24 <_printf_i+0xc8>
 8006f1c:	232d      	movs	r3, #45	; 0x2d
 8006f1e:	426d      	negs	r5, r5
 8006f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f24:	485e      	ldr	r0, [pc, #376]	; (80070a0 <_printf_i+0x244>)
 8006f26:	230a      	movs	r3, #10
 8006f28:	e019      	b.n	8006f5e <_printf_i+0x102>
 8006f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f2e:	6805      	ldr	r5, [r0, #0]
 8006f30:	600b      	str	r3, [r1, #0]
 8006f32:	bf18      	it	ne
 8006f34:	b22d      	sxthne	r5, r5
 8006f36:	e7ef      	b.n	8006f18 <_printf_i+0xbc>
 8006f38:	680b      	ldr	r3, [r1, #0]
 8006f3a:	6825      	ldr	r5, [r4, #0]
 8006f3c:	1d18      	adds	r0, r3, #4
 8006f3e:	6008      	str	r0, [r1, #0]
 8006f40:	0628      	lsls	r0, r5, #24
 8006f42:	d501      	bpl.n	8006f48 <_printf_i+0xec>
 8006f44:	681d      	ldr	r5, [r3, #0]
 8006f46:	e002      	b.n	8006f4e <_printf_i+0xf2>
 8006f48:	0669      	lsls	r1, r5, #25
 8006f4a:	d5fb      	bpl.n	8006f44 <_printf_i+0xe8>
 8006f4c:	881d      	ldrh	r5, [r3, #0]
 8006f4e:	4854      	ldr	r0, [pc, #336]	; (80070a0 <_printf_i+0x244>)
 8006f50:	2f6f      	cmp	r7, #111	; 0x6f
 8006f52:	bf0c      	ite	eq
 8006f54:	2308      	moveq	r3, #8
 8006f56:	230a      	movne	r3, #10
 8006f58:	2100      	movs	r1, #0
 8006f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f5e:	6866      	ldr	r6, [r4, #4]
 8006f60:	60a6      	str	r6, [r4, #8]
 8006f62:	2e00      	cmp	r6, #0
 8006f64:	bfa2      	ittt	ge
 8006f66:	6821      	ldrge	r1, [r4, #0]
 8006f68:	f021 0104 	bicge.w	r1, r1, #4
 8006f6c:	6021      	strge	r1, [r4, #0]
 8006f6e:	b90d      	cbnz	r5, 8006f74 <_printf_i+0x118>
 8006f70:	2e00      	cmp	r6, #0
 8006f72:	d04d      	beq.n	8007010 <_printf_i+0x1b4>
 8006f74:	4616      	mov	r6, r2
 8006f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8006f7e:	5dc7      	ldrb	r7, [r0, r7]
 8006f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f84:	462f      	mov	r7, r5
 8006f86:	42bb      	cmp	r3, r7
 8006f88:	460d      	mov	r5, r1
 8006f8a:	d9f4      	bls.n	8006f76 <_printf_i+0x11a>
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d10b      	bne.n	8006fa8 <_printf_i+0x14c>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	07df      	lsls	r7, r3, #31
 8006f94:	d508      	bpl.n	8006fa8 <_printf_i+0x14c>
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	6861      	ldr	r1, [r4, #4]
 8006f9a:	4299      	cmp	r1, r3
 8006f9c:	bfde      	ittt	le
 8006f9e:	2330      	movle	r3, #48	; 0x30
 8006fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fa8:	1b92      	subs	r2, r2, r6
 8006faa:	6122      	str	r2, [r4, #16]
 8006fac:	f8cd a000 	str.w	sl, [sp]
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	aa03      	add	r2, sp, #12
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	f7ff fee2 	bl	8006d80 <_printf_common>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d14c      	bne.n	800705a <_printf_i+0x1fe>
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	b004      	add	sp, #16
 8006fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fca:	4835      	ldr	r0, [pc, #212]	; (80070a0 <_printf_i+0x244>)
 8006fcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	680e      	ldr	r6, [r1, #0]
 8006fd4:	061f      	lsls	r7, r3, #24
 8006fd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006fda:	600e      	str	r6, [r1, #0]
 8006fdc:	d514      	bpl.n	8007008 <_printf_i+0x1ac>
 8006fde:	07d9      	lsls	r1, r3, #31
 8006fe0:	bf44      	itt	mi
 8006fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8006fe6:	6023      	strmi	r3, [r4, #0]
 8006fe8:	b91d      	cbnz	r5, 8006ff2 <_printf_i+0x196>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	f023 0320 	bic.w	r3, r3, #32
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	2310      	movs	r3, #16
 8006ff4:	e7b0      	b.n	8006f58 <_printf_i+0xfc>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	f043 0320 	orr.w	r3, r3, #32
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	2378      	movs	r3, #120	; 0x78
 8007000:	4828      	ldr	r0, [pc, #160]	; (80070a4 <_printf_i+0x248>)
 8007002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007006:	e7e3      	b.n	8006fd0 <_printf_i+0x174>
 8007008:	065e      	lsls	r6, r3, #25
 800700a:	bf48      	it	mi
 800700c:	b2ad      	uxthmi	r5, r5
 800700e:	e7e6      	b.n	8006fde <_printf_i+0x182>
 8007010:	4616      	mov	r6, r2
 8007012:	e7bb      	b.n	8006f8c <_printf_i+0x130>
 8007014:	680b      	ldr	r3, [r1, #0]
 8007016:	6826      	ldr	r6, [r4, #0]
 8007018:	6960      	ldr	r0, [r4, #20]
 800701a:	1d1d      	adds	r5, r3, #4
 800701c:	600d      	str	r5, [r1, #0]
 800701e:	0635      	lsls	r5, r6, #24
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	d501      	bpl.n	8007028 <_printf_i+0x1cc>
 8007024:	6018      	str	r0, [r3, #0]
 8007026:	e002      	b.n	800702e <_printf_i+0x1d2>
 8007028:	0671      	lsls	r1, r6, #25
 800702a:	d5fb      	bpl.n	8007024 <_printf_i+0x1c8>
 800702c:	8018      	strh	r0, [r3, #0]
 800702e:	2300      	movs	r3, #0
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	4616      	mov	r6, r2
 8007034:	e7ba      	b.n	8006fac <_printf_i+0x150>
 8007036:	680b      	ldr	r3, [r1, #0]
 8007038:	1d1a      	adds	r2, r3, #4
 800703a:	600a      	str	r2, [r1, #0]
 800703c:	681e      	ldr	r6, [r3, #0]
 800703e:	6862      	ldr	r2, [r4, #4]
 8007040:	2100      	movs	r1, #0
 8007042:	4630      	mov	r0, r6
 8007044:	f7f9 f8cc 	bl	80001e0 <memchr>
 8007048:	b108      	cbz	r0, 800704e <_printf_i+0x1f2>
 800704a:	1b80      	subs	r0, r0, r6
 800704c:	6060      	str	r0, [r4, #4]
 800704e:	6863      	ldr	r3, [r4, #4]
 8007050:	6123      	str	r3, [r4, #16]
 8007052:	2300      	movs	r3, #0
 8007054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007058:	e7a8      	b.n	8006fac <_printf_i+0x150>
 800705a:	6923      	ldr	r3, [r4, #16]
 800705c:	4632      	mov	r2, r6
 800705e:	4649      	mov	r1, r9
 8007060:	4640      	mov	r0, r8
 8007062:	47d0      	blx	sl
 8007064:	3001      	adds	r0, #1
 8007066:	d0ab      	beq.n	8006fc0 <_printf_i+0x164>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	079b      	lsls	r3, r3, #30
 800706c:	d413      	bmi.n	8007096 <_printf_i+0x23a>
 800706e:	68e0      	ldr	r0, [r4, #12]
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	4298      	cmp	r0, r3
 8007074:	bfb8      	it	lt
 8007076:	4618      	movlt	r0, r3
 8007078:	e7a4      	b.n	8006fc4 <_printf_i+0x168>
 800707a:	2301      	movs	r3, #1
 800707c:	4632      	mov	r2, r6
 800707e:	4649      	mov	r1, r9
 8007080:	4640      	mov	r0, r8
 8007082:	47d0      	blx	sl
 8007084:	3001      	adds	r0, #1
 8007086:	d09b      	beq.n	8006fc0 <_printf_i+0x164>
 8007088:	3501      	adds	r5, #1
 800708a:	68e3      	ldr	r3, [r4, #12]
 800708c:	9903      	ldr	r1, [sp, #12]
 800708e:	1a5b      	subs	r3, r3, r1
 8007090:	42ab      	cmp	r3, r5
 8007092:	dcf2      	bgt.n	800707a <_printf_i+0x21e>
 8007094:	e7eb      	b.n	800706e <_printf_i+0x212>
 8007096:	2500      	movs	r5, #0
 8007098:	f104 0619 	add.w	r6, r4, #25
 800709c:	e7f5      	b.n	800708a <_printf_i+0x22e>
 800709e:	bf00      	nop
 80070a0:	08009a7e 	.word	0x08009a7e
 80070a4:	08009a8f 	.word	0x08009a8f

080070a8 <iprintf>:
 80070a8:	b40f      	push	{r0, r1, r2, r3}
 80070aa:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <iprintf+0x2c>)
 80070ac:	b513      	push	{r0, r1, r4, lr}
 80070ae:	681c      	ldr	r4, [r3, #0]
 80070b0:	b124      	cbz	r4, 80070bc <iprintf+0x14>
 80070b2:	69a3      	ldr	r3, [r4, #24]
 80070b4:	b913      	cbnz	r3, 80070bc <iprintf+0x14>
 80070b6:	4620      	mov	r0, r4
 80070b8:	f000 feee 	bl	8007e98 <__sinit>
 80070bc:	ab05      	add	r3, sp, #20
 80070be:	9a04      	ldr	r2, [sp, #16]
 80070c0:	68a1      	ldr	r1, [r4, #8]
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	4620      	mov	r0, r4
 80070c6:	f001 fb4f 	bl	8008768 <_vfiprintf_r>
 80070ca:	b002      	add	sp, #8
 80070cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d0:	b004      	add	sp, #16
 80070d2:	4770      	bx	lr
 80070d4:	20000844 	.word	0x20000844

080070d8 <_sbrk_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d06      	ldr	r5, [pc, #24]	; (80070f4 <_sbrk_r+0x1c>)
 80070dc:	2300      	movs	r3, #0
 80070de:	4604      	mov	r4, r0
 80070e0:	4608      	mov	r0, r1
 80070e2:	602b      	str	r3, [r5, #0]
 80070e4:	f7fa fa08 	bl	80014f8 <_sbrk>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d102      	bne.n	80070f2 <_sbrk_r+0x1a>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	b103      	cbz	r3, 80070f2 <_sbrk_r+0x1a>
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	20000e9c 	.word	0x20000e9c

080070f8 <quorem>:
 80070f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	6903      	ldr	r3, [r0, #16]
 80070fe:	690c      	ldr	r4, [r1, #16]
 8007100:	42a3      	cmp	r3, r4
 8007102:	4607      	mov	r7, r0
 8007104:	f2c0 8081 	blt.w	800720a <quorem+0x112>
 8007108:	3c01      	subs	r4, #1
 800710a:	f101 0814 	add.w	r8, r1, #20
 800710e:	f100 0514 	add.w	r5, r0, #20
 8007112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007116:	9301      	str	r3, [sp, #4]
 8007118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800711c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007120:	3301      	adds	r3, #1
 8007122:	429a      	cmp	r2, r3
 8007124:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007128:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800712c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007130:	d331      	bcc.n	8007196 <quorem+0x9e>
 8007132:	f04f 0e00 	mov.w	lr, #0
 8007136:	4640      	mov	r0, r8
 8007138:	46ac      	mov	ip, r5
 800713a:	46f2      	mov	sl, lr
 800713c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007140:	b293      	uxth	r3, r2
 8007142:	fb06 e303 	mla	r3, r6, r3, lr
 8007146:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800714a:	b29b      	uxth	r3, r3
 800714c:	ebaa 0303 	sub.w	r3, sl, r3
 8007150:	0c12      	lsrs	r2, r2, #16
 8007152:	f8dc a000 	ldr.w	sl, [ip]
 8007156:	fb06 e202 	mla	r2, r6, r2, lr
 800715a:	fa13 f38a 	uxtah	r3, r3, sl
 800715e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007162:	fa1f fa82 	uxth.w	sl, r2
 8007166:	f8dc 2000 	ldr.w	r2, [ip]
 800716a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800716e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007172:	b29b      	uxth	r3, r3
 8007174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007178:	4581      	cmp	r9, r0
 800717a:	f84c 3b04 	str.w	r3, [ip], #4
 800717e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007182:	d2db      	bcs.n	800713c <quorem+0x44>
 8007184:	f855 300b 	ldr.w	r3, [r5, fp]
 8007188:	b92b      	cbnz	r3, 8007196 <quorem+0x9e>
 800718a:	9b01      	ldr	r3, [sp, #4]
 800718c:	3b04      	subs	r3, #4
 800718e:	429d      	cmp	r5, r3
 8007190:	461a      	mov	r2, r3
 8007192:	d32e      	bcc.n	80071f2 <quorem+0xfa>
 8007194:	613c      	str	r4, [r7, #16]
 8007196:	4638      	mov	r0, r7
 8007198:	f001 f9ae 	bl	80084f8 <__mcmp>
 800719c:	2800      	cmp	r0, #0
 800719e:	db24      	blt.n	80071ea <quorem+0xf2>
 80071a0:	3601      	adds	r6, #1
 80071a2:	4628      	mov	r0, r5
 80071a4:	f04f 0c00 	mov.w	ip, #0
 80071a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80071ac:	f8d0 e000 	ldr.w	lr, [r0]
 80071b0:	b293      	uxth	r3, r2
 80071b2:	ebac 0303 	sub.w	r3, ip, r3
 80071b6:	0c12      	lsrs	r2, r2, #16
 80071b8:	fa13 f38e 	uxtah	r3, r3, lr
 80071bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071ca:	45c1      	cmp	r9, r8
 80071cc:	f840 3b04 	str.w	r3, [r0], #4
 80071d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071d4:	d2e8      	bcs.n	80071a8 <quorem+0xb0>
 80071d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071de:	b922      	cbnz	r2, 80071ea <quorem+0xf2>
 80071e0:	3b04      	subs	r3, #4
 80071e2:	429d      	cmp	r5, r3
 80071e4:	461a      	mov	r2, r3
 80071e6:	d30a      	bcc.n	80071fe <quorem+0x106>
 80071e8:	613c      	str	r4, [r7, #16]
 80071ea:	4630      	mov	r0, r6
 80071ec:	b003      	add	sp, #12
 80071ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	3b04      	subs	r3, #4
 80071f6:	2a00      	cmp	r2, #0
 80071f8:	d1cc      	bne.n	8007194 <quorem+0x9c>
 80071fa:	3c01      	subs	r4, #1
 80071fc:	e7c7      	b.n	800718e <quorem+0x96>
 80071fe:	6812      	ldr	r2, [r2, #0]
 8007200:	3b04      	subs	r3, #4
 8007202:	2a00      	cmp	r2, #0
 8007204:	d1f0      	bne.n	80071e8 <quorem+0xf0>
 8007206:	3c01      	subs	r4, #1
 8007208:	e7eb      	b.n	80071e2 <quorem+0xea>
 800720a:	2000      	movs	r0, #0
 800720c:	e7ee      	b.n	80071ec <quorem+0xf4>
	...

08007210 <_dtoa_r>:
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	ed2d 8b02 	vpush	{d8}
 8007218:	ec57 6b10 	vmov	r6, r7, d0
 800721c:	b095      	sub	sp, #84	; 0x54
 800721e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007220:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007224:	9105      	str	r1, [sp, #20]
 8007226:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800722a:	4604      	mov	r4, r0
 800722c:	9209      	str	r2, [sp, #36]	; 0x24
 800722e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007230:	b975      	cbnz	r5, 8007250 <_dtoa_r+0x40>
 8007232:	2010      	movs	r0, #16
 8007234:	f7ff fa06 	bl	8006644 <malloc>
 8007238:	4602      	mov	r2, r0
 800723a:	6260      	str	r0, [r4, #36]	; 0x24
 800723c:	b920      	cbnz	r0, 8007248 <_dtoa_r+0x38>
 800723e:	4bb2      	ldr	r3, [pc, #712]	; (8007508 <_dtoa_r+0x2f8>)
 8007240:	21ea      	movs	r1, #234	; 0xea
 8007242:	48b2      	ldr	r0, [pc, #712]	; (800750c <_dtoa_r+0x2fc>)
 8007244:	f001 fcd6 	bl	8008bf4 <__assert_func>
 8007248:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800724c:	6005      	str	r5, [r0, #0]
 800724e:	60c5      	str	r5, [r0, #12]
 8007250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	b151      	cbz	r1, 800726c <_dtoa_r+0x5c>
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	604a      	str	r2, [r1, #4]
 800725a:	2301      	movs	r3, #1
 800725c:	4093      	lsls	r3, r2
 800725e:	608b      	str	r3, [r1, #8]
 8007260:	4620      	mov	r0, r4
 8007262:	f000 ff0b 	bl	800807c <_Bfree>
 8007266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	1e3b      	subs	r3, r7, #0
 800726e:	bfb9      	ittee	lt
 8007270:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007274:	9303      	strlt	r3, [sp, #12]
 8007276:	2300      	movge	r3, #0
 8007278:	f8c8 3000 	strge.w	r3, [r8]
 800727c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007280:	4ba3      	ldr	r3, [pc, #652]	; (8007510 <_dtoa_r+0x300>)
 8007282:	bfbc      	itt	lt
 8007284:	2201      	movlt	r2, #1
 8007286:	f8c8 2000 	strlt.w	r2, [r8]
 800728a:	ea33 0309 	bics.w	r3, r3, r9
 800728e:	d11b      	bne.n	80072c8 <_dtoa_r+0xb8>
 8007290:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007292:	f242 730f 	movw	r3, #9999	; 0x270f
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800729c:	4333      	orrs	r3, r6
 800729e:	f000 857a 	beq.w	8007d96 <_dtoa_r+0xb86>
 80072a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072a4:	b963      	cbnz	r3, 80072c0 <_dtoa_r+0xb0>
 80072a6:	4b9b      	ldr	r3, [pc, #620]	; (8007514 <_dtoa_r+0x304>)
 80072a8:	e024      	b.n	80072f4 <_dtoa_r+0xe4>
 80072aa:	4b9b      	ldr	r3, [pc, #620]	; (8007518 <_dtoa_r+0x308>)
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	9800      	ldr	r0, [sp, #0]
 80072b6:	b015      	add	sp, #84	; 0x54
 80072b8:	ecbd 8b02 	vpop	{d8}
 80072bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c0:	4b94      	ldr	r3, [pc, #592]	; (8007514 <_dtoa_r+0x304>)
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	3303      	adds	r3, #3
 80072c6:	e7f3      	b.n	80072b0 <_dtoa_r+0xa0>
 80072c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072cc:	2200      	movs	r2, #0
 80072ce:	ec51 0b17 	vmov	r0, r1, d7
 80072d2:	2300      	movs	r3, #0
 80072d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80072d8:	f7f9 fbf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80072dc:	4680      	mov	r8, r0
 80072de:	b158      	cbz	r0, 80072f8 <_dtoa_r+0xe8>
 80072e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072e2:	2301      	movs	r3, #1
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8551 	beq.w	8007d90 <_dtoa_r+0xb80>
 80072ee:	488b      	ldr	r0, [pc, #556]	; (800751c <_dtoa_r+0x30c>)
 80072f0:	6018      	str	r0, [r3, #0]
 80072f2:	1e43      	subs	r3, r0, #1
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	e7dd      	b.n	80072b4 <_dtoa_r+0xa4>
 80072f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80072fc:	aa12      	add	r2, sp, #72	; 0x48
 80072fe:	a913      	add	r1, sp, #76	; 0x4c
 8007300:	4620      	mov	r0, r4
 8007302:	f001 f99d 	bl	8008640 <__d2b>
 8007306:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800730a:	4683      	mov	fp, r0
 800730c:	2d00      	cmp	r5, #0
 800730e:	d07c      	beq.n	800740a <_dtoa_r+0x1fa>
 8007310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007312:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007316:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800731a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800731e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800732a:	4b7d      	ldr	r3, [pc, #500]	; (8007520 <_dtoa_r+0x310>)
 800732c:	2200      	movs	r2, #0
 800732e:	4630      	mov	r0, r6
 8007330:	4639      	mov	r1, r7
 8007332:	f7f8 ffa9 	bl	8000288 <__aeabi_dsub>
 8007336:	a36e      	add	r3, pc, #440	; (adr r3, 80074f0 <_dtoa_r+0x2e0>)
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	f7f9 f95c 	bl	80005f8 <__aeabi_dmul>
 8007340:	a36d      	add	r3, pc, #436	; (adr r3, 80074f8 <_dtoa_r+0x2e8>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f7f8 ffa1 	bl	800028c <__adddf3>
 800734a:	4606      	mov	r6, r0
 800734c:	4628      	mov	r0, r5
 800734e:	460f      	mov	r7, r1
 8007350:	f7f9 f8e8 	bl	8000524 <__aeabi_i2d>
 8007354:	a36a      	add	r3, pc, #424	; (adr r3, 8007500 <_dtoa_r+0x2f0>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f7f9 f94d 	bl	80005f8 <__aeabi_dmul>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4630      	mov	r0, r6
 8007364:	4639      	mov	r1, r7
 8007366:	f7f8 ff91 	bl	800028c <__adddf3>
 800736a:	4606      	mov	r6, r0
 800736c:	460f      	mov	r7, r1
 800736e:	f7f9 fbf3 	bl	8000b58 <__aeabi_d2iz>
 8007372:	2200      	movs	r2, #0
 8007374:	4682      	mov	sl, r0
 8007376:	2300      	movs	r3, #0
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 fbae 	bl	8000adc <__aeabi_dcmplt>
 8007380:	b148      	cbz	r0, 8007396 <_dtoa_r+0x186>
 8007382:	4650      	mov	r0, sl
 8007384:	f7f9 f8ce 	bl	8000524 <__aeabi_i2d>
 8007388:	4632      	mov	r2, r6
 800738a:	463b      	mov	r3, r7
 800738c:	f7f9 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007390:	b908      	cbnz	r0, 8007396 <_dtoa_r+0x186>
 8007392:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007396:	f1ba 0f16 	cmp.w	sl, #22
 800739a:	d854      	bhi.n	8007446 <_dtoa_r+0x236>
 800739c:	4b61      	ldr	r3, [pc, #388]	; (8007524 <_dtoa_r+0x314>)
 800739e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073aa:	f7f9 fb97 	bl	8000adc <__aeabi_dcmplt>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d04b      	beq.n	800744a <_dtoa_r+0x23a>
 80073b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073b6:	2300      	movs	r3, #0
 80073b8:	930e      	str	r3, [sp, #56]	; 0x38
 80073ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073bc:	1b5d      	subs	r5, r3, r5
 80073be:	1e6b      	subs	r3, r5, #1
 80073c0:	9304      	str	r3, [sp, #16]
 80073c2:	bf43      	ittte	mi
 80073c4:	2300      	movmi	r3, #0
 80073c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80073ca:	9304      	strmi	r3, [sp, #16]
 80073cc:	f04f 0800 	movpl.w	r8, #0
 80073d0:	f1ba 0f00 	cmp.w	sl, #0
 80073d4:	db3b      	blt.n	800744e <_dtoa_r+0x23e>
 80073d6:	9b04      	ldr	r3, [sp, #16]
 80073d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80073dc:	4453      	add	r3, sl
 80073de:	9304      	str	r3, [sp, #16]
 80073e0:	2300      	movs	r3, #0
 80073e2:	9306      	str	r3, [sp, #24]
 80073e4:	9b05      	ldr	r3, [sp, #20]
 80073e6:	2b09      	cmp	r3, #9
 80073e8:	d869      	bhi.n	80074be <_dtoa_r+0x2ae>
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	bfc4      	itt	gt
 80073ee:	3b04      	subgt	r3, #4
 80073f0:	9305      	strgt	r3, [sp, #20]
 80073f2:	9b05      	ldr	r3, [sp, #20]
 80073f4:	f1a3 0302 	sub.w	r3, r3, #2
 80073f8:	bfcc      	ite	gt
 80073fa:	2500      	movgt	r5, #0
 80073fc:	2501      	movle	r5, #1
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d869      	bhi.n	80074d6 <_dtoa_r+0x2c6>
 8007402:	e8df f003 	tbb	[pc, r3]
 8007406:	4e2c      	.short	0x4e2c
 8007408:	5a4c      	.short	0x5a4c
 800740a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800740e:	441d      	add	r5, r3
 8007410:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007414:	2b20      	cmp	r3, #32
 8007416:	bfc1      	itttt	gt
 8007418:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800741c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007420:	fa09 f303 	lslgt.w	r3, r9, r3
 8007424:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007428:	bfda      	itte	le
 800742a:	f1c3 0320 	rsble	r3, r3, #32
 800742e:	fa06 f003 	lslle.w	r0, r6, r3
 8007432:	4318      	orrgt	r0, r3
 8007434:	f7f9 f866 	bl	8000504 <__aeabi_ui2d>
 8007438:	2301      	movs	r3, #1
 800743a:	4606      	mov	r6, r0
 800743c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007440:	3d01      	subs	r5, #1
 8007442:	9310      	str	r3, [sp, #64]	; 0x40
 8007444:	e771      	b.n	800732a <_dtoa_r+0x11a>
 8007446:	2301      	movs	r3, #1
 8007448:	e7b6      	b.n	80073b8 <_dtoa_r+0x1a8>
 800744a:	900e      	str	r0, [sp, #56]	; 0x38
 800744c:	e7b5      	b.n	80073ba <_dtoa_r+0x1aa>
 800744e:	f1ca 0300 	rsb	r3, sl, #0
 8007452:	9306      	str	r3, [sp, #24]
 8007454:	2300      	movs	r3, #0
 8007456:	eba8 080a 	sub.w	r8, r8, sl
 800745a:	930d      	str	r3, [sp, #52]	; 0x34
 800745c:	e7c2      	b.n	80073e4 <_dtoa_r+0x1d4>
 800745e:	2300      	movs	r3, #0
 8007460:	9308      	str	r3, [sp, #32]
 8007462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	dc39      	bgt.n	80074dc <_dtoa_r+0x2cc>
 8007468:	f04f 0901 	mov.w	r9, #1
 800746c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007470:	464b      	mov	r3, r9
 8007472:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007476:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007478:	2200      	movs	r2, #0
 800747a:	6042      	str	r2, [r0, #4]
 800747c:	2204      	movs	r2, #4
 800747e:	f102 0614 	add.w	r6, r2, #20
 8007482:	429e      	cmp	r6, r3
 8007484:	6841      	ldr	r1, [r0, #4]
 8007486:	d92f      	bls.n	80074e8 <_dtoa_r+0x2d8>
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fdb7 	bl	8007ffc <_Balloc>
 800748e:	9000      	str	r0, [sp, #0]
 8007490:	2800      	cmp	r0, #0
 8007492:	d14b      	bne.n	800752c <_dtoa_r+0x31c>
 8007494:	4b24      	ldr	r3, [pc, #144]	; (8007528 <_dtoa_r+0x318>)
 8007496:	4602      	mov	r2, r0
 8007498:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800749c:	e6d1      	b.n	8007242 <_dtoa_r+0x32>
 800749e:	2301      	movs	r3, #1
 80074a0:	e7de      	b.n	8007460 <_dtoa_r+0x250>
 80074a2:	2300      	movs	r3, #0
 80074a4:	9308      	str	r3, [sp, #32]
 80074a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a8:	eb0a 0903 	add.w	r9, sl, r3
 80074ac:	f109 0301 	add.w	r3, r9, #1
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	9301      	str	r3, [sp, #4]
 80074b4:	bfb8      	it	lt
 80074b6:	2301      	movlt	r3, #1
 80074b8:	e7dd      	b.n	8007476 <_dtoa_r+0x266>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e7f2      	b.n	80074a4 <_dtoa_r+0x294>
 80074be:	2501      	movs	r5, #1
 80074c0:	2300      	movs	r3, #0
 80074c2:	9305      	str	r3, [sp, #20]
 80074c4:	9508      	str	r5, [sp, #32]
 80074c6:	f04f 39ff 	mov.w	r9, #4294967295
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80074d0:	2312      	movs	r3, #18
 80074d2:	9209      	str	r2, [sp, #36]	; 0x24
 80074d4:	e7cf      	b.n	8007476 <_dtoa_r+0x266>
 80074d6:	2301      	movs	r3, #1
 80074d8:	9308      	str	r3, [sp, #32]
 80074da:	e7f4      	b.n	80074c6 <_dtoa_r+0x2b6>
 80074dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80074e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80074e4:	464b      	mov	r3, r9
 80074e6:	e7c6      	b.n	8007476 <_dtoa_r+0x266>
 80074e8:	3101      	adds	r1, #1
 80074ea:	6041      	str	r1, [r0, #4]
 80074ec:	0052      	lsls	r2, r2, #1
 80074ee:	e7c6      	b.n	800747e <_dtoa_r+0x26e>
 80074f0:	636f4361 	.word	0x636f4361
 80074f4:	3fd287a7 	.word	0x3fd287a7
 80074f8:	8b60c8b3 	.word	0x8b60c8b3
 80074fc:	3fc68a28 	.word	0x3fc68a28
 8007500:	509f79fb 	.word	0x509f79fb
 8007504:	3fd34413 	.word	0x3fd34413
 8007508:	08009aad 	.word	0x08009aad
 800750c:	08009ac4 	.word	0x08009ac4
 8007510:	7ff00000 	.word	0x7ff00000
 8007514:	08009aa9 	.word	0x08009aa9
 8007518:	08009aa0 	.word	0x08009aa0
 800751c:	08009a7d 	.word	0x08009a7d
 8007520:	3ff80000 	.word	0x3ff80000
 8007524:	08009c20 	.word	0x08009c20
 8007528:	08009b23 	.word	0x08009b23
 800752c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800752e:	9a00      	ldr	r2, [sp, #0]
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	9b01      	ldr	r3, [sp, #4]
 8007534:	2b0e      	cmp	r3, #14
 8007536:	f200 80ad 	bhi.w	8007694 <_dtoa_r+0x484>
 800753a:	2d00      	cmp	r5, #0
 800753c:	f000 80aa 	beq.w	8007694 <_dtoa_r+0x484>
 8007540:	f1ba 0f00 	cmp.w	sl, #0
 8007544:	dd36      	ble.n	80075b4 <_dtoa_r+0x3a4>
 8007546:	4ac3      	ldr	r2, [pc, #780]	; (8007854 <_dtoa_r+0x644>)
 8007548:	f00a 030f 	and.w	r3, sl, #15
 800754c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007550:	ed93 7b00 	vldr	d7, [r3]
 8007554:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007558:	ea4f 172a 	mov.w	r7, sl, asr #4
 800755c:	eeb0 8a47 	vmov.f32	s16, s14
 8007560:	eef0 8a67 	vmov.f32	s17, s15
 8007564:	d016      	beq.n	8007594 <_dtoa_r+0x384>
 8007566:	4bbc      	ldr	r3, [pc, #752]	; (8007858 <_dtoa_r+0x648>)
 8007568:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800756c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007570:	f7f9 f96c 	bl	800084c <__aeabi_ddiv>
 8007574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007578:	f007 070f 	and.w	r7, r7, #15
 800757c:	2503      	movs	r5, #3
 800757e:	4eb6      	ldr	r6, [pc, #728]	; (8007858 <_dtoa_r+0x648>)
 8007580:	b957      	cbnz	r7, 8007598 <_dtoa_r+0x388>
 8007582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007586:	ec53 2b18 	vmov	r2, r3, d8
 800758a:	f7f9 f95f 	bl	800084c <__aeabi_ddiv>
 800758e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007592:	e029      	b.n	80075e8 <_dtoa_r+0x3d8>
 8007594:	2502      	movs	r5, #2
 8007596:	e7f2      	b.n	800757e <_dtoa_r+0x36e>
 8007598:	07f9      	lsls	r1, r7, #31
 800759a:	d508      	bpl.n	80075ae <_dtoa_r+0x39e>
 800759c:	ec51 0b18 	vmov	r0, r1, d8
 80075a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075a4:	f7f9 f828 	bl	80005f8 <__aeabi_dmul>
 80075a8:	ec41 0b18 	vmov	d8, r0, r1
 80075ac:	3501      	adds	r5, #1
 80075ae:	107f      	asrs	r7, r7, #1
 80075b0:	3608      	adds	r6, #8
 80075b2:	e7e5      	b.n	8007580 <_dtoa_r+0x370>
 80075b4:	f000 80a6 	beq.w	8007704 <_dtoa_r+0x4f4>
 80075b8:	f1ca 0600 	rsb	r6, sl, #0
 80075bc:	4ba5      	ldr	r3, [pc, #660]	; (8007854 <_dtoa_r+0x644>)
 80075be:	4fa6      	ldr	r7, [pc, #664]	; (8007858 <_dtoa_r+0x648>)
 80075c0:	f006 020f 	and.w	r2, r6, #15
 80075c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075d0:	f7f9 f812 	bl	80005f8 <__aeabi_dmul>
 80075d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d8:	1136      	asrs	r6, r6, #4
 80075da:	2300      	movs	r3, #0
 80075dc:	2502      	movs	r5, #2
 80075de:	2e00      	cmp	r6, #0
 80075e0:	f040 8085 	bne.w	80076ee <_dtoa_r+0x4de>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1d2      	bne.n	800758e <_dtoa_r+0x37e>
 80075e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 808c 	beq.w	8007708 <_dtoa_r+0x4f8>
 80075f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075f4:	4b99      	ldr	r3, [pc, #612]	; (800785c <_dtoa_r+0x64c>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	4630      	mov	r0, r6
 80075fa:	4639      	mov	r1, r7
 80075fc:	f7f9 fa6e 	bl	8000adc <__aeabi_dcmplt>
 8007600:	2800      	cmp	r0, #0
 8007602:	f000 8081 	beq.w	8007708 <_dtoa_r+0x4f8>
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d07d      	beq.n	8007708 <_dtoa_r+0x4f8>
 800760c:	f1b9 0f00 	cmp.w	r9, #0
 8007610:	dd3c      	ble.n	800768c <_dtoa_r+0x47c>
 8007612:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007616:	9307      	str	r3, [sp, #28]
 8007618:	2200      	movs	r2, #0
 800761a:	4b91      	ldr	r3, [pc, #580]	; (8007860 <_dtoa_r+0x650>)
 800761c:	4630      	mov	r0, r6
 800761e:	4639      	mov	r1, r7
 8007620:	f7f8 ffea 	bl	80005f8 <__aeabi_dmul>
 8007624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007628:	3501      	adds	r5, #1
 800762a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800762e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007632:	4628      	mov	r0, r5
 8007634:	f7f8 ff76 	bl	8000524 <__aeabi_i2d>
 8007638:	4632      	mov	r2, r6
 800763a:	463b      	mov	r3, r7
 800763c:	f7f8 ffdc 	bl	80005f8 <__aeabi_dmul>
 8007640:	4b88      	ldr	r3, [pc, #544]	; (8007864 <_dtoa_r+0x654>)
 8007642:	2200      	movs	r2, #0
 8007644:	f7f8 fe22 	bl	800028c <__adddf3>
 8007648:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800764c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007650:	9303      	str	r3, [sp, #12]
 8007652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007654:	2b00      	cmp	r3, #0
 8007656:	d15c      	bne.n	8007712 <_dtoa_r+0x502>
 8007658:	4b83      	ldr	r3, [pc, #524]	; (8007868 <_dtoa_r+0x658>)
 800765a:	2200      	movs	r2, #0
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f7f8 fe12 	bl	8000288 <__aeabi_dsub>
 8007664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007668:	4606      	mov	r6, r0
 800766a:	460f      	mov	r7, r1
 800766c:	f7f9 fa54 	bl	8000b18 <__aeabi_dcmpgt>
 8007670:	2800      	cmp	r0, #0
 8007672:	f040 8296 	bne.w	8007ba2 <_dtoa_r+0x992>
 8007676:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800767a:	4630      	mov	r0, r6
 800767c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007680:	4639      	mov	r1, r7
 8007682:	f7f9 fa2b 	bl	8000adc <__aeabi_dcmplt>
 8007686:	2800      	cmp	r0, #0
 8007688:	f040 8288 	bne.w	8007b9c <_dtoa_r+0x98c>
 800768c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007690:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007696:	2b00      	cmp	r3, #0
 8007698:	f2c0 8158 	blt.w	800794c <_dtoa_r+0x73c>
 800769c:	f1ba 0f0e 	cmp.w	sl, #14
 80076a0:	f300 8154 	bgt.w	800794c <_dtoa_r+0x73c>
 80076a4:	4b6b      	ldr	r3, [pc, #428]	; (8007854 <_dtoa_r+0x644>)
 80076a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f280 80e3 	bge.w	800787c <_dtoa_r+0x66c>
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f300 80df 	bgt.w	800787c <_dtoa_r+0x66c>
 80076be:	f040 826d 	bne.w	8007b9c <_dtoa_r+0x98c>
 80076c2:	4b69      	ldr	r3, [pc, #420]	; (8007868 <_dtoa_r+0x658>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	4640      	mov	r0, r8
 80076c8:	4649      	mov	r1, r9
 80076ca:	f7f8 ff95 	bl	80005f8 <__aeabi_dmul>
 80076ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076d2:	f7f9 fa17 	bl	8000b04 <__aeabi_dcmpge>
 80076d6:	9e01      	ldr	r6, [sp, #4]
 80076d8:	4637      	mov	r7, r6
 80076da:	2800      	cmp	r0, #0
 80076dc:	f040 8243 	bne.w	8007b66 <_dtoa_r+0x956>
 80076e0:	9d00      	ldr	r5, [sp, #0]
 80076e2:	2331      	movs	r3, #49	; 0x31
 80076e4:	f805 3b01 	strb.w	r3, [r5], #1
 80076e8:	f10a 0a01 	add.w	sl, sl, #1
 80076ec:	e23f      	b.n	8007b6e <_dtoa_r+0x95e>
 80076ee:	07f2      	lsls	r2, r6, #31
 80076f0:	d505      	bpl.n	80076fe <_dtoa_r+0x4ee>
 80076f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f6:	f7f8 ff7f 	bl	80005f8 <__aeabi_dmul>
 80076fa:	3501      	adds	r5, #1
 80076fc:	2301      	movs	r3, #1
 80076fe:	1076      	asrs	r6, r6, #1
 8007700:	3708      	adds	r7, #8
 8007702:	e76c      	b.n	80075de <_dtoa_r+0x3ce>
 8007704:	2502      	movs	r5, #2
 8007706:	e76f      	b.n	80075e8 <_dtoa_r+0x3d8>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	f8cd a01c 	str.w	sl, [sp, #28]
 800770e:	930c      	str	r3, [sp, #48]	; 0x30
 8007710:	e78d      	b.n	800762e <_dtoa_r+0x41e>
 8007712:	9900      	ldr	r1, [sp, #0]
 8007714:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007718:	4b4e      	ldr	r3, [pc, #312]	; (8007854 <_dtoa_r+0x644>)
 800771a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800771e:	4401      	add	r1, r0
 8007720:	9102      	str	r1, [sp, #8]
 8007722:	9908      	ldr	r1, [sp, #32]
 8007724:	eeb0 8a47 	vmov.f32	s16, s14
 8007728:	eef0 8a67 	vmov.f32	s17, s15
 800772c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007730:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007734:	2900      	cmp	r1, #0
 8007736:	d045      	beq.n	80077c4 <_dtoa_r+0x5b4>
 8007738:	494c      	ldr	r1, [pc, #304]	; (800786c <_dtoa_r+0x65c>)
 800773a:	2000      	movs	r0, #0
 800773c:	f7f9 f886 	bl	800084c <__aeabi_ddiv>
 8007740:	ec53 2b18 	vmov	r2, r3, d8
 8007744:	f7f8 fda0 	bl	8000288 <__aeabi_dsub>
 8007748:	9d00      	ldr	r5, [sp, #0]
 800774a:	ec41 0b18 	vmov	d8, r0, r1
 800774e:	4639      	mov	r1, r7
 8007750:	4630      	mov	r0, r6
 8007752:	f7f9 fa01 	bl	8000b58 <__aeabi_d2iz>
 8007756:	900c      	str	r0, [sp, #48]	; 0x30
 8007758:	f7f8 fee4 	bl	8000524 <__aeabi_i2d>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4630      	mov	r0, r6
 8007762:	4639      	mov	r1, r7
 8007764:	f7f8 fd90 	bl	8000288 <__aeabi_dsub>
 8007768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800776a:	3330      	adds	r3, #48	; 0x30
 800776c:	f805 3b01 	strb.w	r3, [r5], #1
 8007770:	ec53 2b18 	vmov	r2, r3, d8
 8007774:	4606      	mov	r6, r0
 8007776:	460f      	mov	r7, r1
 8007778:	f7f9 f9b0 	bl	8000adc <__aeabi_dcmplt>
 800777c:	2800      	cmp	r0, #0
 800777e:	d165      	bne.n	800784c <_dtoa_r+0x63c>
 8007780:	4632      	mov	r2, r6
 8007782:	463b      	mov	r3, r7
 8007784:	4935      	ldr	r1, [pc, #212]	; (800785c <_dtoa_r+0x64c>)
 8007786:	2000      	movs	r0, #0
 8007788:	f7f8 fd7e 	bl	8000288 <__aeabi_dsub>
 800778c:	ec53 2b18 	vmov	r2, r3, d8
 8007790:	f7f9 f9a4 	bl	8000adc <__aeabi_dcmplt>
 8007794:	2800      	cmp	r0, #0
 8007796:	f040 80b9 	bne.w	800790c <_dtoa_r+0x6fc>
 800779a:	9b02      	ldr	r3, [sp, #8]
 800779c:	429d      	cmp	r5, r3
 800779e:	f43f af75 	beq.w	800768c <_dtoa_r+0x47c>
 80077a2:	4b2f      	ldr	r3, [pc, #188]	; (8007860 <_dtoa_r+0x650>)
 80077a4:	ec51 0b18 	vmov	r0, r1, d8
 80077a8:	2200      	movs	r2, #0
 80077aa:	f7f8 ff25 	bl	80005f8 <__aeabi_dmul>
 80077ae:	4b2c      	ldr	r3, [pc, #176]	; (8007860 <_dtoa_r+0x650>)
 80077b0:	ec41 0b18 	vmov	d8, r0, r1
 80077b4:	2200      	movs	r2, #0
 80077b6:	4630      	mov	r0, r6
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f8 ff1d 	bl	80005f8 <__aeabi_dmul>
 80077be:	4606      	mov	r6, r0
 80077c0:	460f      	mov	r7, r1
 80077c2:	e7c4      	b.n	800774e <_dtoa_r+0x53e>
 80077c4:	ec51 0b17 	vmov	r0, r1, d7
 80077c8:	f7f8 ff16 	bl	80005f8 <__aeabi_dmul>
 80077cc:	9b02      	ldr	r3, [sp, #8]
 80077ce:	9d00      	ldr	r5, [sp, #0]
 80077d0:	930c      	str	r3, [sp, #48]	; 0x30
 80077d2:	ec41 0b18 	vmov	d8, r0, r1
 80077d6:	4639      	mov	r1, r7
 80077d8:	4630      	mov	r0, r6
 80077da:	f7f9 f9bd 	bl	8000b58 <__aeabi_d2iz>
 80077de:	9011      	str	r0, [sp, #68]	; 0x44
 80077e0:	f7f8 fea0 	bl	8000524 <__aeabi_i2d>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4630      	mov	r0, r6
 80077ea:	4639      	mov	r1, r7
 80077ec:	f7f8 fd4c 	bl	8000288 <__aeabi_dsub>
 80077f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077f2:	3330      	adds	r3, #48	; 0x30
 80077f4:	f805 3b01 	strb.w	r3, [r5], #1
 80077f8:	9b02      	ldr	r3, [sp, #8]
 80077fa:	429d      	cmp	r5, r3
 80077fc:	4606      	mov	r6, r0
 80077fe:	460f      	mov	r7, r1
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	d134      	bne.n	8007870 <_dtoa_r+0x660>
 8007806:	4b19      	ldr	r3, [pc, #100]	; (800786c <_dtoa_r+0x65c>)
 8007808:	ec51 0b18 	vmov	r0, r1, d8
 800780c:	f7f8 fd3e 	bl	800028c <__adddf3>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4630      	mov	r0, r6
 8007816:	4639      	mov	r1, r7
 8007818:	f7f9 f97e 	bl	8000b18 <__aeabi_dcmpgt>
 800781c:	2800      	cmp	r0, #0
 800781e:	d175      	bne.n	800790c <_dtoa_r+0x6fc>
 8007820:	ec53 2b18 	vmov	r2, r3, d8
 8007824:	4911      	ldr	r1, [pc, #68]	; (800786c <_dtoa_r+0x65c>)
 8007826:	2000      	movs	r0, #0
 8007828:	f7f8 fd2e 	bl	8000288 <__aeabi_dsub>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4630      	mov	r0, r6
 8007832:	4639      	mov	r1, r7
 8007834:	f7f9 f952 	bl	8000adc <__aeabi_dcmplt>
 8007838:	2800      	cmp	r0, #0
 800783a:	f43f af27 	beq.w	800768c <_dtoa_r+0x47c>
 800783e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007840:	1e6b      	subs	r3, r5, #1
 8007842:	930c      	str	r3, [sp, #48]	; 0x30
 8007844:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007848:	2b30      	cmp	r3, #48	; 0x30
 800784a:	d0f8      	beq.n	800783e <_dtoa_r+0x62e>
 800784c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007850:	e04a      	b.n	80078e8 <_dtoa_r+0x6d8>
 8007852:	bf00      	nop
 8007854:	08009c20 	.word	0x08009c20
 8007858:	08009bf8 	.word	0x08009bf8
 800785c:	3ff00000 	.word	0x3ff00000
 8007860:	40240000 	.word	0x40240000
 8007864:	401c0000 	.word	0x401c0000
 8007868:	40140000 	.word	0x40140000
 800786c:	3fe00000 	.word	0x3fe00000
 8007870:	4baf      	ldr	r3, [pc, #700]	; (8007b30 <_dtoa_r+0x920>)
 8007872:	f7f8 fec1 	bl	80005f8 <__aeabi_dmul>
 8007876:	4606      	mov	r6, r0
 8007878:	460f      	mov	r7, r1
 800787a:	e7ac      	b.n	80077d6 <_dtoa_r+0x5c6>
 800787c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007880:	9d00      	ldr	r5, [sp, #0]
 8007882:	4642      	mov	r2, r8
 8007884:	464b      	mov	r3, r9
 8007886:	4630      	mov	r0, r6
 8007888:	4639      	mov	r1, r7
 800788a:	f7f8 ffdf 	bl	800084c <__aeabi_ddiv>
 800788e:	f7f9 f963 	bl	8000b58 <__aeabi_d2iz>
 8007892:	9002      	str	r0, [sp, #8]
 8007894:	f7f8 fe46 	bl	8000524 <__aeabi_i2d>
 8007898:	4642      	mov	r2, r8
 800789a:	464b      	mov	r3, r9
 800789c:	f7f8 feac 	bl	80005f8 <__aeabi_dmul>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4630      	mov	r0, r6
 80078a6:	4639      	mov	r1, r7
 80078a8:	f7f8 fcee 	bl	8000288 <__aeabi_dsub>
 80078ac:	9e02      	ldr	r6, [sp, #8]
 80078ae:	9f01      	ldr	r7, [sp, #4]
 80078b0:	3630      	adds	r6, #48	; 0x30
 80078b2:	f805 6b01 	strb.w	r6, [r5], #1
 80078b6:	9e00      	ldr	r6, [sp, #0]
 80078b8:	1bae      	subs	r6, r5, r6
 80078ba:	42b7      	cmp	r7, r6
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	d137      	bne.n	8007932 <_dtoa_r+0x722>
 80078c2:	f7f8 fce3 	bl	800028c <__adddf3>
 80078c6:	4642      	mov	r2, r8
 80078c8:	464b      	mov	r3, r9
 80078ca:	4606      	mov	r6, r0
 80078cc:	460f      	mov	r7, r1
 80078ce:	f7f9 f923 	bl	8000b18 <__aeabi_dcmpgt>
 80078d2:	b9c8      	cbnz	r0, 8007908 <_dtoa_r+0x6f8>
 80078d4:	4642      	mov	r2, r8
 80078d6:	464b      	mov	r3, r9
 80078d8:	4630      	mov	r0, r6
 80078da:	4639      	mov	r1, r7
 80078dc:	f7f9 f8f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80078e0:	b110      	cbz	r0, 80078e8 <_dtoa_r+0x6d8>
 80078e2:	9b02      	ldr	r3, [sp, #8]
 80078e4:	07d9      	lsls	r1, r3, #31
 80078e6:	d40f      	bmi.n	8007908 <_dtoa_r+0x6f8>
 80078e8:	4620      	mov	r0, r4
 80078ea:	4659      	mov	r1, fp
 80078ec:	f000 fbc6 	bl	800807c <_Bfree>
 80078f0:	2300      	movs	r3, #0
 80078f2:	702b      	strb	r3, [r5, #0]
 80078f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078f6:	f10a 0001 	add.w	r0, sl, #1
 80078fa:	6018      	str	r0, [r3, #0]
 80078fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f43f acd8 	beq.w	80072b4 <_dtoa_r+0xa4>
 8007904:	601d      	str	r5, [r3, #0]
 8007906:	e4d5      	b.n	80072b4 <_dtoa_r+0xa4>
 8007908:	f8cd a01c 	str.w	sl, [sp, #28]
 800790c:	462b      	mov	r3, r5
 800790e:	461d      	mov	r5, r3
 8007910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007914:	2a39      	cmp	r2, #57	; 0x39
 8007916:	d108      	bne.n	800792a <_dtoa_r+0x71a>
 8007918:	9a00      	ldr	r2, [sp, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d1f7      	bne.n	800790e <_dtoa_r+0x6fe>
 800791e:	9a07      	ldr	r2, [sp, #28]
 8007920:	9900      	ldr	r1, [sp, #0]
 8007922:	3201      	adds	r2, #1
 8007924:	9207      	str	r2, [sp, #28]
 8007926:	2230      	movs	r2, #48	; 0x30
 8007928:	700a      	strb	r2, [r1, #0]
 800792a:	781a      	ldrb	r2, [r3, #0]
 800792c:	3201      	adds	r2, #1
 800792e:	701a      	strb	r2, [r3, #0]
 8007930:	e78c      	b.n	800784c <_dtoa_r+0x63c>
 8007932:	4b7f      	ldr	r3, [pc, #508]	; (8007b30 <_dtoa_r+0x920>)
 8007934:	2200      	movs	r2, #0
 8007936:	f7f8 fe5f 	bl	80005f8 <__aeabi_dmul>
 800793a:	2200      	movs	r2, #0
 800793c:	2300      	movs	r3, #0
 800793e:	4606      	mov	r6, r0
 8007940:	460f      	mov	r7, r1
 8007942:	f7f9 f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007946:	2800      	cmp	r0, #0
 8007948:	d09b      	beq.n	8007882 <_dtoa_r+0x672>
 800794a:	e7cd      	b.n	80078e8 <_dtoa_r+0x6d8>
 800794c:	9a08      	ldr	r2, [sp, #32]
 800794e:	2a00      	cmp	r2, #0
 8007950:	f000 80c4 	beq.w	8007adc <_dtoa_r+0x8cc>
 8007954:	9a05      	ldr	r2, [sp, #20]
 8007956:	2a01      	cmp	r2, #1
 8007958:	f300 80a8 	bgt.w	8007aac <_dtoa_r+0x89c>
 800795c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800795e:	2a00      	cmp	r2, #0
 8007960:	f000 80a0 	beq.w	8007aa4 <_dtoa_r+0x894>
 8007964:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007968:	9e06      	ldr	r6, [sp, #24]
 800796a:	4645      	mov	r5, r8
 800796c:	9a04      	ldr	r2, [sp, #16]
 800796e:	2101      	movs	r1, #1
 8007970:	441a      	add	r2, r3
 8007972:	4620      	mov	r0, r4
 8007974:	4498      	add	r8, r3
 8007976:	9204      	str	r2, [sp, #16]
 8007978:	f000 fc3c 	bl	80081f4 <__i2b>
 800797c:	4607      	mov	r7, r0
 800797e:	2d00      	cmp	r5, #0
 8007980:	dd0b      	ble.n	800799a <_dtoa_r+0x78a>
 8007982:	9b04      	ldr	r3, [sp, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dd08      	ble.n	800799a <_dtoa_r+0x78a>
 8007988:	42ab      	cmp	r3, r5
 800798a:	9a04      	ldr	r2, [sp, #16]
 800798c:	bfa8      	it	ge
 800798e:	462b      	movge	r3, r5
 8007990:	eba8 0803 	sub.w	r8, r8, r3
 8007994:	1aed      	subs	r5, r5, r3
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	9304      	str	r3, [sp, #16]
 800799a:	9b06      	ldr	r3, [sp, #24]
 800799c:	b1fb      	cbz	r3, 80079de <_dtoa_r+0x7ce>
 800799e:	9b08      	ldr	r3, [sp, #32]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 809f 	beq.w	8007ae4 <_dtoa_r+0x8d4>
 80079a6:	2e00      	cmp	r6, #0
 80079a8:	dd11      	ble.n	80079ce <_dtoa_r+0x7be>
 80079aa:	4639      	mov	r1, r7
 80079ac:	4632      	mov	r2, r6
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 fcdc 	bl	800836c <__pow5mult>
 80079b4:	465a      	mov	r2, fp
 80079b6:	4601      	mov	r1, r0
 80079b8:	4607      	mov	r7, r0
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 fc30 	bl	8008220 <__multiply>
 80079c0:	4659      	mov	r1, fp
 80079c2:	9007      	str	r0, [sp, #28]
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fb59 	bl	800807c <_Bfree>
 80079ca:	9b07      	ldr	r3, [sp, #28]
 80079cc:	469b      	mov	fp, r3
 80079ce:	9b06      	ldr	r3, [sp, #24]
 80079d0:	1b9a      	subs	r2, r3, r6
 80079d2:	d004      	beq.n	80079de <_dtoa_r+0x7ce>
 80079d4:	4659      	mov	r1, fp
 80079d6:	4620      	mov	r0, r4
 80079d8:	f000 fcc8 	bl	800836c <__pow5mult>
 80079dc:	4683      	mov	fp, r0
 80079de:	2101      	movs	r1, #1
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 fc07 	bl	80081f4 <__i2b>
 80079e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	4606      	mov	r6, r0
 80079ec:	dd7c      	ble.n	8007ae8 <_dtoa_r+0x8d8>
 80079ee:	461a      	mov	r2, r3
 80079f0:	4601      	mov	r1, r0
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 fcba 	bl	800836c <__pow5mult>
 80079f8:	9b05      	ldr	r3, [sp, #20]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	4606      	mov	r6, r0
 80079fe:	dd76      	ble.n	8007aee <_dtoa_r+0x8de>
 8007a00:	2300      	movs	r3, #0
 8007a02:	9306      	str	r3, [sp, #24]
 8007a04:	6933      	ldr	r3, [r6, #16]
 8007a06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a0a:	6918      	ldr	r0, [r3, #16]
 8007a0c:	f000 fba2 	bl	8008154 <__hi0bits>
 8007a10:	f1c0 0020 	rsb	r0, r0, #32
 8007a14:	9b04      	ldr	r3, [sp, #16]
 8007a16:	4418      	add	r0, r3
 8007a18:	f010 001f 	ands.w	r0, r0, #31
 8007a1c:	f000 8086 	beq.w	8007b2c <_dtoa_r+0x91c>
 8007a20:	f1c0 0320 	rsb	r3, r0, #32
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	dd7f      	ble.n	8007b28 <_dtoa_r+0x918>
 8007a28:	f1c0 001c 	rsb	r0, r0, #28
 8007a2c:	9b04      	ldr	r3, [sp, #16]
 8007a2e:	4403      	add	r3, r0
 8007a30:	4480      	add	r8, r0
 8007a32:	4405      	add	r5, r0
 8007a34:	9304      	str	r3, [sp, #16]
 8007a36:	f1b8 0f00 	cmp.w	r8, #0
 8007a3a:	dd05      	ble.n	8007a48 <_dtoa_r+0x838>
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	4642      	mov	r2, r8
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 fced 	bl	8008420 <__lshift>
 8007a46:	4683      	mov	fp, r0
 8007a48:	9b04      	ldr	r3, [sp, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	dd05      	ble.n	8007a5a <_dtoa_r+0x84a>
 8007a4e:	4631      	mov	r1, r6
 8007a50:	461a      	mov	r2, r3
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 fce4 	bl	8008420 <__lshift>
 8007a58:	4606      	mov	r6, r0
 8007a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d069      	beq.n	8007b34 <_dtoa_r+0x924>
 8007a60:	4631      	mov	r1, r6
 8007a62:	4658      	mov	r0, fp
 8007a64:	f000 fd48 	bl	80084f8 <__mcmp>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	da63      	bge.n	8007b34 <_dtoa_r+0x924>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4659      	mov	r1, fp
 8007a70:	220a      	movs	r2, #10
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 fb24 	bl	80080c0 <__multadd>
 8007a78:	9b08      	ldr	r3, [sp, #32]
 8007a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a7e:	4683      	mov	fp, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 818f 	beq.w	8007da4 <_dtoa_r+0xb94>
 8007a86:	4639      	mov	r1, r7
 8007a88:	2300      	movs	r3, #0
 8007a8a:	220a      	movs	r2, #10
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 fb17 	bl	80080c0 <__multadd>
 8007a92:	f1b9 0f00 	cmp.w	r9, #0
 8007a96:	4607      	mov	r7, r0
 8007a98:	f300 808e 	bgt.w	8007bb8 <_dtoa_r+0x9a8>
 8007a9c:	9b05      	ldr	r3, [sp, #20]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	dc50      	bgt.n	8007b44 <_dtoa_r+0x934>
 8007aa2:	e089      	b.n	8007bb8 <_dtoa_r+0x9a8>
 8007aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007aa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007aaa:	e75d      	b.n	8007968 <_dtoa_r+0x758>
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	1e5e      	subs	r6, r3, #1
 8007ab0:	9b06      	ldr	r3, [sp, #24]
 8007ab2:	42b3      	cmp	r3, r6
 8007ab4:	bfbf      	itttt	lt
 8007ab6:	9b06      	ldrlt	r3, [sp, #24]
 8007ab8:	9606      	strlt	r6, [sp, #24]
 8007aba:	1af2      	sublt	r2, r6, r3
 8007abc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007abe:	bfb6      	itet	lt
 8007ac0:	189b      	addlt	r3, r3, r2
 8007ac2:	1b9e      	subge	r6, r3, r6
 8007ac4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007ac6:	9b01      	ldr	r3, [sp, #4]
 8007ac8:	bfb8      	it	lt
 8007aca:	2600      	movlt	r6, #0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	bfb5      	itete	lt
 8007ad0:	eba8 0503 	sublt.w	r5, r8, r3
 8007ad4:	9b01      	ldrge	r3, [sp, #4]
 8007ad6:	2300      	movlt	r3, #0
 8007ad8:	4645      	movge	r5, r8
 8007ada:	e747      	b.n	800796c <_dtoa_r+0x75c>
 8007adc:	9e06      	ldr	r6, [sp, #24]
 8007ade:	9f08      	ldr	r7, [sp, #32]
 8007ae0:	4645      	mov	r5, r8
 8007ae2:	e74c      	b.n	800797e <_dtoa_r+0x76e>
 8007ae4:	9a06      	ldr	r2, [sp, #24]
 8007ae6:	e775      	b.n	80079d4 <_dtoa_r+0x7c4>
 8007ae8:	9b05      	ldr	r3, [sp, #20]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	dc18      	bgt.n	8007b20 <_dtoa_r+0x910>
 8007aee:	9b02      	ldr	r3, [sp, #8]
 8007af0:	b9b3      	cbnz	r3, 8007b20 <_dtoa_r+0x910>
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007af8:	b9a3      	cbnz	r3, 8007b24 <_dtoa_r+0x914>
 8007afa:	9b03      	ldr	r3, [sp, #12]
 8007afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b00:	0d1b      	lsrs	r3, r3, #20
 8007b02:	051b      	lsls	r3, r3, #20
 8007b04:	b12b      	cbz	r3, 8007b12 <_dtoa_r+0x902>
 8007b06:	9b04      	ldr	r3, [sp, #16]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	9304      	str	r3, [sp, #16]
 8007b0c:	f108 0801 	add.w	r8, r8, #1
 8007b10:	2301      	movs	r3, #1
 8007b12:	9306      	str	r3, [sp, #24]
 8007b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f47f af74 	bne.w	8007a04 <_dtoa_r+0x7f4>
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	e779      	b.n	8007a14 <_dtoa_r+0x804>
 8007b20:	2300      	movs	r3, #0
 8007b22:	e7f6      	b.n	8007b12 <_dtoa_r+0x902>
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	e7f4      	b.n	8007b12 <_dtoa_r+0x902>
 8007b28:	d085      	beq.n	8007a36 <_dtoa_r+0x826>
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	301c      	adds	r0, #28
 8007b2e:	e77d      	b.n	8007a2c <_dtoa_r+0x81c>
 8007b30:	40240000 	.word	0x40240000
 8007b34:	9b01      	ldr	r3, [sp, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dc38      	bgt.n	8007bac <_dtoa_r+0x99c>
 8007b3a:	9b05      	ldr	r3, [sp, #20]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	dd35      	ble.n	8007bac <_dtoa_r+0x99c>
 8007b40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b44:	f1b9 0f00 	cmp.w	r9, #0
 8007b48:	d10d      	bne.n	8007b66 <_dtoa_r+0x956>
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	2205      	movs	r2, #5
 8007b50:	4620      	mov	r0, r4
 8007b52:	f000 fab5 	bl	80080c0 <__multadd>
 8007b56:	4601      	mov	r1, r0
 8007b58:	4606      	mov	r6, r0
 8007b5a:	4658      	mov	r0, fp
 8007b5c:	f000 fccc 	bl	80084f8 <__mcmp>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	f73f adbd 	bgt.w	80076e0 <_dtoa_r+0x4d0>
 8007b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b68:	9d00      	ldr	r5, [sp, #0]
 8007b6a:	ea6f 0a03 	mvn.w	sl, r3
 8007b6e:	f04f 0800 	mov.w	r8, #0
 8007b72:	4631      	mov	r1, r6
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 fa81 	bl	800807c <_Bfree>
 8007b7a:	2f00      	cmp	r7, #0
 8007b7c:	f43f aeb4 	beq.w	80078e8 <_dtoa_r+0x6d8>
 8007b80:	f1b8 0f00 	cmp.w	r8, #0
 8007b84:	d005      	beq.n	8007b92 <_dtoa_r+0x982>
 8007b86:	45b8      	cmp	r8, r7
 8007b88:	d003      	beq.n	8007b92 <_dtoa_r+0x982>
 8007b8a:	4641      	mov	r1, r8
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 fa75 	bl	800807c <_Bfree>
 8007b92:	4639      	mov	r1, r7
 8007b94:	4620      	mov	r0, r4
 8007b96:	f000 fa71 	bl	800807c <_Bfree>
 8007b9a:	e6a5      	b.n	80078e8 <_dtoa_r+0x6d8>
 8007b9c:	2600      	movs	r6, #0
 8007b9e:	4637      	mov	r7, r6
 8007ba0:	e7e1      	b.n	8007b66 <_dtoa_r+0x956>
 8007ba2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ba4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007ba8:	4637      	mov	r7, r6
 8007baa:	e599      	b.n	80076e0 <_dtoa_r+0x4d0>
 8007bac:	9b08      	ldr	r3, [sp, #32]
 8007bae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 80fd 	beq.w	8007db2 <_dtoa_r+0xba2>
 8007bb8:	2d00      	cmp	r5, #0
 8007bba:	dd05      	ble.n	8007bc8 <_dtoa_r+0x9b8>
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	462a      	mov	r2, r5
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 fc2d 	bl	8008420 <__lshift>
 8007bc6:	4607      	mov	r7, r0
 8007bc8:	9b06      	ldr	r3, [sp, #24]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d05c      	beq.n	8007c88 <_dtoa_r+0xa78>
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f000 fa13 	bl	8007ffc <_Balloc>
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	b928      	cbnz	r0, 8007be6 <_dtoa_r+0x9d6>
 8007bda:	4b80      	ldr	r3, [pc, #512]	; (8007ddc <_dtoa_r+0xbcc>)
 8007bdc:	4602      	mov	r2, r0
 8007bde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007be2:	f7ff bb2e 	b.w	8007242 <_dtoa_r+0x32>
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	3202      	adds	r2, #2
 8007bea:	0092      	lsls	r2, r2, #2
 8007bec:	f107 010c 	add.w	r1, r7, #12
 8007bf0:	300c      	adds	r0, #12
 8007bf2:	f7fe fd2f 	bl	8006654 <memcpy>
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 fc10 	bl	8008420 <__lshift>
 8007c00:	9b00      	ldr	r3, [sp, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	9b00      	ldr	r3, [sp, #0]
 8007c08:	444b      	add	r3, r9
 8007c0a:	9307      	str	r3, [sp, #28]
 8007c0c:	9b02      	ldr	r3, [sp, #8]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	46b8      	mov	r8, r7
 8007c14:	9306      	str	r3, [sp, #24]
 8007c16:	4607      	mov	r7, r0
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	4658      	mov	r0, fp
 8007c20:	9302      	str	r3, [sp, #8]
 8007c22:	f7ff fa69 	bl	80070f8 <quorem>
 8007c26:	4603      	mov	r3, r0
 8007c28:	3330      	adds	r3, #48	; 0x30
 8007c2a:	9004      	str	r0, [sp, #16]
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	4658      	mov	r0, fp
 8007c30:	9308      	str	r3, [sp, #32]
 8007c32:	f000 fc61 	bl	80084f8 <__mcmp>
 8007c36:	463a      	mov	r2, r7
 8007c38:	4681      	mov	r9, r0
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f000 fc77 	bl	8008530 <__mdiff>
 8007c42:	68c2      	ldr	r2, [r0, #12]
 8007c44:	9b08      	ldr	r3, [sp, #32]
 8007c46:	4605      	mov	r5, r0
 8007c48:	bb02      	cbnz	r2, 8007c8c <_dtoa_r+0xa7c>
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	4658      	mov	r0, fp
 8007c4e:	f000 fc53 	bl	80084f8 <__mcmp>
 8007c52:	9b08      	ldr	r3, [sp, #32]
 8007c54:	4602      	mov	r2, r0
 8007c56:	4629      	mov	r1, r5
 8007c58:	4620      	mov	r0, r4
 8007c5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007c5e:	f000 fa0d 	bl	800807c <_Bfree>
 8007c62:	9b05      	ldr	r3, [sp, #20]
 8007c64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c66:	9d01      	ldr	r5, [sp, #4]
 8007c68:	ea43 0102 	orr.w	r1, r3, r2
 8007c6c:	9b06      	ldr	r3, [sp, #24]
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	9b08      	ldr	r3, [sp, #32]
 8007c72:	d10d      	bne.n	8007c90 <_dtoa_r+0xa80>
 8007c74:	2b39      	cmp	r3, #57	; 0x39
 8007c76:	d029      	beq.n	8007ccc <_dtoa_r+0xabc>
 8007c78:	f1b9 0f00 	cmp.w	r9, #0
 8007c7c:	dd01      	ble.n	8007c82 <_dtoa_r+0xa72>
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	3331      	adds	r3, #49	; 0x31
 8007c82:	9a02      	ldr	r2, [sp, #8]
 8007c84:	7013      	strb	r3, [r2, #0]
 8007c86:	e774      	b.n	8007b72 <_dtoa_r+0x962>
 8007c88:	4638      	mov	r0, r7
 8007c8a:	e7b9      	b.n	8007c00 <_dtoa_r+0x9f0>
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	e7e2      	b.n	8007c56 <_dtoa_r+0xa46>
 8007c90:	f1b9 0f00 	cmp.w	r9, #0
 8007c94:	db06      	blt.n	8007ca4 <_dtoa_r+0xa94>
 8007c96:	9905      	ldr	r1, [sp, #20]
 8007c98:	ea41 0909 	orr.w	r9, r1, r9
 8007c9c:	9906      	ldr	r1, [sp, #24]
 8007c9e:	ea59 0101 	orrs.w	r1, r9, r1
 8007ca2:	d120      	bne.n	8007ce6 <_dtoa_r+0xad6>
 8007ca4:	2a00      	cmp	r2, #0
 8007ca6:	ddec      	ble.n	8007c82 <_dtoa_r+0xa72>
 8007ca8:	4659      	mov	r1, fp
 8007caa:	2201      	movs	r2, #1
 8007cac:	4620      	mov	r0, r4
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	f000 fbb6 	bl	8008420 <__lshift>
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4683      	mov	fp, r0
 8007cb8:	f000 fc1e 	bl	80084f8 <__mcmp>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	9b01      	ldr	r3, [sp, #4]
 8007cc0:	dc02      	bgt.n	8007cc8 <_dtoa_r+0xab8>
 8007cc2:	d1de      	bne.n	8007c82 <_dtoa_r+0xa72>
 8007cc4:	07da      	lsls	r2, r3, #31
 8007cc6:	d5dc      	bpl.n	8007c82 <_dtoa_r+0xa72>
 8007cc8:	2b39      	cmp	r3, #57	; 0x39
 8007cca:	d1d8      	bne.n	8007c7e <_dtoa_r+0xa6e>
 8007ccc:	9a02      	ldr	r2, [sp, #8]
 8007cce:	2339      	movs	r3, #57	; 0x39
 8007cd0:	7013      	strb	r3, [r2, #0]
 8007cd2:	462b      	mov	r3, r5
 8007cd4:	461d      	mov	r5, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cdc:	2a39      	cmp	r2, #57	; 0x39
 8007cde:	d050      	beq.n	8007d82 <_dtoa_r+0xb72>
 8007ce0:	3201      	adds	r2, #1
 8007ce2:	701a      	strb	r2, [r3, #0]
 8007ce4:	e745      	b.n	8007b72 <_dtoa_r+0x962>
 8007ce6:	2a00      	cmp	r2, #0
 8007ce8:	dd03      	ble.n	8007cf2 <_dtoa_r+0xae2>
 8007cea:	2b39      	cmp	r3, #57	; 0x39
 8007cec:	d0ee      	beq.n	8007ccc <_dtoa_r+0xabc>
 8007cee:	3301      	adds	r3, #1
 8007cf0:	e7c7      	b.n	8007c82 <_dtoa_r+0xa72>
 8007cf2:	9a01      	ldr	r2, [sp, #4]
 8007cf4:	9907      	ldr	r1, [sp, #28]
 8007cf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007cfa:	428a      	cmp	r2, r1
 8007cfc:	d02a      	beq.n	8007d54 <_dtoa_r+0xb44>
 8007cfe:	4659      	mov	r1, fp
 8007d00:	2300      	movs	r3, #0
 8007d02:	220a      	movs	r2, #10
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 f9db 	bl	80080c0 <__multadd>
 8007d0a:	45b8      	cmp	r8, r7
 8007d0c:	4683      	mov	fp, r0
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	f04f 020a 	mov.w	r2, #10
 8007d16:	4641      	mov	r1, r8
 8007d18:	4620      	mov	r0, r4
 8007d1a:	d107      	bne.n	8007d2c <_dtoa_r+0xb1c>
 8007d1c:	f000 f9d0 	bl	80080c0 <__multadd>
 8007d20:	4680      	mov	r8, r0
 8007d22:	4607      	mov	r7, r0
 8007d24:	9b01      	ldr	r3, [sp, #4]
 8007d26:	3301      	adds	r3, #1
 8007d28:	9301      	str	r3, [sp, #4]
 8007d2a:	e775      	b.n	8007c18 <_dtoa_r+0xa08>
 8007d2c:	f000 f9c8 	bl	80080c0 <__multadd>
 8007d30:	4639      	mov	r1, r7
 8007d32:	4680      	mov	r8, r0
 8007d34:	2300      	movs	r3, #0
 8007d36:	220a      	movs	r2, #10
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 f9c1 	bl	80080c0 <__multadd>
 8007d3e:	4607      	mov	r7, r0
 8007d40:	e7f0      	b.n	8007d24 <_dtoa_r+0xb14>
 8007d42:	f1b9 0f00 	cmp.w	r9, #0
 8007d46:	9a00      	ldr	r2, [sp, #0]
 8007d48:	bfcc      	ite	gt
 8007d4a:	464d      	movgt	r5, r9
 8007d4c:	2501      	movle	r5, #1
 8007d4e:	4415      	add	r5, r2
 8007d50:	f04f 0800 	mov.w	r8, #0
 8007d54:	4659      	mov	r1, fp
 8007d56:	2201      	movs	r2, #1
 8007d58:	4620      	mov	r0, r4
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	f000 fb60 	bl	8008420 <__lshift>
 8007d60:	4631      	mov	r1, r6
 8007d62:	4683      	mov	fp, r0
 8007d64:	f000 fbc8 	bl	80084f8 <__mcmp>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	dcb2      	bgt.n	8007cd2 <_dtoa_r+0xac2>
 8007d6c:	d102      	bne.n	8007d74 <_dtoa_r+0xb64>
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	07db      	lsls	r3, r3, #31
 8007d72:	d4ae      	bmi.n	8007cd2 <_dtoa_r+0xac2>
 8007d74:	462b      	mov	r3, r5
 8007d76:	461d      	mov	r5, r3
 8007d78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d7c:	2a30      	cmp	r2, #48	; 0x30
 8007d7e:	d0fa      	beq.n	8007d76 <_dtoa_r+0xb66>
 8007d80:	e6f7      	b.n	8007b72 <_dtoa_r+0x962>
 8007d82:	9a00      	ldr	r2, [sp, #0]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d1a5      	bne.n	8007cd4 <_dtoa_r+0xac4>
 8007d88:	f10a 0a01 	add.w	sl, sl, #1
 8007d8c:	2331      	movs	r3, #49	; 0x31
 8007d8e:	e779      	b.n	8007c84 <_dtoa_r+0xa74>
 8007d90:	4b13      	ldr	r3, [pc, #76]	; (8007de0 <_dtoa_r+0xbd0>)
 8007d92:	f7ff baaf 	b.w	80072f4 <_dtoa_r+0xe4>
 8007d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f47f aa86 	bne.w	80072aa <_dtoa_r+0x9a>
 8007d9e:	4b11      	ldr	r3, [pc, #68]	; (8007de4 <_dtoa_r+0xbd4>)
 8007da0:	f7ff baa8 	b.w	80072f4 <_dtoa_r+0xe4>
 8007da4:	f1b9 0f00 	cmp.w	r9, #0
 8007da8:	dc03      	bgt.n	8007db2 <_dtoa_r+0xba2>
 8007daa:	9b05      	ldr	r3, [sp, #20]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	f73f aec9 	bgt.w	8007b44 <_dtoa_r+0x934>
 8007db2:	9d00      	ldr	r5, [sp, #0]
 8007db4:	4631      	mov	r1, r6
 8007db6:	4658      	mov	r0, fp
 8007db8:	f7ff f99e 	bl	80070f8 <quorem>
 8007dbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007dc0:	f805 3b01 	strb.w	r3, [r5], #1
 8007dc4:	9a00      	ldr	r2, [sp, #0]
 8007dc6:	1aaa      	subs	r2, r5, r2
 8007dc8:	4591      	cmp	r9, r2
 8007dca:	ddba      	ble.n	8007d42 <_dtoa_r+0xb32>
 8007dcc:	4659      	mov	r1, fp
 8007dce:	2300      	movs	r3, #0
 8007dd0:	220a      	movs	r2, #10
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 f974 	bl	80080c0 <__multadd>
 8007dd8:	4683      	mov	fp, r0
 8007dda:	e7eb      	b.n	8007db4 <_dtoa_r+0xba4>
 8007ddc:	08009b23 	.word	0x08009b23
 8007de0:	08009a7c 	.word	0x08009a7c
 8007de4:	08009aa0 	.word	0x08009aa0

08007de8 <std>:
 8007de8:	2300      	movs	r3, #0
 8007dea:	b510      	push	{r4, lr}
 8007dec:	4604      	mov	r4, r0
 8007dee:	e9c0 3300 	strd	r3, r3, [r0]
 8007df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007df6:	6083      	str	r3, [r0, #8]
 8007df8:	8181      	strh	r1, [r0, #12]
 8007dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8007dfc:	81c2      	strh	r2, [r0, #14]
 8007dfe:	6183      	str	r3, [r0, #24]
 8007e00:	4619      	mov	r1, r3
 8007e02:	2208      	movs	r2, #8
 8007e04:	305c      	adds	r0, #92	; 0x5c
 8007e06:	f7fe fc33 	bl	8006670 <memset>
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <std+0x38>)
 8007e0c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e0e:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <std+0x3c>)
 8007e10:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e12:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <std+0x40>)
 8007e14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <std+0x44>)
 8007e18:	6224      	str	r4, [r4, #32]
 8007e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e1c:	bd10      	pop	{r4, pc}
 8007e1e:	bf00      	nop
 8007e20:	080089c9 	.word	0x080089c9
 8007e24:	080089eb 	.word	0x080089eb
 8007e28:	08008a23 	.word	0x08008a23
 8007e2c:	08008a47 	.word	0x08008a47

08007e30 <_cleanup_r>:
 8007e30:	4901      	ldr	r1, [pc, #4]	; (8007e38 <_cleanup_r+0x8>)
 8007e32:	f000 b8af 	b.w	8007f94 <_fwalk_reent>
 8007e36:	bf00      	nop
 8007e38:	08008d5d 	.word	0x08008d5d

08007e3c <__sfmoreglue>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	1e4a      	subs	r2, r1, #1
 8007e40:	2568      	movs	r5, #104	; 0x68
 8007e42:	4355      	muls	r5, r2
 8007e44:	460e      	mov	r6, r1
 8007e46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e4a:	f7fe fc69 	bl	8006720 <_malloc_r>
 8007e4e:	4604      	mov	r4, r0
 8007e50:	b140      	cbz	r0, 8007e64 <__sfmoreglue+0x28>
 8007e52:	2100      	movs	r1, #0
 8007e54:	e9c0 1600 	strd	r1, r6, [r0]
 8007e58:	300c      	adds	r0, #12
 8007e5a:	60a0      	str	r0, [r4, #8]
 8007e5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e60:	f7fe fc06 	bl	8006670 <memset>
 8007e64:	4620      	mov	r0, r4
 8007e66:	bd70      	pop	{r4, r5, r6, pc}

08007e68 <__sfp_lock_acquire>:
 8007e68:	4801      	ldr	r0, [pc, #4]	; (8007e70 <__sfp_lock_acquire+0x8>)
 8007e6a:	f000 b8b8 	b.w	8007fde <__retarget_lock_acquire_recursive>
 8007e6e:	bf00      	nop
 8007e70:	20000e98 	.word	0x20000e98

08007e74 <__sfp_lock_release>:
 8007e74:	4801      	ldr	r0, [pc, #4]	; (8007e7c <__sfp_lock_release+0x8>)
 8007e76:	f000 b8b3 	b.w	8007fe0 <__retarget_lock_release_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	20000e98 	.word	0x20000e98

08007e80 <__sinit_lock_acquire>:
 8007e80:	4801      	ldr	r0, [pc, #4]	; (8007e88 <__sinit_lock_acquire+0x8>)
 8007e82:	f000 b8ac 	b.w	8007fde <__retarget_lock_acquire_recursive>
 8007e86:	bf00      	nop
 8007e88:	20000e93 	.word	0x20000e93

08007e8c <__sinit_lock_release>:
 8007e8c:	4801      	ldr	r0, [pc, #4]	; (8007e94 <__sinit_lock_release+0x8>)
 8007e8e:	f000 b8a7 	b.w	8007fe0 <__retarget_lock_release_recursive>
 8007e92:	bf00      	nop
 8007e94:	20000e93 	.word	0x20000e93

08007e98 <__sinit>:
 8007e98:	b510      	push	{r4, lr}
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	f7ff fff0 	bl	8007e80 <__sinit_lock_acquire>
 8007ea0:	69a3      	ldr	r3, [r4, #24]
 8007ea2:	b11b      	cbz	r3, 8007eac <__sinit+0x14>
 8007ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea8:	f7ff bff0 	b.w	8007e8c <__sinit_lock_release>
 8007eac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007eb0:	6523      	str	r3, [r4, #80]	; 0x50
 8007eb2:	4b13      	ldr	r3, [pc, #76]	; (8007f00 <__sinit+0x68>)
 8007eb4:	4a13      	ldr	r2, [pc, #76]	; (8007f04 <__sinit+0x6c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eba:	42a3      	cmp	r3, r4
 8007ebc:	bf04      	itt	eq
 8007ebe:	2301      	moveq	r3, #1
 8007ec0:	61a3      	streq	r3, [r4, #24]
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f000 f820 	bl	8007f08 <__sfp>
 8007ec8:	6060      	str	r0, [r4, #4]
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 f81c 	bl	8007f08 <__sfp>
 8007ed0:	60a0      	str	r0, [r4, #8]
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f000 f818 	bl	8007f08 <__sfp>
 8007ed8:	2200      	movs	r2, #0
 8007eda:	60e0      	str	r0, [r4, #12]
 8007edc:	2104      	movs	r1, #4
 8007ede:	6860      	ldr	r0, [r4, #4]
 8007ee0:	f7ff ff82 	bl	8007de8 <std>
 8007ee4:	68a0      	ldr	r0, [r4, #8]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	2109      	movs	r1, #9
 8007eea:	f7ff ff7d 	bl	8007de8 <std>
 8007eee:	68e0      	ldr	r0, [r4, #12]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	2112      	movs	r1, #18
 8007ef4:	f7ff ff78 	bl	8007de8 <std>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	61a3      	str	r3, [r4, #24]
 8007efc:	e7d2      	b.n	8007ea4 <__sinit+0xc>
 8007efe:	bf00      	nop
 8007f00:	08009a68 	.word	0x08009a68
 8007f04:	08007e31 	.word	0x08007e31

08007f08 <__sfp>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	4607      	mov	r7, r0
 8007f0c:	f7ff ffac 	bl	8007e68 <__sfp_lock_acquire>
 8007f10:	4b1e      	ldr	r3, [pc, #120]	; (8007f8c <__sfp+0x84>)
 8007f12:	681e      	ldr	r6, [r3, #0]
 8007f14:	69b3      	ldr	r3, [r6, #24]
 8007f16:	b913      	cbnz	r3, 8007f1e <__sfp+0x16>
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f7ff ffbd 	bl	8007e98 <__sinit>
 8007f1e:	3648      	adds	r6, #72	; 0x48
 8007f20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	d503      	bpl.n	8007f30 <__sfp+0x28>
 8007f28:	6833      	ldr	r3, [r6, #0]
 8007f2a:	b30b      	cbz	r3, 8007f70 <__sfp+0x68>
 8007f2c:	6836      	ldr	r6, [r6, #0]
 8007f2e:	e7f7      	b.n	8007f20 <__sfp+0x18>
 8007f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f34:	b9d5      	cbnz	r5, 8007f6c <__sfp+0x64>
 8007f36:	4b16      	ldr	r3, [pc, #88]	; (8007f90 <__sfp+0x88>)
 8007f38:	60e3      	str	r3, [r4, #12]
 8007f3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f3e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f40:	f000 f84c 	bl	8007fdc <__retarget_lock_init_recursive>
 8007f44:	f7ff ff96 	bl	8007e74 <__sfp_lock_release>
 8007f48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f50:	6025      	str	r5, [r4, #0]
 8007f52:	61a5      	str	r5, [r4, #24]
 8007f54:	2208      	movs	r2, #8
 8007f56:	4629      	mov	r1, r5
 8007f58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f5c:	f7fe fb88 	bl	8006670 <memset>
 8007f60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f68:	4620      	mov	r0, r4
 8007f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f6c:	3468      	adds	r4, #104	; 0x68
 8007f6e:	e7d9      	b.n	8007f24 <__sfp+0x1c>
 8007f70:	2104      	movs	r1, #4
 8007f72:	4638      	mov	r0, r7
 8007f74:	f7ff ff62 	bl	8007e3c <__sfmoreglue>
 8007f78:	4604      	mov	r4, r0
 8007f7a:	6030      	str	r0, [r6, #0]
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d1d5      	bne.n	8007f2c <__sfp+0x24>
 8007f80:	f7ff ff78 	bl	8007e74 <__sfp_lock_release>
 8007f84:	230c      	movs	r3, #12
 8007f86:	603b      	str	r3, [r7, #0]
 8007f88:	e7ee      	b.n	8007f68 <__sfp+0x60>
 8007f8a:	bf00      	nop
 8007f8c:	08009a68 	.word	0x08009a68
 8007f90:	ffff0001 	.word	0xffff0001

08007f94 <_fwalk_reent>:
 8007f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f98:	4606      	mov	r6, r0
 8007f9a:	4688      	mov	r8, r1
 8007f9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fa0:	2700      	movs	r7, #0
 8007fa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fa6:	f1b9 0901 	subs.w	r9, r9, #1
 8007faa:	d505      	bpl.n	8007fb8 <_fwalk_reent+0x24>
 8007fac:	6824      	ldr	r4, [r4, #0]
 8007fae:	2c00      	cmp	r4, #0
 8007fb0:	d1f7      	bne.n	8007fa2 <_fwalk_reent+0xe>
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fb8:	89ab      	ldrh	r3, [r5, #12]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d907      	bls.n	8007fce <_fwalk_reent+0x3a>
 8007fbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	d003      	beq.n	8007fce <_fwalk_reent+0x3a>
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	4630      	mov	r0, r6
 8007fca:	47c0      	blx	r8
 8007fcc:	4307      	orrs	r7, r0
 8007fce:	3568      	adds	r5, #104	; 0x68
 8007fd0:	e7e9      	b.n	8007fa6 <_fwalk_reent+0x12>
	...

08007fd4 <_localeconv_r>:
 8007fd4:	4800      	ldr	r0, [pc, #0]	; (8007fd8 <_localeconv_r+0x4>)
 8007fd6:	4770      	bx	lr
 8007fd8:	20000998 	.word	0x20000998

08007fdc <__retarget_lock_init_recursive>:
 8007fdc:	4770      	bx	lr

08007fde <__retarget_lock_acquire_recursive>:
 8007fde:	4770      	bx	lr

08007fe0 <__retarget_lock_release_recursive>:
 8007fe0:	4770      	bx	lr
	...

08007fe4 <__malloc_lock>:
 8007fe4:	4801      	ldr	r0, [pc, #4]	; (8007fec <__malloc_lock+0x8>)
 8007fe6:	f7ff bffa 	b.w	8007fde <__retarget_lock_acquire_recursive>
 8007fea:	bf00      	nop
 8007fec:	20000e94 	.word	0x20000e94

08007ff0 <__malloc_unlock>:
 8007ff0:	4801      	ldr	r0, [pc, #4]	; (8007ff8 <__malloc_unlock+0x8>)
 8007ff2:	f7ff bff5 	b.w	8007fe0 <__retarget_lock_release_recursive>
 8007ff6:	bf00      	nop
 8007ff8:	20000e94 	.word	0x20000e94

08007ffc <_Balloc>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008000:	4604      	mov	r4, r0
 8008002:	460d      	mov	r5, r1
 8008004:	b976      	cbnz	r6, 8008024 <_Balloc+0x28>
 8008006:	2010      	movs	r0, #16
 8008008:	f7fe fb1c 	bl	8006644 <malloc>
 800800c:	4602      	mov	r2, r0
 800800e:	6260      	str	r0, [r4, #36]	; 0x24
 8008010:	b920      	cbnz	r0, 800801c <_Balloc+0x20>
 8008012:	4b18      	ldr	r3, [pc, #96]	; (8008074 <_Balloc+0x78>)
 8008014:	4818      	ldr	r0, [pc, #96]	; (8008078 <_Balloc+0x7c>)
 8008016:	2166      	movs	r1, #102	; 0x66
 8008018:	f000 fdec 	bl	8008bf4 <__assert_func>
 800801c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008020:	6006      	str	r6, [r0, #0]
 8008022:	60c6      	str	r6, [r0, #12]
 8008024:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008026:	68f3      	ldr	r3, [r6, #12]
 8008028:	b183      	cbz	r3, 800804c <_Balloc+0x50>
 800802a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008032:	b9b8      	cbnz	r0, 8008064 <_Balloc+0x68>
 8008034:	2101      	movs	r1, #1
 8008036:	fa01 f605 	lsl.w	r6, r1, r5
 800803a:	1d72      	adds	r2, r6, #5
 800803c:	0092      	lsls	r2, r2, #2
 800803e:	4620      	mov	r0, r4
 8008040:	f000 fb5a 	bl	80086f8 <_calloc_r>
 8008044:	b160      	cbz	r0, 8008060 <_Balloc+0x64>
 8008046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800804a:	e00e      	b.n	800806a <_Balloc+0x6e>
 800804c:	2221      	movs	r2, #33	; 0x21
 800804e:	2104      	movs	r1, #4
 8008050:	4620      	mov	r0, r4
 8008052:	f000 fb51 	bl	80086f8 <_calloc_r>
 8008056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008058:	60f0      	str	r0, [r6, #12]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e4      	bne.n	800802a <_Balloc+0x2e>
 8008060:	2000      	movs	r0, #0
 8008062:	bd70      	pop	{r4, r5, r6, pc}
 8008064:	6802      	ldr	r2, [r0, #0]
 8008066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800806a:	2300      	movs	r3, #0
 800806c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008070:	e7f7      	b.n	8008062 <_Balloc+0x66>
 8008072:	bf00      	nop
 8008074:	08009aad 	.word	0x08009aad
 8008078:	08009b94 	.word	0x08009b94

0800807c <_Bfree>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008080:	4605      	mov	r5, r0
 8008082:	460c      	mov	r4, r1
 8008084:	b976      	cbnz	r6, 80080a4 <_Bfree+0x28>
 8008086:	2010      	movs	r0, #16
 8008088:	f7fe fadc 	bl	8006644 <malloc>
 800808c:	4602      	mov	r2, r0
 800808e:	6268      	str	r0, [r5, #36]	; 0x24
 8008090:	b920      	cbnz	r0, 800809c <_Bfree+0x20>
 8008092:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <_Bfree+0x3c>)
 8008094:	4809      	ldr	r0, [pc, #36]	; (80080bc <_Bfree+0x40>)
 8008096:	218a      	movs	r1, #138	; 0x8a
 8008098:	f000 fdac 	bl	8008bf4 <__assert_func>
 800809c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080a0:	6006      	str	r6, [r0, #0]
 80080a2:	60c6      	str	r6, [r0, #12]
 80080a4:	b13c      	cbz	r4, 80080b6 <_Bfree+0x3a>
 80080a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080a8:	6862      	ldr	r2, [r4, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080b0:	6021      	str	r1, [r4, #0]
 80080b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	08009aad 	.word	0x08009aad
 80080bc:	08009b94 	.word	0x08009b94

080080c0 <__multadd>:
 80080c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c4:	690e      	ldr	r6, [r1, #16]
 80080c6:	4607      	mov	r7, r0
 80080c8:	4698      	mov	r8, r3
 80080ca:	460c      	mov	r4, r1
 80080cc:	f101 0014 	add.w	r0, r1, #20
 80080d0:	2300      	movs	r3, #0
 80080d2:	6805      	ldr	r5, [r0, #0]
 80080d4:	b2a9      	uxth	r1, r5
 80080d6:	fb02 8101 	mla	r1, r2, r1, r8
 80080da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80080de:	0c2d      	lsrs	r5, r5, #16
 80080e0:	fb02 c505 	mla	r5, r2, r5, ip
 80080e4:	b289      	uxth	r1, r1
 80080e6:	3301      	adds	r3, #1
 80080e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80080ec:	429e      	cmp	r6, r3
 80080ee:	f840 1b04 	str.w	r1, [r0], #4
 80080f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80080f6:	dcec      	bgt.n	80080d2 <__multadd+0x12>
 80080f8:	f1b8 0f00 	cmp.w	r8, #0
 80080fc:	d022      	beq.n	8008144 <__multadd+0x84>
 80080fe:	68a3      	ldr	r3, [r4, #8]
 8008100:	42b3      	cmp	r3, r6
 8008102:	dc19      	bgt.n	8008138 <__multadd+0x78>
 8008104:	6861      	ldr	r1, [r4, #4]
 8008106:	4638      	mov	r0, r7
 8008108:	3101      	adds	r1, #1
 800810a:	f7ff ff77 	bl	8007ffc <_Balloc>
 800810e:	4605      	mov	r5, r0
 8008110:	b928      	cbnz	r0, 800811e <__multadd+0x5e>
 8008112:	4602      	mov	r2, r0
 8008114:	4b0d      	ldr	r3, [pc, #52]	; (800814c <__multadd+0x8c>)
 8008116:	480e      	ldr	r0, [pc, #56]	; (8008150 <__multadd+0x90>)
 8008118:	21b5      	movs	r1, #181	; 0xb5
 800811a:	f000 fd6b 	bl	8008bf4 <__assert_func>
 800811e:	6922      	ldr	r2, [r4, #16]
 8008120:	3202      	adds	r2, #2
 8008122:	f104 010c 	add.w	r1, r4, #12
 8008126:	0092      	lsls	r2, r2, #2
 8008128:	300c      	adds	r0, #12
 800812a:	f7fe fa93 	bl	8006654 <memcpy>
 800812e:	4621      	mov	r1, r4
 8008130:	4638      	mov	r0, r7
 8008132:	f7ff ffa3 	bl	800807c <_Bfree>
 8008136:	462c      	mov	r4, r5
 8008138:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800813c:	3601      	adds	r6, #1
 800813e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008142:	6126      	str	r6, [r4, #16]
 8008144:	4620      	mov	r0, r4
 8008146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814a:	bf00      	nop
 800814c:	08009b23 	.word	0x08009b23
 8008150:	08009b94 	.word	0x08009b94

08008154 <__hi0bits>:
 8008154:	0c03      	lsrs	r3, r0, #16
 8008156:	041b      	lsls	r3, r3, #16
 8008158:	b9d3      	cbnz	r3, 8008190 <__hi0bits+0x3c>
 800815a:	0400      	lsls	r0, r0, #16
 800815c:	2310      	movs	r3, #16
 800815e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008162:	bf04      	itt	eq
 8008164:	0200      	lsleq	r0, r0, #8
 8008166:	3308      	addeq	r3, #8
 8008168:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800816c:	bf04      	itt	eq
 800816e:	0100      	lsleq	r0, r0, #4
 8008170:	3304      	addeq	r3, #4
 8008172:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008176:	bf04      	itt	eq
 8008178:	0080      	lsleq	r0, r0, #2
 800817a:	3302      	addeq	r3, #2
 800817c:	2800      	cmp	r0, #0
 800817e:	db05      	blt.n	800818c <__hi0bits+0x38>
 8008180:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008184:	f103 0301 	add.w	r3, r3, #1
 8008188:	bf08      	it	eq
 800818a:	2320      	moveq	r3, #32
 800818c:	4618      	mov	r0, r3
 800818e:	4770      	bx	lr
 8008190:	2300      	movs	r3, #0
 8008192:	e7e4      	b.n	800815e <__hi0bits+0xa>

08008194 <__lo0bits>:
 8008194:	6803      	ldr	r3, [r0, #0]
 8008196:	f013 0207 	ands.w	r2, r3, #7
 800819a:	4601      	mov	r1, r0
 800819c:	d00b      	beq.n	80081b6 <__lo0bits+0x22>
 800819e:	07da      	lsls	r2, r3, #31
 80081a0:	d424      	bmi.n	80081ec <__lo0bits+0x58>
 80081a2:	0798      	lsls	r0, r3, #30
 80081a4:	bf49      	itett	mi
 80081a6:	085b      	lsrmi	r3, r3, #1
 80081a8:	089b      	lsrpl	r3, r3, #2
 80081aa:	2001      	movmi	r0, #1
 80081ac:	600b      	strmi	r3, [r1, #0]
 80081ae:	bf5c      	itt	pl
 80081b0:	600b      	strpl	r3, [r1, #0]
 80081b2:	2002      	movpl	r0, #2
 80081b4:	4770      	bx	lr
 80081b6:	b298      	uxth	r0, r3
 80081b8:	b9b0      	cbnz	r0, 80081e8 <__lo0bits+0x54>
 80081ba:	0c1b      	lsrs	r3, r3, #16
 80081bc:	2010      	movs	r0, #16
 80081be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80081c2:	bf04      	itt	eq
 80081c4:	0a1b      	lsreq	r3, r3, #8
 80081c6:	3008      	addeq	r0, #8
 80081c8:	071a      	lsls	r2, r3, #28
 80081ca:	bf04      	itt	eq
 80081cc:	091b      	lsreq	r3, r3, #4
 80081ce:	3004      	addeq	r0, #4
 80081d0:	079a      	lsls	r2, r3, #30
 80081d2:	bf04      	itt	eq
 80081d4:	089b      	lsreq	r3, r3, #2
 80081d6:	3002      	addeq	r0, #2
 80081d8:	07da      	lsls	r2, r3, #31
 80081da:	d403      	bmi.n	80081e4 <__lo0bits+0x50>
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	f100 0001 	add.w	r0, r0, #1
 80081e2:	d005      	beq.n	80081f0 <__lo0bits+0x5c>
 80081e4:	600b      	str	r3, [r1, #0]
 80081e6:	4770      	bx	lr
 80081e8:	4610      	mov	r0, r2
 80081ea:	e7e8      	b.n	80081be <__lo0bits+0x2a>
 80081ec:	2000      	movs	r0, #0
 80081ee:	4770      	bx	lr
 80081f0:	2020      	movs	r0, #32
 80081f2:	4770      	bx	lr

080081f4 <__i2b>:
 80081f4:	b510      	push	{r4, lr}
 80081f6:	460c      	mov	r4, r1
 80081f8:	2101      	movs	r1, #1
 80081fa:	f7ff feff 	bl	8007ffc <_Balloc>
 80081fe:	4602      	mov	r2, r0
 8008200:	b928      	cbnz	r0, 800820e <__i2b+0x1a>
 8008202:	4b05      	ldr	r3, [pc, #20]	; (8008218 <__i2b+0x24>)
 8008204:	4805      	ldr	r0, [pc, #20]	; (800821c <__i2b+0x28>)
 8008206:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800820a:	f000 fcf3 	bl	8008bf4 <__assert_func>
 800820e:	2301      	movs	r3, #1
 8008210:	6144      	str	r4, [r0, #20]
 8008212:	6103      	str	r3, [r0, #16]
 8008214:	bd10      	pop	{r4, pc}
 8008216:	bf00      	nop
 8008218:	08009b23 	.word	0x08009b23
 800821c:	08009b94 	.word	0x08009b94

08008220 <__multiply>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	4614      	mov	r4, r2
 8008226:	690a      	ldr	r2, [r1, #16]
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	429a      	cmp	r2, r3
 800822c:	bfb8      	it	lt
 800822e:	460b      	movlt	r3, r1
 8008230:	460d      	mov	r5, r1
 8008232:	bfbc      	itt	lt
 8008234:	4625      	movlt	r5, r4
 8008236:	461c      	movlt	r4, r3
 8008238:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800823c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008240:	68ab      	ldr	r3, [r5, #8]
 8008242:	6869      	ldr	r1, [r5, #4]
 8008244:	eb0a 0709 	add.w	r7, sl, r9
 8008248:	42bb      	cmp	r3, r7
 800824a:	b085      	sub	sp, #20
 800824c:	bfb8      	it	lt
 800824e:	3101      	addlt	r1, #1
 8008250:	f7ff fed4 	bl	8007ffc <_Balloc>
 8008254:	b930      	cbnz	r0, 8008264 <__multiply+0x44>
 8008256:	4602      	mov	r2, r0
 8008258:	4b42      	ldr	r3, [pc, #264]	; (8008364 <__multiply+0x144>)
 800825a:	4843      	ldr	r0, [pc, #268]	; (8008368 <__multiply+0x148>)
 800825c:	f240 115d 	movw	r1, #349	; 0x15d
 8008260:	f000 fcc8 	bl	8008bf4 <__assert_func>
 8008264:	f100 0614 	add.w	r6, r0, #20
 8008268:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800826c:	4633      	mov	r3, r6
 800826e:	2200      	movs	r2, #0
 8008270:	4543      	cmp	r3, r8
 8008272:	d31e      	bcc.n	80082b2 <__multiply+0x92>
 8008274:	f105 0c14 	add.w	ip, r5, #20
 8008278:	f104 0314 	add.w	r3, r4, #20
 800827c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008280:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008284:	9202      	str	r2, [sp, #8]
 8008286:	ebac 0205 	sub.w	r2, ip, r5
 800828a:	3a15      	subs	r2, #21
 800828c:	f022 0203 	bic.w	r2, r2, #3
 8008290:	3204      	adds	r2, #4
 8008292:	f105 0115 	add.w	r1, r5, #21
 8008296:	458c      	cmp	ip, r1
 8008298:	bf38      	it	cc
 800829a:	2204      	movcc	r2, #4
 800829c:	9201      	str	r2, [sp, #4]
 800829e:	9a02      	ldr	r2, [sp, #8]
 80082a0:	9303      	str	r3, [sp, #12]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d808      	bhi.n	80082b8 <__multiply+0x98>
 80082a6:	2f00      	cmp	r7, #0
 80082a8:	dc55      	bgt.n	8008356 <__multiply+0x136>
 80082aa:	6107      	str	r7, [r0, #16]
 80082ac:	b005      	add	sp, #20
 80082ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b2:	f843 2b04 	str.w	r2, [r3], #4
 80082b6:	e7db      	b.n	8008270 <__multiply+0x50>
 80082b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80082bc:	f1ba 0f00 	cmp.w	sl, #0
 80082c0:	d020      	beq.n	8008304 <__multiply+0xe4>
 80082c2:	f105 0e14 	add.w	lr, r5, #20
 80082c6:	46b1      	mov	r9, r6
 80082c8:	2200      	movs	r2, #0
 80082ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 80082ce:	f8d9 b000 	ldr.w	fp, [r9]
 80082d2:	b2a1      	uxth	r1, r4
 80082d4:	fa1f fb8b 	uxth.w	fp, fp
 80082d8:	fb0a b101 	mla	r1, sl, r1, fp
 80082dc:	4411      	add	r1, r2
 80082de:	f8d9 2000 	ldr.w	r2, [r9]
 80082e2:	0c24      	lsrs	r4, r4, #16
 80082e4:	0c12      	lsrs	r2, r2, #16
 80082e6:	fb0a 2404 	mla	r4, sl, r4, r2
 80082ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80082ee:	b289      	uxth	r1, r1
 80082f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80082f4:	45f4      	cmp	ip, lr
 80082f6:	f849 1b04 	str.w	r1, [r9], #4
 80082fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80082fe:	d8e4      	bhi.n	80082ca <__multiply+0xaa>
 8008300:	9901      	ldr	r1, [sp, #4]
 8008302:	5072      	str	r2, [r6, r1]
 8008304:	9a03      	ldr	r2, [sp, #12]
 8008306:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800830a:	3304      	adds	r3, #4
 800830c:	f1b9 0f00 	cmp.w	r9, #0
 8008310:	d01f      	beq.n	8008352 <__multiply+0x132>
 8008312:	6834      	ldr	r4, [r6, #0]
 8008314:	f105 0114 	add.w	r1, r5, #20
 8008318:	46b6      	mov	lr, r6
 800831a:	f04f 0a00 	mov.w	sl, #0
 800831e:	880a      	ldrh	r2, [r1, #0]
 8008320:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008324:	fb09 b202 	mla	r2, r9, r2, fp
 8008328:	4492      	add	sl, r2
 800832a:	b2a4      	uxth	r4, r4
 800832c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008330:	f84e 4b04 	str.w	r4, [lr], #4
 8008334:	f851 4b04 	ldr.w	r4, [r1], #4
 8008338:	f8be 2000 	ldrh.w	r2, [lr]
 800833c:	0c24      	lsrs	r4, r4, #16
 800833e:	fb09 2404 	mla	r4, r9, r4, r2
 8008342:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008346:	458c      	cmp	ip, r1
 8008348:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800834c:	d8e7      	bhi.n	800831e <__multiply+0xfe>
 800834e:	9a01      	ldr	r2, [sp, #4]
 8008350:	50b4      	str	r4, [r6, r2]
 8008352:	3604      	adds	r6, #4
 8008354:	e7a3      	b.n	800829e <__multiply+0x7e>
 8008356:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1a5      	bne.n	80082aa <__multiply+0x8a>
 800835e:	3f01      	subs	r7, #1
 8008360:	e7a1      	b.n	80082a6 <__multiply+0x86>
 8008362:	bf00      	nop
 8008364:	08009b23 	.word	0x08009b23
 8008368:	08009b94 	.word	0x08009b94

0800836c <__pow5mult>:
 800836c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008370:	4615      	mov	r5, r2
 8008372:	f012 0203 	ands.w	r2, r2, #3
 8008376:	4606      	mov	r6, r0
 8008378:	460f      	mov	r7, r1
 800837a:	d007      	beq.n	800838c <__pow5mult+0x20>
 800837c:	4c25      	ldr	r4, [pc, #148]	; (8008414 <__pow5mult+0xa8>)
 800837e:	3a01      	subs	r2, #1
 8008380:	2300      	movs	r3, #0
 8008382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008386:	f7ff fe9b 	bl	80080c0 <__multadd>
 800838a:	4607      	mov	r7, r0
 800838c:	10ad      	asrs	r5, r5, #2
 800838e:	d03d      	beq.n	800840c <__pow5mult+0xa0>
 8008390:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008392:	b97c      	cbnz	r4, 80083b4 <__pow5mult+0x48>
 8008394:	2010      	movs	r0, #16
 8008396:	f7fe f955 	bl	8006644 <malloc>
 800839a:	4602      	mov	r2, r0
 800839c:	6270      	str	r0, [r6, #36]	; 0x24
 800839e:	b928      	cbnz	r0, 80083ac <__pow5mult+0x40>
 80083a0:	4b1d      	ldr	r3, [pc, #116]	; (8008418 <__pow5mult+0xac>)
 80083a2:	481e      	ldr	r0, [pc, #120]	; (800841c <__pow5mult+0xb0>)
 80083a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80083a8:	f000 fc24 	bl	8008bf4 <__assert_func>
 80083ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083b0:	6004      	str	r4, [r0, #0]
 80083b2:	60c4      	str	r4, [r0, #12]
 80083b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083bc:	b94c      	cbnz	r4, 80083d2 <__pow5mult+0x66>
 80083be:	f240 2171 	movw	r1, #625	; 0x271
 80083c2:	4630      	mov	r0, r6
 80083c4:	f7ff ff16 	bl	80081f4 <__i2b>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80083ce:	4604      	mov	r4, r0
 80083d0:	6003      	str	r3, [r0, #0]
 80083d2:	f04f 0900 	mov.w	r9, #0
 80083d6:	07eb      	lsls	r3, r5, #31
 80083d8:	d50a      	bpl.n	80083f0 <__pow5mult+0x84>
 80083da:	4639      	mov	r1, r7
 80083dc:	4622      	mov	r2, r4
 80083de:	4630      	mov	r0, r6
 80083e0:	f7ff ff1e 	bl	8008220 <__multiply>
 80083e4:	4639      	mov	r1, r7
 80083e6:	4680      	mov	r8, r0
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7ff fe47 	bl	800807c <_Bfree>
 80083ee:	4647      	mov	r7, r8
 80083f0:	106d      	asrs	r5, r5, #1
 80083f2:	d00b      	beq.n	800840c <__pow5mult+0xa0>
 80083f4:	6820      	ldr	r0, [r4, #0]
 80083f6:	b938      	cbnz	r0, 8008408 <__pow5mult+0x9c>
 80083f8:	4622      	mov	r2, r4
 80083fa:	4621      	mov	r1, r4
 80083fc:	4630      	mov	r0, r6
 80083fe:	f7ff ff0f 	bl	8008220 <__multiply>
 8008402:	6020      	str	r0, [r4, #0]
 8008404:	f8c0 9000 	str.w	r9, [r0]
 8008408:	4604      	mov	r4, r0
 800840a:	e7e4      	b.n	80083d6 <__pow5mult+0x6a>
 800840c:	4638      	mov	r0, r7
 800840e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008412:	bf00      	nop
 8008414:	08009ce8 	.word	0x08009ce8
 8008418:	08009aad 	.word	0x08009aad
 800841c:	08009b94 	.word	0x08009b94

08008420 <__lshift>:
 8008420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	460c      	mov	r4, r1
 8008426:	6849      	ldr	r1, [r1, #4]
 8008428:	6923      	ldr	r3, [r4, #16]
 800842a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800842e:	68a3      	ldr	r3, [r4, #8]
 8008430:	4607      	mov	r7, r0
 8008432:	4691      	mov	r9, r2
 8008434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008438:	f108 0601 	add.w	r6, r8, #1
 800843c:	42b3      	cmp	r3, r6
 800843e:	db0b      	blt.n	8008458 <__lshift+0x38>
 8008440:	4638      	mov	r0, r7
 8008442:	f7ff fddb 	bl	8007ffc <_Balloc>
 8008446:	4605      	mov	r5, r0
 8008448:	b948      	cbnz	r0, 800845e <__lshift+0x3e>
 800844a:	4602      	mov	r2, r0
 800844c:	4b28      	ldr	r3, [pc, #160]	; (80084f0 <__lshift+0xd0>)
 800844e:	4829      	ldr	r0, [pc, #164]	; (80084f4 <__lshift+0xd4>)
 8008450:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008454:	f000 fbce 	bl	8008bf4 <__assert_func>
 8008458:	3101      	adds	r1, #1
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	e7ee      	b.n	800843c <__lshift+0x1c>
 800845e:	2300      	movs	r3, #0
 8008460:	f100 0114 	add.w	r1, r0, #20
 8008464:	f100 0210 	add.w	r2, r0, #16
 8008468:	4618      	mov	r0, r3
 800846a:	4553      	cmp	r3, sl
 800846c:	db33      	blt.n	80084d6 <__lshift+0xb6>
 800846e:	6920      	ldr	r0, [r4, #16]
 8008470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008474:	f104 0314 	add.w	r3, r4, #20
 8008478:	f019 091f 	ands.w	r9, r9, #31
 800847c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008484:	d02b      	beq.n	80084de <__lshift+0xbe>
 8008486:	f1c9 0e20 	rsb	lr, r9, #32
 800848a:	468a      	mov	sl, r1
 800848c:	2200      	movs	r2, #0
 800848e:	6818      	ldr	r0, [r3, #0]
 8008490:	fa00 f009 	lsl.w	r0, r0, r9
 8008494:	4302      	orrs	r2, r0
 8008496:	f84a 2b04 	str.w	r2, [sl], #4
 800849a:	f853 2b04 	ldr.w	r2, [r3], #4
 800849e:	459c      	cmp	ip, r3
 80084a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80084a4:	d8f3      	bhi.n	800848e <__lshift+0x6e>
 80084a6:	ebac 0304 	sub.w	r3, ip, r4
 80084aa:	3b15      	subs	r3, #21
 80084ac:	f023 0303 	bic.w	r3, r3, #3
 80084b0:	3304      	adds	r3, #4
 80084b2:	f104 0015 	add.w	r0, r4, #21
 80084b6:	4584      	cmp	ip, r0
 80084b8:	bf38      	it	cc
 80084ba:	2304      	movcc	r3, #4
 80084bc:	50ca      	str	r2, [r1, r3]
 80084be:	b10a      	cbz	r2, 80084c4 <__lshift+0xa4>
 80084c0:	f108 0602 	add.w	r6, r8, #2
 80084c4:	3e01      	subs	r6, #1
 80084c6:	4638      	mov	r0, r7
 80084c8:	612e      	str	r6, [r5, #16]
 80084ca:	4621      	mov	r1, r4
 80084cc:	f7ff fdd6 	bl	800807c <_Bfree>
 80084d0:	4628      	mov	r0, r5
 80084d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80084da:	3301      	adds	r3, #1
 80084dc:	e7c5      	b.n	800846a <__lshift+0x4a>
 80084de:	3904      	subs	r1, #4
 80084e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80084e8:	459c      	cmp	ip, r3
 80084ea:	d8f9      	bhi.n	80084e0 <__lshift+0xc0>
 80084ec:	e7ea      	b.n	80084c4 <__lshift+0xa4>
 80084ee:	bf00      	nop
 80084f0:	08009b23 	.word	0x08009b23
 80084f4:	08009b94 	.word	0x08009b94

080084f8 <__mcmp>:
 80084f8:	b530      	push	{r4, r5, lr}
 80084fa:	6902      	ldr	r2, [r0, #16]
 80084fc:	690c      	ldr	r4, [r1, #16]
 80084fe:	1b12      	subs	r2, r2, r4
 8008500:	d10e      	bne.n	8008520 <__mcmp+0x28>
 8008502:	f100 0314 	add.w	r3, r0, #20
 8008506:	3114      	adds	r1, #20
 8008508:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800850c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008510:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008514:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008518:	42a5      	cmp	r5, r4
 800851a:	d003      	beq.n	8008524 <__mcmp+0x2c>
 800851c:	d305      	bcc.n	800852a <__mcmp+0x32>
 800851e:	2201      	movs	r2, #1
 8008520:	4610      	mov	r0, r2
 8008522:	bd30      	pop	{r4, r5, pc}
 8008524:	4283      	cmp	r3, r0
 8008526:	d3f3      	bcc.n	8008510 <__mcmp+0x18>
 8008528:	e7fa      	b.n	8008520 <__mcmp+0x28>
 800852a:	f04f 32ff 	mov.w	r2, #4294967295
 800852e:	e7f7      	b.n	8008520 <__mcmp+0x28>

08008530 <__mdiff>:
 8008530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	460c      	mov	r4, r1
 8008536:	4606      	mov	r6, r0
 8008538:	4611      	mov	r1, r2
 800853a:	4620      	mov	r0, r4
 800853c:	4617      	mov	r7, r2
 800853e:	f7ff ffdb 	bl	80084f8 <__mcmp>
 8008542:	1e05      	subs	r5, r0, #0
 8008544:	d110      	bne.n	8008568 <__mdiff+0x38>
 8008546:	4629      	mov	r1, r5
 8008548:	4630      	mov	r0, r6
 800854a:	f7ff fd57 	bl	8007ffc <_Balloc>
 800854e:	b930      	cbnz	r0, 800855e <__mdiff+0x2e>
 8008550:	4b39      	ldr	r3, [pc, #228]	; (8008638 <__mdiff+0x108>)
 8008552:	4602      	mov	r2, r0
 8008554:	f240 2132 	movw	r1, #562	; 0x232
 8008558:	4838      	ldr	r0, [pc, #224]	; (800863c <__mdiff+0x10c>)
 800855a:	f000 fb4b 	bl	8008bf4 <__assert_func>
 800855e:	2301      	movs	r3, #1
 8008560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008568:	bfa4      	itt	ge
 800856a:	463b      	movge	r3, r7
 800856c:	4627      	movge	r7, r4
 800856e:	4630      	mov	r0, r6
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	bfa6      	itte	ge
 8008574:	461c      	movge	r4, r3
 8008576:	2500      	movge	r5, #0
 8008578:	2501      	movlt	r5, #1
 800857a:	f7ff fd3f 	bl	8007ffc <_Balloc>
 800857e:	b920      	cbnz	r0, 800858a <__mdiff+0x5a>
 8008580:	4b2d      	ldr	r3, [pc, #180]	; (8008638 <__mdiff+0x108>)
 8008582:	4602      	mov	r2, r0
 8008584:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008588:	e7e6      	b.n	8008558 <__mdiff+0x28>
 800858a:	693e      	ldr	r6, [r7, #16]
 800858c:	60c5      	str	r5, [r0, #12]
 800858e:	6925      	ldr	r5, [r4, #16]
 8008590:	f107 0114 	add.w	r1, r7, #20
 8008594:	f104 0914 	add.w	r9, r4, #20
 8008598:	f100 0e14 	add.w	lr, r0, #20
 800859c:	f107 0210 	add.w	r2, r7, #16
 80085a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80085a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80085a8:	46f2      	mov	sl, lr
 80085aa:	2700      	movs	r7, #0
 80085ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80085b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80085b4:	fa1f f883 	uxth.w	r8, r3
 80085b8:	fa17 f78b 	uxtah	r7, r7, fp
 80085bc:	0c1b      	lsrs	r3, r3, #16
 80085be:	eba7 0808 	sub.w	r8, r7, r8
 80085c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085ca:	fa1f f888 	uxth.w	r8, r8
 80085ce:	141f      	asrs	r7, r3, #16
 80085d0:	454d      	cmp	r5, r9
 80085d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085d6:	f84a 3b04 	str.w	r3, [sl], #4
 80085da:	d8e7      	bhi.n	80085ac <__mdiff+0x7c>
 80085dc:	1b2b      	subs	r3, r5, r4
 80085de:	3b15      	subs	r3, #21
 80085e0:	f023 0303 	bic.w	r3, r3, #3
 80085e4:	3304      	adds	r3, #4
 80085e6:	3415      	adds	r4, #21
 80085e8:	42a5      	cmp	r5, r4
 80085ea:	bf38      	it	cc
 80085ec:	2304      	movcc	r3, #4
 80085ee:	4419      	add	r1, r3
 80085f0:	4473      	add	r3, lr
 80085f2:	469e      	mov	lr, r3
 80085f4:	460d      	mov	r5, r1
 80085f6:	4565      	cmp	r5, ip
 80085f8:	d30e      	bcc.n	8008618 <__mdiff+0xe8>
 80085fa:	f10c 0203 	add.w	r2, ip, #3
 80085fe:	1a52      	subs	r2, r2, r1
 8008600:	f022 0203 	bic.w	r2, r2, #3
 8008604:	3903      	subs	r1, #3
 8008606:	458c      	cmp	ip, r1
 8008608:	bf38      	it	cc
 800860a:	2200      	movcc	r2, #0
 800860c:	441a      	add	r2, r3
 800860e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008612:	b17b      	cbz	r3, 8008634 <__mdiff+0x104>
 8008614:	6106      	str	r6, [r0, #16]
 8008616:	e7a5      	b.n	8008564 <__mdiff+0x34>
 8008618:	f855 8b04 	ldr.w	r8, [r5], #4
 800861c:	fa17 f488 	uxtah	r4, r7, r8
 8008620:	1422      	asrs	r2, r4, #16
 8008622:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008626:	b2a4      	uxth	r4, r4
 8008628:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800862c:	f84e 4b04 	str.w	r4, [lr], #4
 8008630:	1417      	asrs	r7, r2, #16
 8008632:	e7e0      	b.n	80085f6 <__mdiff+0xc6>
 8008634:	3e01      	subs	r6, #1
 8008636:	e7ea      	b.n	800860e <__mdiff+0xde>
 8008638:	08009b23 	.word	0x08009b23
 800863c:	08009b94 	.word	0x08009b94

08008640 <__d2b>:
 8008640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008644:	4689      	mov	r9, r1
 8008646:	2101      	movs	r1, #1
 8008648:	ec57 6b10 	vmov	r6, r7, d0
 800864c:	4690      	mov	r8, r2
 800864e:	f7ff fcd5 	bl	8007ffc <_Balloc>
 8008652:	4604      	mov	r4, r0
 8008654:	b930      	cbnz	r0, 8008664 <__d2b+0x24>
 8008656:	4602      	mov	r2, r0
 8008658:	4b25      	ldr	r3, [pc, #148]	; (80086f0 <__d2b+0xb0>)
 800865a:	4826      	ldr	r0, [pc, #152]	; (80086f4 <__d2b+0xb4>)
 800865c:	f240 310a 	movw	r1, #778	; 0x30a
 8008660:	f000 fac8 	bl	8008bf4 <__assert_func>
 8008664:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800866c:	bb35      	cbnz	r5, 80086bc <__d2b+0x7c>
 800866e:	2e00      	cmp	r6, #0
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	d028      	beq.n	80086c6 <__d2b+0x86>
 8008674:	4668      	mov	r0, sp
 8008676:	9600      	str	r6, [sp, #0]
 8008678:	f7ff fd8c 	bl	8008194 <__lo0bits>
 800867c:	9900      	ldr	r1, [sp, #0]
 800867e:	b300      	cbz	r0, 80086c2 <__d2b+0x82>
 8008680:	9a01      	ldr	r2, [sp, #4]
 8008682:	f1c0 0320 	rsb	r3, r0, #32
 8008686:	fa02 f303 	lsl.w	r3, r2, r3
 800868a:	430b      	orrs	r3, r1
 800868c:	40c2      	lsrs	r2, r0
 800868e:	6163      	str	r3, [r4, #20]
 8008690:	9201      	str	r2, [sp, #4]
 8008692:	9b01      	ldr	r3, [sp, #4]
 8008694:	61a3      	str	r3, [r4, #24]
 8008696:	2b00      	cmp	r3, #0
 8008698:	bf14      	ite	ne
 800869a:	2202      	movne	r2, #2
 800869c:	2201      	moveq	r2, #1
 800869e:	6122      	str	r2, [r4, #16]
 80086a0:	b1d5      	cbz	r5, 80086d8 <__d2b+0x98>
 80086a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086a6:	4405      	add	r5, r0
 80086a8:	f8c9 5000 	str.w	r5, [r9]
 80086ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086b0:	f8c8 0000 	str.w	r0, [r8]
 80086b4:	4620      	mov	r0, r4
 80086b6:	b003      	add	sp, #12
 80086b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086c0:	e7d5      	b.n	800866e <__d2b+0x2e>
 80086c2:	6161      	str	r1, [r4, #20]
 80086c4:	e7e5      	b.n	8008692 <__d2b+0x52>
 80086c6:	a801      	add	r0, sp, #4
 80086c8:	f7ff fd64 	bl	8008194 <__lo0bits>
 80086cc:	9b01      	ldr	r3, [sp, #4]
 80086ce:	6163      	str	r3, [r4, #20]
 80086d0:	2201      	movs	r2, #1
 80086d2:	6122      	str	r2, [r4, #16]
 80086d4:	3020      	adds	r0, #32
 80086d6:	e7e3      	b.n	80086a0 <__d2b+0x60>
 80086d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086e0:	f8c9 0000 	str.w	r0, [r9]
 80086e4:	6918      	ldr	r0, [r3, #16]
 80086e6:	f7ff fd35 	bl	8008154 <__hi0bits>
 80086ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086ee:	e7df      	b.n	80086b0 <__d2b+0x70>
 80086f0:	08009b23 	.word	0x08009b23
 80086f4:	08009b94 	.word	0x08009b94

080086f8 <_calloc_r>:
 80086f8:	b513      	push	{r0, r1, r4, lr}
 80086fa:	434a      	muls	r2, r1
 80086fc:	4611      	mov	r1, r2
 80086fe:	9201      	str	r2, [sp, #4]
 8008700:	f7fe f80e 	bl	8006720 <_malloc_r>
 8008704:	4604      	mov	r4, r0
 8008706:	b118      	cbz	r0, 8008710 <_calloc_r+0x18>
 8008708:	9a01      	ldr	r2, [sp, #4]
 800870a:	2100      	movs	r1, #0
 800870c:	f7fd ffb0 	bl	8006670 <memset>
 8008710:	4620      	mov	r0, r4
 8008712:	b002      	add	sp, #8
 8008714:	bd10      	pop	{r4, pc}

08008716 <__sfputc_r>:
 8008716:	6893      	ldr	r3, [r2, #8]
 8008718:	3b01      	subs	r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	b410      	push	{r4}
 800871e:	6093      	str	r3, [r2, #8]
 8008720:	da08      	bge.n	8008734 <__sfputc_r+0x1e>
 8008722:	6994      	ldr	r4, [r2, #24]
 8008724:	42a3      	cmp	r3, r4
 8008726:	db01      	blt.n	800872c <__sfputc_r+0x16>
 8008728:	290a      	cmp	r1, #10
 800872a:	d103      	bne.n	8008734 <__sfputc_r+0x1e>
 800872c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008730:	f000 b98e 	b.w	8008a50 <__swbuf_r>
 8008734:	6813      	ldr	r3, [r2, #0]
 8008736:	1c58      	adds	r0, r3, #1
 8008738:	6010      	str	r0, [r2, #0]
 800873a:	7019      	strb	r1, [r3, #0]
 800873c:	4608      	mov	r0, r1
 800873e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008742:	4770      	bx	lr

08008744 <__sfputs_r>:
 8008744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008746:	4606      	mov	r6, r0
 8008748:	460f      	mov	r7, r1
 800874a:	4614      	mov	r4, r2
 800874c:	18d5      	adds	r5, r2, r3
 800874e:	42ac      	cmp	r4, r5
 8008750:	d101      	bne.n	8008756 <__sfputs_r+0x12>
 8008752:	2000      	movs	r0, #0
 8008754:	e007      	b.n	8008766 <__sfputs_r+0x22>
 8008756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800875a:	463a      	mov	r2, r7
 800875c:	4630      	mov	r0, r6
 800875e:	f7ff ffda 	bl	8008716 <__sfputc_r>
 8008762:	1c43      	adds	r3, r0, #1
 8008764:	d1f3      	bne.n	800874e <__sfputs_r+0xa>
 8008766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008768 <_vfiprintf_r>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	460d      	mov	r5, r1
 800876e:	b09d      	sub	sp, #116	; 0x74
 8008770:	4614      	mov	r4, r2
 8008772:	4698      	mov	r8, r3
 8008774:	4606      	mov	r6, r0
 8008776:	b118      	cbz	r0, 8008780 <_vfiprintf_r+0x18>
 8008778:	6983      	ldr	r3, [r0, #24]
 800877a:	b90b      	cbnz	r3, 8008780 <_vfiprintf_r+0x18>
 800877c:	f7ff fb8c 	bl	8007e98 <__sinit>
 8008780:	4b89      	ldr	r3, [pc, #548]	; (80089a8 <_vfiprintf_r+0x240>)
 8008782:	429d      	cmp	r5, r3
 8008784:	d11b      	bne.n	80087be <_vfiprintf_r+0x56>
 8008786:	6875      	ldr	r5, [r6, #4]
 8008788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800878a:	07d9      	lsls	r1, r3, #31
 800878c:	d405      	bmi.n	800879a <_vfiprintf_r+0x32>
 800878e:	89ab      	ldrh	r3, [r5, #12]
 8008790:	059a      	lsls	r2, r3, #22
 8008792:	d402      	bmi.n	800879a <_vfiprintf_r+0x32>
 8008794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008796:	f7ff fc22 	bl	8007fde <__retarget_lock_acquire_recursive>
 800879a:	89ab      	ldrh	r3, [r5, #12]
 800879c:	071b      	lsls	r3, r3, #28
 800879e:	d501      	bpl.n	80087a4 <_vfiprintf_r+0x3c>
 80087a0:	692b      	ldr	r3, [r5, #16]
 80087a2:	b9eb      	cbnz	r3, 80087e0 <_vfiprintf_r+0x78>
 80087a4:	4629      	mov	r1, r5
 80087a6:	4630      	mov	r0, r6
 80087a8:	f000 f9b6 	bl	8008b18 <__swsetup_r>
 80087ac:	b1c0      	cbz	r0, 80087e0 <_vfiprintf_r+0x78>
 80087ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087b0:	07dc      	lsls	r4, r3, #31
 80087b2:	d50e      	bpl.n	80087d2 <_vfiprintf_r+0x6a>
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295
 80087b8:	b01d      	add	sp, #116	; 0x74
 80087ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087be:	4b7b      	ldr	r3, [pc, #492]	; (80089ac <_vfiprintf_r+0x244>)
 80087c0:	429d      	cmp	r5, r3
 80087c2:	d101      	bne.n	80087c8 <_vfiprintf_r+0x60>
 80087c4:	68b5      	ldr	r5, [r6, #8]
 80087c6:	e7df      	b.n	8008788 <_vfiprintf_r+0x20>
 80087c8:	4b79      	ldr	r3, [pc, #484]	; (80089b0 <_vfiprintf_r+0x248>)
 80087ca:	429d      	cmp	r5, r3
 80087cc:	bf08      	it	eq
 80087ce:	68f5      	ldreq	r5, [r6, #12]
 80087d0:	e7da      	b.n	8008788 <_vfiprintf_r+0x20>
 80087d2:	89ab      	ldrh	r3, [r5, #12]
 80087d4:	0598      	lsls	r0, r3, #22
 80087d6:	d4ed      	bmi.n	80087b4 <_vfiprintf_r+0x4c>
 80087d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087da:	f7ff fc01 	bl	8007fe0 <__retarget_lock_release_recursive>
 80087de:	e7e9      	b.n	80087b4 <_vfiprintf_r+0x4c>
 80087e0:	2300      	movs	r3, #0
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	2320      	movs	r3, #32
 80087e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ee:	2330      	movs	r3, #48	; 0x30
 80087f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089b4 <_vfiprintf_r+0x24c>
 80087f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087f8:	f04f 0901 	mov.w	r9, #1
 80087fc:	4623      	mov	r3, r4
 80087fe:	469a      	mov	sl, r3
 8008800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008804:	b10a      	cbz	r2, 800880a <_vfiprintf_r+0xa2>
 8008806:	2a25      	cmp	r2, #37	; 0x25
 8008808:	d1f9      	bne.n	80087fe <_vfiprintf_r+0x96>
 800880a:	ebba 0b04 	subs.w	fp, sl, r4
 800880e:	d00b      	beq.n	8008828 <_vfiprintf_r+0xc0>
 8008810:	465b      	mov	r3, fp
 8008812:	4622      	mov	r2, r4
 8008814:	4629      	mov	r1, r5
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff ff94 	bl	8008744 <__sfputs_r>
 800881c:	3001      	adds	r0, #1
 800881e:	f000 80aa 	beq.w	8008976 <_vfiprintf_r+0x20e>
 8008822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008824:	445a      	add	r2, fp
 8008826:	9209      	str	r2, [sp, #36]	; 0x24
 8008828:	f89a 3000 	ldrb.w	r3, [sl]
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 80a2 	beq.w	8008976 <_vfiprintf_r+0x20e>
 8008832:	2300      	movs	r3, #0
 8008834:	f04f 32ff 	mov.w	r2, #4294967295
 8008838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800883c:	f10a 0a01 	add.w	sl, sl, #1
 8008840:	9304      	str	r3, [sp, #16]
 8008842:	9307      	str	r3, [sp, #28]
 8008844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008848:	931a      	str	r3, [sp, #104]	; 0x68
 800884a:	4654      	mov	r4, sl
 800884c:	2205      	movs	r2, #5
 800884e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008852:	4858      	ldr	r0, [pc, #352]	; (80089b4 <_vfiprintf_r+0x24c>)
 8008854:	f7f7 fcc4 	bl	80001e0 <memchr>
 8008858:	9a04      	ldr	r2, [sp, #16]
 800885a:	b9d8      	cbnz	r0, 8008894 <_vfiprintf_r+0x12c>
 800885c:	06d1      	lsls	r1, r2, #27
 800885e:	bf44      	itt	mi
 8008860:	2320      	movmi	r3, #32
 8008862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008866:	0713      	lsls	r3, r2, #28
 8008868:	bf44      	itt	mi
 800886a:	232b      	movmi	r3, #43	; 0x2b
 800886c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008870:	f89a 3000 	ldrb.w	r3, [sl]
 8008874:	2b2a      	cmp	r3, #42	; 0x2a
 8008876:	d015      	beq.n	80088a4 <_vfiprintf_r+0x13c>
 8008878:	9a07      	ldr	r2, [sp, #28]
 800887a:	4654      	mov	r4, sl
 800887c:	2000      	movs	r0, #0
 800887e:	f04f 0c0a 	mov.w	ip, #10
 8008882:	4621      	mov	r1, r4
 8008884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008888:	3b30      	subs	r3, #48	; 0x30
 800888a:	2b09      	cmp	r3, #9
 800888c:	d94e      	bls.n	800892c <_vfiprintf_r+0x1c4>
 800888e:	b1b0      	cbz	r0, 80088be <_vfiprintf_r+0x156>
 8008890:	9207      	str	r2, [sp, #28]
 8008892:	e014      	b.n	80088be <_vfiprintf_r+0x156>
 8008894:	eba0 0308 	sub.w	r3, r0, r8
 8008898:	fa09 f303 	lsl.w	r3, r9, r3
 800889c:	4313      	orrs	r3, r2
 800889e:	9304      	str	r3, [sp, #16]
 80088a0:	46a2      	mov	sl, r4
 80088a2:	e7d2      	b.n	800884a <_vfiprintf_r+0xe2>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	1d19      	adds	r1, r3, #4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	9103      	str	r1, [sp, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bfbb      	ittet	lt
 80088b0:	425b      	neglt	r3, r3
 80088b2:	f042 0202 	orrlt.w	r2, r2, #2
 80088b6:	9307      	strge	r3, [sp, #28]
 80088b8:	9307      	strlt	r3, [sp, #28]
 80088ba:	bfb8      	it	lt
 80088bc:	9204      	strlt	r2, [sp, #16]
 80088be:	7823      	ldrb	r3, [r4, #0]
 80088c0:	2b2e      	cmp	r3, #46	; 0x2e
 80088c2:	d10c      	bne.n	80088de <_vfiprintf_r+0x176>
 80088c4:	7863      	ldrb	r3, [r4, #1]
 80088c6:	2b2a      	cmp	r3, #42	; 0x2a
 80088c8:	d135      	bne.n	8008936 <_vfiprintf_r+0x1ce>
 80088ca:	9b03      	ldr	r3, [sp, #12]
 80088cc:	1d1a      	adds	r2, r3, #4
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	9203      	str	r2, [sp, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bfb8      	it	lt
 80088d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80088da:	3402      	adds	r4, #2
 80088dc:	9305      	str	r3, [sp, #20]
 80088de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089c4 <_vfiprintf_r+0x25c>
 80088e2:	7821      	ldrb	r1, [r4, #0]
 80088e4:	2203      	movs	r2, #3
 80088e6:	4650      	mov	r0, sl
 80088e8:	f7f7 fc7a 	bl	80001e0 <memchr>
 80088ec:	b140      	cbz	r0, 8008900 <_vfiprintf_r+0x198>
 80088ee:	2340      	movs	r3, #64	; 0x40
 80088f0:	eba0 000a 	sub.w	r0, r0, sl
 80088f4:	fa03 f000 	lsl.w	r0, r3, r0
 80088f8:	9b04      	ldr	r3, [sp, #16]
 80088fa:	4303      	orrs	r3, r0
 80088fc:	3401      	adds	r4, #1
 80088fe:	9304      	str	r3, [sp, #16]
 8008900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008904:	482c      	ldr	r0, [pc, #176]	; (80089b8 <_vfiprintf_r+0x250>)
 8008906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800890a:	2206      	movs	r2, #6
 800890c:	f7f7 fc68 	bl	80001e0 <memchr>
 8008910:	2800      	cmp	r0, #0
 8008912:	d03f      	beq.n	8008994 <_vfiprintf_r+0x22c>
 8008914:	4b29      	ldr	r3, [pc, #164]	; (80089bc <_vfiprintf_r+0x254>)
 8008916:	bb1b      	cbnz	r3, 8008960 <_vfiprintf_r+0x1f8>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	3307      	adds	r3, #7
 800891c:	f023 0307 	bic.w	r3, r3, #7
 8008920:	3308      	adds	r3, #8
 8008922:	9303      	str	r3, [sp, #12]
 8008924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008926:	443b      	add	r3, r7
 8008928:	9309      	str	r3, [sp, #36]	; 0x24
 800892a:	e767      	b.n	80087fc <_vfiprintf_r+0x94>
 800892c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008930:	460c      	mov	r4, r1
 8008932:	2001      	movs	r0, #1
 8008934:	e7a5      	b.n	8008882 <_vfiprintf_r+0x11a>
 8008936:	2300      	movs	r3, #0
 8008938:	3401      	adds	r4, #1
 800893a:	9305      	str	r3, [sp, #20]
 800893c:	4619      	mov	r1, r3
 800893e:	f04f 0c0a 	mov.w	ip, #10
 8008942:	4620      	mov	r0, r4
 8008944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008948:	3a30      	subs	r2, #48	; 0x30
 800894a:	2a09      	cmp	r2, #9
 800894c:	d903      	bls.n	8008956 <_vfiprintf_r+0x1ee>
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0c5      	beq.n	80088de <_vfiprintf_r+0x176>
 8008952:	9105      	str	r1, [sp, #20]
 8008954:	e7c3      	b.n	80088de <_vfiprintf_r+0x176>
 8008956:	fb0c 2101 	mla	r1, ip, r1, r2
 800895a:	4604      	mov	r4, r0
 800895c:	2301      	movs	r3, #1
 800895e:	e7f0      	b.n	8008942 <_vfiprintf_r+0x1da>
 8008960:	ab03      	add	r3, sp, #12
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	462a      	mov	r2, r5
 8008966:	4b16      	ldr	r3, [pc, #88]	; (80089c0 <_vfiprintf_r+0x258>)
 8008968:	a904      	add	r1, sp, #16
 800896a:	4630      	mov	r0, r6
 800896c:	f7fd ffd2 	bl	8006914 <_printf_float>
 8008970:	4607      	mov	r7, r0
 8008972:	1c78      	adds	r0, r7, #1
 8008974:	d1d6      	bne.n	8008924 <_vfiprintf_r+0x1bc>
 8008976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008978:	07d9      	lsls	r1, r3, #31
 800897a:	d405      	bmi.n	8008988 <_vfiprintf_r+0x220>
 800897c:	89ab      	ldrh	r3, [r5, #12]
 800897e:	059a      	lsls	r2, r3, #22
 8008980:	d402      	bmi.n	8008988 <_vfiprintf_r+0x220>
 8008982:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008984:	f7ff fb2c 	bl	8007fe0 <__retarget_lock_release_recursive>
 8008988:	89ab      	ldrh	r3, [r5, #12]
 800898a:	065b      	lsls	r3, r3, #25
 800898c:	f53f af12 	bmi.w	80087b4 <_vfiprintf_r+0x4c>
 8008990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008992:	e711      	b.n	80087b8 <_vfiprintf_r+0x50>
 8008994:	ab03      	add	r3, sp, #12
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	462a      	mov	r2, r5
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <_vfiprintf_r+0x258>)
 800899c:	a904      	add	r1, sp, #16
 800899e:	4630      	mov	r0, r6
 80089a0:	f7fe fa5c 	bl	8006e5c <_printf_i>
 80089a4:	e7e4      	b.n	8008970 <_vfiprintf_r+0x208>
 80089a6:	bf00      	nop
 80089a8:	08009b54 	.word	0x08009b54
 80089ac:	08009b74 	.word	0x08009b74
 80089b0:	08009b34 	.word	0x08009b34
 80089b4:	08009cf4 	.word	0x08009cf4
 80089b8:	08009cfe 	.word	0x08009cfe
 80089bc:	08006915 	.word	0x08006915
 80089c0:	08008745 	.word	0x08008745
 80089c4:	08009cfa 	.word	0x08009cfa

080089c8 <__sread>:
 80089c8:	b510      	push	{r4, lr}
 80089ca:	460c      	mov	r4, r1
 80089cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d0:	f000 fa9a 	bl	8008f08 <_read_r>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	bfab      	itete	ge
 80089d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089da:	89a3      	ldrhlt	r3, [r4, #12]
 80089dc:	181b      	addge	r3, r3, r0
 80089de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089e2:	bfac      	ite	ge
 80089e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089e6:	81a3      	strhlt	r3, [r4, #12]
 80089e8:	bd10      	pop	{r4, pc}

080089ea <__swrite>:
 80089ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ee:	461f      	mov	r7, r3
 80089f0:	898b      	ldrh	r3, [r1, #12]
 80089f2:	05db      	lsls	r3, r3, #23
 80089f4:	4605      	mov	r5, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	4616      	mov	r6, r2
 80089fa:	d505      	bpl.n	8008a08 <__swrite+0x1e>
 80089fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a00:	2302      	movs	r3, #2
 8008a02:	2200      	movs	r2, #0
 8008a04:	f000 f9f8 	bl	8008df8 <_lseek_r>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	4632      	mov	r2, r6
 8008a16:	463b      	mov	r3, r7
 8008a18:	4628      	mov	r0, r5
 8008a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1e:	f000 b869 	b.w	8008af4 <_write_r>

08008a22 <__sseek>:
 8008a22:	b510      	push	{r4, lr}
 8008a24:	460c      	mov	r4, r1
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f000 f9e5 	bl	8008df8 <_lseek_r>
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	bf15      	itete	ne
 8008a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a3e:	81a3      	strheq	r3, [r4, #12]
 8008a40:	bf18      	it	ne
 8008a42:	81a3      	strhne	r3, [r4, #12]
 8008a44:	bd10      	pop	{r4, pc}

08008a46 <__sclose>:
 8008a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4a:	f000 b8f1 	b.w	8008c30 <_close_r>
	...

08008a50 <__swbuf_r>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	460e      	mov	r6, r1
 8008a54:	4614      	mov	r4, r2
 8008a56:	4605      	mov	r5, r0
 8008a58:	b118      	cbz	r0, 8008a62 <__swbuf_r+0x12>
 8008a5a:	6983      	ldr	r3, [r0, #24]
 8008a5c:	b90b      	cbnz	r3, 8008a62 <__swbuf_r+0x12>
 8008a5e:	f7ff fa1b 	bl	8007e98 <__sinit>
 8008a62:	4b21      	ldr	r3, [pc, #132]	; (8008ae8 <__swbuf_r+0x98>)
 8008a64:	429c      	cmp	r4, r3
 8008a66:	d12b      	bne.n	8008ac0 <__swbuf_r+0x70>
 8008a68:	686c      	ldr	r4, [r5, #4]
 8008a6a:	69a3      	ldr	r3, [r4, #24]
 8008a6c:	60a3      	str	r3, [r4, #8]
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	071a      	lsls	r2, r3, #28
 8008a72:	d52f      	bpl.n	8008ad4 <__swbuf_r+0x84>
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	b36b      	cbz	r3, 8008ad4 <__swbuf_r+0x84>
 8008a78:	6923      	ldr	r3, [r4, #16]
 8008a7a:	6820      	ldr	r0, [r4, #0]
 8008a7c:	1ac0      	subs	r0, r0, r3
 8008a7e:	6963      	ldr	r3, [r4, #20]
 8008a80:	b2f6      	uxtb	r6, r6
 8008a82:	4283      	cmp	r3, r0
 8008a84:	4637      	mov	r7, r6
 8008a86:	dc04      	bgt.n	8008a92 <__swbuf_r+0x42>
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f000 f966 	bl	8008d5c <_fflush_r>
 8008a90:	bb30      	cbnz	r0, 8008ae0 <__swbuf_r+0x90>
 8008a92:	68a3      	ldr	r3, [r4, #8]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	60a3      	str	r3, [r4, #8]
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	6022      	str	r2, [r4, #0]
 8008a9e:	701e      	strb	r6, [r3, #0]
 8008aa0:	6963      	ldr	r3, [r4, #20]
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	4283      	cmp	r3, r0
 8008aa6:	d004      	beq.n	8008ab2 <__swbuf_r+0x62>
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	07db      	lsls	r3, r3, #31
 8008aac:	d506      	bpl.n	8008abc <__swbuf_r+0x6c>
 8008aae:	2e0a      	cmp	r6, #10
 8008ab0:	d104      	bne.n	8008abc <__swbuf_r+0x6c>
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	f000 f951 	bl	8008d5c <_fflush_r>
 8008aba:	b988      	cbnz	r0, 8008ae0 <__swbuf_r+0x90>
 8008abc:	4638      	mov	r0, r7
 8008abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <__swbuf_r+0x9c>)
 8008ac2:	429c      	cmp	r4, r3
 8008ac4:	d101      	bne.n	8008aca <__swbuf_r+0x7a>
 8008ac6:	68ac      	ldr	r4, [r5, #8]
 8008ac8:	e7cf      	b.n	8008a6a <__swbuf_r+0x1a>
 8008aca:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <__swbuf_r+0xa0>)
 8008acc:	429c      	cmp	r4, r3
 8008ace:	bf08      	it	eq
 8008ad0:	68ec      	ldreq	r4, [r5, #12]
 8008ad2:	e7ca      	b.n	8008a6a <__swbuf_r+0x1a>
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f000 f81e 	bl	8008b18 <__swsetup_r>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d0cb      	beq.n	8008a78 <__swbuf_r+0x28>
 8008ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ae4:	e7ea      	b.n	8008abc <__swbuf_r+0x6c>
 8008ae6:	bf00      	nop
 8008ae8:	08009b54 	.word	0x08009b54
 8008aec:	08009b74 	.word	0x08009b74
 8008af0:	08009b34 	.word	0x08009b34

08008af4 <_write_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d07      	ldr	r5, [pc, #28]	; (8008b14 <_write_r+0x20>)
 8008af8:	4604      	mov	r4, r0
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	602a      	str	r2, [r5, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f7f8 fb02 	bl	800110c <_write>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_write_r+0x1e>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_write_r+0x1e>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	20000e9c 	.word	0x20000e9c

08008b18 <__swsetup_r>:
 8008b18:	4b32      	ldr	r3, [pc, #200]	; (8008be4 <__swsetup_r+0xcc>)
 8008b1a:	b570      	push	{r4, r5, r6, lr}
 8008b1c:	681d      	ldr	r5, [r3, #0]
 8008b1e:	4606      	mov	r6, r0
 8008b20:	460c      	mov	r4, r1
 8008b22:	b125      	cbz	r5, 8008b2e <__swsetup_r+0x16>
 8008b24:	69ab      	ldr	r3, [r5, #24]
 8008b26:	b913      	cbnz	r3, 8008b2e <__swsetup_r+0x16>
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f7ff f9b5 	bl	8007e98 <__sinit>
 8008b2e:	4b2e      	ldr	r3, [pc, #184]	; (8008be8 <__swsetup_r+0xd0>)
 8008b30:	429c      	cmp	r4, r3
 8008b32:	d10f      	bne.n	8008b54 <__swsetup_r+0x3c>
 8008b34:	686c      	ldr	r4, [r5, #4]
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b3c:	0719      	lsls	r1, r3, #28
 8008b3e:	d42c      	bmi.n	8008b9a <__swsetup_r+0x82>
 8008b40:	06dd      	lsls	r5, r3, #27
 8008b42:	d411      	bmi.n	8008b68 <__swsetup_r+0x50>
 8008b44:	2309      	movs	r3, #9
 8008b46:	6033      	str	r3, [r6, #0]
 8008b48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b4c:	81a3      	strh	r3, [r4, #12]
 8008b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b52:	e03e      	b.n	8008bd2 <__swsetup_r+0xba>
 8008b54:	4b25      	ldr	r3, [pc, #148]	; (8008bec <__swsetup_r+0xd4>)
 8008b56:	429c      	cmp	r4, r3
 8008b58:	d101      	bne.n	8008b5e <__swsetup_r+0x46>
 8008b5a:	68ac      	ldr	r4, [r5, #8]
 8008b5c:	e7eb      	b.n	8008b36 <__swsetup_r+0x1e>
 8008b5e:	4b24      	ldr	r3, [pc, #144]	; (8008bf0 <__swsetup_r+0xd8>)
 8008b60:	429c      	cmp	r4, r3
 8008b62:	bf08      	it	eq
 8008b64:	68ec      	ldreq	r4, [r5, #12]
 8008b66:	e7e6      	b.n	8008b36 <__swsetup_r+0x1e>
 8008b68:	0758      	lsls	r0, r3, #29
 8008b6a:	d512      	bpl.n	8008b92 <__swsetup_r+0x7a>
 8008b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b6e:	b141      	cbz	r1, 8008b82 <__swsetup_r+0x6a>
 8008b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b74:	4299      	cmp	r1, r3
 8008b76:	d002      	beq.n	8008b7e <__swsetup_r+0x66>
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f7fd fd81 	bl	8006680 <_free_r>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	6363      	str	r3, [r4, #52]	; 0x34
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b88:	81a3      	strh	r3, [r4, #12]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	6063      	str	r3, [r4, #4]
 8008b8e:	6923      	ldr	r3, [r4, #16]
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	f043 0308 	orr.w	r3, r3, #8
 8008b98:	81a3      	strh	r3, [r4, #12]
 8008b9a:	6923      	ldr	r3, [r4, #16]
 8008b9c:	b94b      	cbnz	r3, 8008bb2 <__swsetup_r+0x9a>
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba8:	d003      	beq.n	8008bb2 <__swsetup_r+0x9a>
 8008baa:	4621      	mov	r1, r4
 8008bac:	4630      	mov	r0, r6
 8008bae:	f000 f959 	bl	8008e64 <__smakebuf_r>
 8008bb2:	89a0      	ldrh	r0, [r4, #12]
 8008bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bb8:	f010 0301 	ands.w	r3, r0, #1
 8008bbc:	d00a      	beq.n	8008bd4 <__swsetup_r+0xbc>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60a3      	str	r3, [r4, #8]
 8008bc2:	6963      	ldr	r3, [r4, #20]
 8008bc4:	425b      	negs	r3, r3
 8008bc6:	61a3      	str	r3, [r4, #24]
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	b943      	cbnz	r3, 8008bde <__swsetup_r+0xc6>
 8008bcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bd0:	d1ba      	bne.n	8008b48 <__swsetup_r+0x30>
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
 8008bd4:	0781      	lsls	r1, r0, #30
 8008bd6:	bf58      	it	pl
 8008bd8:	6963      	ldrpl	r3, [r4, #20]
 8008bda:	60a3      	str	r3, [r4, #8]
 8008bdc:	e7f4      	b.n	8008bc8 <__swsetup_r+0xb0>
 8008bde:	2000      	movs	r0, #0
 8008be0:	e7f7      	b.n	8008bd2 <__swsetup_r+0xba>
 8008be2:	bf00      	nop
 8008be4:	20000844 	.word	0x20000844
 8008be8:	08009b54 	.word	0x08009b54
 8008bec:	08009b74 	.word	0x08009b74
 8008bf0:	08009b34 	.word	0x08009b34

08008bf4 <__assert_func>:
 8008bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bf6:	4614      	mov	r4, r2
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <__assert_func+0x2c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4605      	mov	r5, r0
 8008c00:	68d8      	ldr	r0, [r3, #12]
 8008c02:	b14c      	cbz	r4, 8008c18 <__assert_func+0x24>
 8008c04:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <__assert_func+0x30>)
 8008c06:	9100      	str	r1, [sp, #0]
 8008c08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c0c:	4906      	ldr	r1, [pc, #24]	; (8008c28 <__assert_func+0x34>)
 8008c0e:	462b      	mov	r3, r5
 8008c10:	f000 f8e0 	bl	8008dd4 <fiprintf>
 8008c14:	f000 f997 	bl	8008f46 <abort>
 8008c18:	4b04      	ldr	r3, [pc, #16]	; (8008c2c <__assert_func+0x38>)
 8008c1a:	461c      	mov	r4, r3
 8008c1c:	e7f3      	b.n	8008c06 <__assert_func+0x12>
 8008c1e:	bf00      	nop
 8008c20:	20000844 	.word	0x20000844
 8008c24:	08009d05 	.word	0x08009d05
 8008c28:	08009d12 	.word	0x08009d12
 8008c2c:	08009397 	.word	0x08009397

08008c30 <_close_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4d06      	ldr	r5, [pc, #24]	; (8008c4c <_close_r+0x1c>)
 8008c34:	2300      	movs	r3, #0
 8008c36:	4604      	mov	r4, r0
 8008c38:	4608      	mov	r0, r1
 8008c3a:	602b      	str	r3, [r5, #0]
 8008c3c:	f000 fb10 	bl	8009260 <_close>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_close_r+0x1a>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_close_r+0x1a>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	20000e9c 	.word	0x20000e9c

08008c50 <__sflush_r>:
 8008c50:	898a      	ldrh	r2, [r1, #12]
 8008c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c56:	4605      	mov	r5, r0
 8008c58:	0710      	lsls	r0, r2, #28
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	d458      	bmi.n	8008d10 <__sflush_r+0xc0>
 8008c5e:	684b      	ldr	r3, [r1, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc05      	bgt.n	8008c70 <__sflush_r+0x20>
 8008c64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dc02      	bgt.n	8008c70 <__sflush_r+0x20>
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c72:	2e00      	cmp	r6, #0
 8008c74:	d0f9      	beq.n	8008c6a <__sflush_r+0x1a>
 8008c76:	2300      	movs	r3, #0
 8008c78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c7c:	682f      	ldr	r7, [r5, #0]
 8008c7e:	602b      	str	r3, [r5, #0]
 8008c80:	d032      	beq.n	8008ce8 <__sflush_r+0x98>
 8008c82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	075a      	lsls	r2, r3, #29
 8008c88:	d505      	bpl.n	8008c96 <__sflush_r+0x46>
 8008c8a:	6863      	ldr	r3, [r4, #4]
 8008c8c:	1ac0      	subs	r0, r0, r3
 8008c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c90:	b10b      	cbz	r3, 8008c96 <__sflush_r+0x46>
 8008c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c94:	1ac0      	subs	r0, r0, r3
 8008c96:	2300      	movs	r3, #0
 8008c98:	4602      	mov	r2, r0
 8008c9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c9c:	6a21      	ldr	r1, [r4, #32]
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	47b0      	blx	r6
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	d106      	bne.n	8008cb6 <__sflush_r+0x66>
 8008ca8:	6829      	ldr	r1, [r5, #0]
 8008caa:	291d      	cmp	r1, #29
 8008cac:	d82c      	bhi.n	8008d08 <__sflush_r+0xb8>
 8008cae:	4a2a      	ldr	r2, [pc, #168]	; (8008d58 <__sflush_r+0x108>)
 8008cb0:	40ca      	lsrs	r2, r1
 8008cb2:	07d6      	lsls	r6, r2, #31
 8008cb4:	d528      	bpl.n	8008d08 <__sflush_r+0xb8>
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	6062      	str	r2, [r4, #4]
 8008cba:	04d9      	lsls	r1, r3, #19
 8008cbc:	6922      	ldr	r2, [r4, #16]
 8008cbe:	6022      	str	r2, [r4, #0]
 8008cc0:	d504      	bpl.n	8008ccc <__sflush_r+0x7c>
 8008cc2:	1c42      	adds	r2, r0, #1
 8008cc4:	d101      	bne.n	8008cca <__sflush_r+0x7a>
 8008cc6:	682b      	ldr	r3, [r5, #0]
 8008cc8:	b903      	cbnz	r3, 8008ccc <__sflush_r+0x7c>
 8008cca:	6560      	str	r0, [r4, #84]	; 0x54
 8008ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cce:	602f      	str	r7, [r5, #0]
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	d0ca      	beq.n	8008c6a <__sflush_r+0x1a>
 8008cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cd8:	4299      	cmp	r1, r3
 8008cda:	d002      	beq.n	8008ce2 <__sflush_r+0x92>
 8008cdc:	4628      	mov	r0, r5
 8008cde:	f7fd fccf 	bl	8006680 <_free_r>
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	6360      	str	r0, [r4, #52]	; 0x34
 8008ce6:	e7c1      	b.n	8008c6c <__sflush_r+0x1c>
 8008ce8:	6a21      	ldr	r1, [r4, #32]
 8008cea:	2301      	movs	r3, #1
 8008cec:	4628      	mov	r0, r5
 8008cee:	47b0      	blx	r6
 8008cf0:	1c41      	adds	r1, r0, #1
 8008cf2:	d1c7      	bne.n	8008c84 <__sflush_r+0x34>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0c4      	beq.n	8008c84 <__sflush_r+0x34>
 8008cfa:	2b1d      	cmp	r3, #29
 8008cfc:	d001      	beq.n	8008d02 <__sflush_r+0xb2>
 8008cfe:	2b16      	cmp	r3, #22
 8008d00:	d101      	bne.n	8008d06 <__sflush_r+0xb6>
 8008d02:	602f      	str	r7, [r5, #0]
 8008d04:	e7b1      	b.n	8008c6a <__sflush_r+0x1a>
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	e7ad      	b.n	8008c6c <__sflush_r+0x1c>
 8008d10:	690f      	ldr	r7, [r1, #16]
 8008d12:	2f00      	cmp	r7, #0
 8008d14:	d0a9      	beq.n	8008c6a <__sflush_r+0x1a>
 8008d16:	0793      	lsls	r3, r2, #30
 8008d18:	680e      	ldr	r6, [r1, #0]
 8008d1a:	bf08      	it	eq
 8008d1c:	694b      	ldreq	r3, [r1, #20]
 8008d1e:	600f      	str	r7, [r1, #0]
 8008d20:	bf18      	it	ne
 8008d22:	2300      	movne	r3, #0
 8008d24:	eba6 0807 	sub.w	r8, r6, r7
 8008d28:	608b      	str	r3, [r1, #8]
 8008d2a:	f1b8 0f00 	cmp.w	r8, #0
 8008d2e:	dd9c      	ble.n	8008c6a <__sflush_r+0x1a>
 8008d30:	6a21      	ldr	r1, [r4, #32]
 8008d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d34:	4643      	mov	r3, r8
 8008d36:	463a      	mov	r2, r7
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b0      	blx	r6
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	dc06      	bgt.n	8008d4e <__sflush_r+0xfe>
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4c:	e78e      	b.n	8008c6c <__sflush_r+0x1c>
 8008d4e:	4407      	add	r7, r0
 8008d50:	eba8 0800 	sub.w	r8, r8, r0
 8008d54:	e7e9      	b.n	8008d2a <__sflush_r+0xda>
 8008d56:	bf00      	nop
 8008d58:	20400001 	.word	0x20400001

08008d5c <_fflush_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	690b      	ldr	r3, [r1, #16]
 8008d60:	4605      	mov	r5, r0
 8008d62:	460c      	mov	r4, r1
 8008d64:	b913      	cbnz	r3, 8008d6c <_fflush_r+0x10>
 8008d66:	2500      	movs	r5, #0
 8008d68:	4628      	mov	r0, r5
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	b118      	cbz	r0, 8008d76 <_fflush_r+0x1a>
 8008d6e:	6983      	ldr	r3, [r0, #24]
 8008d70:	b90b      	cbnz	r3, 8008d76 <_fflush_r+0x1a>
 8008d72:	f7ff f891 	bl	8007e98 <__sinit>
 8008d76:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <_fflush_r+0x6c>)
 8008d78:	429c      	cmp	r4, r3
 8008d7a:	d11b      	bne.n	8008db4 <_fflush_r+0x58>
 8008d7c:	686c      	ldr	r4, [r5, #4]
 8008d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0ef      	beq.n	8008d66 <_fflush_r+0xa>
 8008d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d88:	07d0      	lsls	r0, r2, #31
 8008d8a:	d404      	bmi.n	8008d96 <_fflush_r+0x3a>
 8008d8c:	0599      	lsls	r1, r3, #22
 8008d8e:	d402      	bmi.n	8008d96 <_fflush_r+0x3a>
 8008d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d92:	f7ff f924 	bl	8007fde <__retarget_lock_acquire_recursive>
 8008d96:	4628      	mov	r0, r5
 8008d98:	4621      	mov	r1, r4
 8008d9a:	f7ff ff59 	bl	8008c50 <__sflush_r>
 8008d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008da0:	07da      	lsls	r2, r3, #31
 8008da2:	4605      	mov	r5, r0
 8008da4:	d4e0      	bmi.n	8008d68 <_fflush_r+0xc>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	059b      	lsls	r3, r3, #22
 8008daa:	d4dd      	bmi.n	8008d68 <_fflush_r+0xc>
 8008dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dae:	f7ff f917 	bl	8007fe0 <__retarget_lock_release_recursive>
 8008db2:	e7d9      	b.n	8008d68 <_fflush_r+0xc>
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <_fflush_r+0x70>)
 8008db6:	429c      	cmp	r4, r3
 8008db8:	d101      	bne.n	8008dbe <_fflush_r+0x62>
 8008dba:	68ac      	ldr	r4, [r5, #8]
 8008dbc:	e7df      	b.n	8008d7e <_fflush_r+0x22>
 8008dbe:	4b04      	ldr	r3, [pc, #16]	; (8008dd0 <_fflush_r+0x74>)
 8008dc0:	429c      	cmp	r4, r3
 8008dc2:	bf08      	it	eq
 8008dc4:	68ec      	ldreq	r4, [r5, #12]
 8008dc6:	e7da      	b.n	8008d7e <_fflush_r+0x22>
 8008dc8:	08009b54 	.word	0x08009b54
 8008dcc:	08009b74 	.word	0x08009b74
 8008dd0:	08009b34 	.word	0x08009b34

08008dd4 <fiprintf>:
 8008dd4:	b40e      	push	{r1, r2, r3}
 8008dd6:	b503      	push	{r0, r1, lr}
 8008dd8:	4601      	mov	r1, r0
 8008dda:	ab03      	add	r3, sp, #12
 8008ddc:	4805      	ldr	r0, [pc, #20]	; (8008df4 <fiprintf+0x20>)
 8008dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de2:	6800      	ldr	r0, [r0, #0]
 8008de4:	9301      	str	r3, [sp, #4]
 8008de6:	f7ff fcbf 	bl	8008768 <_vfiprintf_r>
 8008dea:	b002      	add	sp, #8
 8008dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008df0:	b003      	add	sp, #12
 8008df2:	4770      	bx	lr
 8008df4:	20000844 	.word	0x20000844

08008df8 <_lseek_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	; (8008e18 <_lseek_r+0x20>)
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	4611      	mov	r1, r2
 8008e02:	2200      	movs	r2, #0
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f000 fa52 	bl	80092b0 <_lseek>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_lseek_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_lseek_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	20000e9c 	.word	0x20000e9c

08008e1c <__swhatbuf_r>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	460e      	mov	r6, r1
 8008e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e24:	2900      	cmp	r1, #0
 8008e26:	b096      	sub	sp, #88	; 0x58
 8008e28:	4614      	mov	r4, r2
 8008e2a:	461d      	mov	r5, r3
 8008e2c:	da07      	bge.n	8008e3e <__swhatbuf_r+0x22>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	89b3      	ldrh	r3, [r6, #12]
 8008e34:	061a      	lsls	r2, r3, #24
 8008e36:	d410      	bmi.n	8008e5a <__swhatbuf_r+0x3e>
 8008e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e3c:	e00e      	b.n	8008e5c <__swhatbuf_r+0x40>
 8008e3e:	466a      	mov	r2, sp
 8008e40:	f000 f888 	bl	8008f54 <_fstat_r>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	dbf2      	blt.n	8008e2e <__swhatbuf_r+0x12>
 8008e48:	9a01      	ldr	r2, [sp, #4]
 8008e4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e52:	425a      	negs	r2, r3
 8008e54:	415a      	adcs	r2, r3
 8008e56:	602a      	str	r2, [r5, #0]
 8008e58:	e7ee      	b.n	8008e38 <__swhatbuf_r+0x1c>
 8008e5a:	2340      	movs	r3, #64	; 0x40
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	b016      	add	sp, #88	; 0x58
 8008e62:	bd70      	pop	{r4, r5, r6, pc}

08008e64 <__smakebuf_r>:
 8008e64:	898b      	ldrh	r3, [r1, #12]
 8008e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e68:	079d      	lsls	r5, r3, #30
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	d507      	bpl.n	8008e80 <__smakebuf_r+0x1c>
 8008e70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	6123      	str	r3, [r4, #16]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	6163      	str	r3, [r4, #20]
 8008e7c:	b002      	add	sp, #8
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	ab01      	add	r3, sp, #4
 8008e82:	466a      	mov	r2, sp
 8008e84:	f7ff ffca 	bl	8008e1c <__swhatbuf_r>
 8008e88:	9900      	ldr	r1, [sp, #0]
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f7fd fc47 	bl	8006720 <_malloc_r>
 8008e92:	b948      	cbnz	r0, 8008ea8 <__smakebuf_r+0x44>
 8008e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e98:	059a      	lsls	r2, r3, #22
 8008e9a:	d4ef      	bmi.n	8008e7c <__smakebuf_r+0x18>
 8008e9c:	f023 0303 	bic.w	r3, r3, #3
 8008ea0:	f043 0302 	orr.w	r3, r3, #2
 8008ea4:	81a3      	strh	r3, [r4, #12]
 8008ea6:	e7e3      	b.n	8008e70 <__smakebuf_r+0xc>
 8008ea8:	4b0d      	ldr	r3, [pc, #52]	; (8008ee0 <__smakebuf_r+0x7c>)
 8008eaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	6020      	str	r0, [r4, #0]
 8008eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb4:	81a3      	strh	r3, [r4, #12]
 8008eb6:	9b00      	ldr	r3, [sp, #0]
 8008eb8:	6163      	str	r3, [r4, #20]
 8008eba:	9b01      	ldr	r3, [sp, #4]
 8008ebc:	6120      	str	r0, [r4, #16]
 8008ebe:	b15b      	cbz	r3, 8008ed8 <__smakebuf_r+0x74>
 8008ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f000 f857 	bl	8008f78 <_isatty_r>
 8008eca:	b128      	cbz	r0, 8008ed8 <__smakebuf_r+0x74>
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f023 0303 	bic.w	r3, r3, #3
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	89a0      	ldrh	r0, [r4, #12]
 8008eda:	4305      	orrs	r5, r0
 8008edc:	81a5      	strh	r5, [r4, #12]
 8008ede:	e7cd      	b.n	8008e7c <__smakebuf_r+0x18>
 8008ee0:	08007e31 	.word	0x08007e31

08008ee4 <__ascii_mbtowc>:
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	b901      	cbnz	r1, 8008eea <__ascii_mbtowc+0x6>
 8008ee8:	a901      	add	r1, sp, #4
 8008eea:	b142      	cbz	r2, 8008efe <__ascii_mbtowc+0x1a>
 8008eec:	b14b      	cbz	r3, 8008f02 <__ascii_mbtowc+0x1e>
 8008eee:	7813      	ldrb	r3, [r2, #0]
 8008ef0:	600b      	str	r3, [r1, #0]
 8008ef2:	7812      	ldrb	r2, [r2, #0]
 8008ef4:	1e10      	subs	r0, r2, #0
 8008ef6:	bf18      	it	ne
 8008ef8:	2001      	movne	r0, #1
 8008efa:	b002      	add	sp, #8
 8008efc:	4770      	bx	lr
 8008efe:	4610      	mov	r0, r2
 8008f00:	e7fb      	b.n	8008efa <__ascii_mbtowc+0x16>
 8008f02:	f06f 0001 	mvn.w	r0, #1
 8008f06:	e7f8      	b.n	8008efa <__ascii_mbtowc+0x16>

08008f08 <_read_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d07      	ldr	r5, [pc, #28]	; (8008f28 <_read_r+0x20>)
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	4608      	mov	r0, r1
 8008f10:	4611      	mov	r1, r2
 8008f12:	2200      	movs	r2, #0
 8008f14:	602a      	str	r2, [r5, #0]
 8008f16:	461a      	mov	r2, r3
 8008f18:	f000 f9d2 	bl	80092c0 <_read>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_read_r+0x1e>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_read_r+0x1e>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	20000e9c 	.word	0x20000e9c

08008f2c <__ascii_wctomb>:
 8008f2c:	b149      	cbz	r1, 8008f42 <__ascii_wctomb+0x16>
 8008f2e:	2aff      	cmp	r2, #255	; 0xff
 8008f30:	bf85      	ittet	hi
 8008f32:	238a      	movhi	r3, #138	; 0x8a
 8008f34:	6003      	strhi	r3, [r0, #0]
 8008f36:	700a      	strbls	r2, [r1, #0]
 8008f38:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f3c:	bf98      	it	ls
 8008f3e:	2001      	movls	r0, #1
 8008f40:	4770      	bx	lr
 8008f42:	4608      	mov	r0, r1
 8008f44:	4770      	bx	lr

08008f46 <abort>:
 8008f46:	b508      	push	{r3, lr}
 8008f48:	2006      	movs	r0, #6
 8008f4a:	f000 f84d 	bl	8008fe8 <raise>
 8008f4e:	2001      	movs	r0, #1
 8008f50:	f000 f9be 	bl	80092d0 <_exit>

08008f54 <_fstat_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4d07      	ldr	r5, [pc, #28]	; (8008f74 <_fstat_r+0x20>)
 8008f58:	2300      	movs	r3, #0
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	4611      	mov	r1, r2
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	f000 f985 	bl	8009270 <_fstat>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	d102      	bne.n	8008f70 <_fstat_r+0x1c>
 8008f6a:	682b      	ldr	r3, [r5, #0]
 8008f6c:	b103      	cbz	r3, 8008f70 <_fstat_r+0x1c>
 8008f6e:	6023      	str	r3, [r4, #0]
 8008f70:	bd38      	pop	{r3, r4, r5, pc}
 8008f72:	bf00      	nop
 8008f74:	20000e9c 	.word	0x20000e9c

08008f78 <_isatty_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d06      	ldr	r5, [pc, #24]	; (8008f94 <_isatty_r+0x1c>)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	602b      	str	r3, [r5, #0]
 8008f84:	f000 f984 	bl	8009290 <_isatty>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_isatty_r+0x1a>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_isatty_r+0x1a>
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	20000e9c 	.word	0x20000e9c

08008f98 <_raise_r>:
 8008f98:	291f      	cmp	r1, #31
 8008f9a:	b538      	push	{r3, r4, r5, lr}
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	460d      	mov	r5, r1
 8008fa0:	d904      	bls.n	8008fac <_raise_r+0x14>
 8008fa2:	2316      	movs	r3, #22
 8008fa4:	6003      	str	r3, [r0, #0]
 8008fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008fae:	b112      	cbz	r2, 8008fb6 <_raise_r+0x1e>
 8008fb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fb4:	b94b      	cbnz	r3, 8008fca <_raise_r+0x32>
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 f830 	bl	800901c <_getpid_r>
 8008fbc:	462a      	mov	r2, r5
 8008fbe:	4601      	mov	r1, r0
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fc6:	f000 b817 	b.w	8008ff8 <_kill_r>
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d00a      	beq.n	8008fe4 <_raise_r+0x4c>
 8008fce:	1c59      	adds	r1, r3, #1
 8008fd0:	d103      	bne.n	8008fda <_raise_r+0x42>
 8008fd2:	2316      	movs	r3, #22
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	e7e7      	b.n	8008faa <_raise_r+0x12>
 8008fda:	2400      	movs	r4, #0
 8008fdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	4798      	blx	r3
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	e7e0      	b.n	8008faa <_raise_r+0x12>

08008fe8 <raise>:
 8008fe8:	4b02      	ldr	r3, [pc, #8]	; (8008ff4 <raise+0xc>)
 8008fea:	4601      	mov	r1, r0
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	f7ff bfd3 	b.w	8008f98 <_raise_r>
 8008ff2:	bf00      	nop
 8008ff4:	20000844 	.word	0x20000844

08008ff8 <_kill_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d07      	ldr	r5, [pc, #28]	; (8009018 <_kill_r+0x20>)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	4611      	mov	r1, r2
 8009004:	602b      	str	r3, [r5, #0]
 8009006:	f000 f94b 	bl	80092a0 <_kill>
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	d102      	bne.n	8009014 <_kill_r+0x1c>
 800900e:	682b      	ldr	r3, [r5, #0]
 8009010:	b103      	cbz	r3, 8009014 <_kill_r+0x1c>
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	bd38      	pop	{r3, r4, r5, pc}
 8009016:	bf00      	nop
 8009018:	20000e9c 	.word	0x20000e9c

0800901c <_getpid_r>:
 800901c:	f000 b930 	b.w	8009280 <_getpid>

08009020 <expf>:
 8009020:	b508      	push	{r3, lr}
 8009022:	ed2d 8b02 	vpush	{d8}
 8009026:	eef0 8a40 	vmov.f32	s17, s0
 800902a:	f000 f837 	bl	800909c <__ieee754_expf>
 800902e:	4b16      	ldr	r3, [pc, #88]	; (8009088 <expf+0x68>)
 8009030:	f993 3000 	ldrsb.w	r3, [r3]
 8009034:	3301      	adds	r3, #1
 8009036:	eeb0 8a40 	vmov.f32	s16, s0
 800903a:	d011      	beq.n	8009060 <expf+0x40>
 800903c:	eeb0 0a68 	vmov.f32	s0, s17
 8009040:	f000 f900 	bl	8009244 <finitef>
 8009044:	b160      	cbz	r0, 8009060 <expf+0x40>
 8009046:	eddf 7a11 	vldr	s15, [pc, #68]	; 800908c <expf+0x6c>
 800904a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800904e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009052:	dd0a      	ble.n	800906a <expf+0x4a>
 8009054:	f7fd facc 	bl	80065f0 <__errno>
 8009058:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8009090 <expf+0x70>
 800905c:	2322      	movs	r3, #34	; 0x22
 800905e:	6003      	str	r3, [r0, #0]
 8009060:	eeb0 0a48 	vmov.f32	s0, s16
 8009064:	ecbd 8b02 	vpop	{d8}
 8009068:	bd08      	pop	{r3, pc}
 800906a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009094 <expf+0x74>
 800906e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009076:	d5f3      	bpl.n	8009060 <expf+0x40>
 8009078:	f7fd faba 	bl	80065f0 <__errno>
 800907c:	2322      	movs	r3, #34	; 0x22
 800907e:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8009098 <expf+0x78>
 8009082:	6003      	str	r3, [r0, #0]
 8009084:	e7ec      	b.n	8009060 <expf+0x40>
 8009086:	bf00      	nop
 8009088:	20000a14 	.word	0x20000a14
 800908c:	42b17180 	.word	0x42b17180
 8009090:	7f800000 	.word	0x7f800000
 8009094:	c2cff1b5 	.word	0xc2cff1b5
 8009098:	00000000 	.word	0x00000000

0800909c <__ieee754_expf>:
 800909c:	ee10 2a10 	vmov	r2, s0
 80090a0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80090a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80090a8:	d902      	bls.n	80090b0 <__ieee754_expf+0x14>
 80090aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80090ae:	4770      	bx	lr
 80090b0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80090b4:	d106      	bne.n	80090c4 <__ieee754_expf+0x28>
 80090b6:	eddf 7a51 	vldr	s15, [pc, #324]	; 80091fc <__ieee754_expf+0x160>
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	bf18      	it	ne
 80090be:	eeb0 0a67 	vmovne.f32	s0, s15
 80090c2:	4770      	bx	lr
 80090c4:	484e      	ldr	r0, [pc, #312]	; (8009200 <__ieee754_expf+0x164>)
 80090c6:	4282      	cmp	r2, r0
 80090c8:	dd04      	ble.n	80090d4 <__ieee754_expf+0x38>
 80090ca:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8009204 <__ieee754_expf+0x168>
 80090ce:	ee20 0a00 	vmul.f32	s0, s0, s0
 80090d2:	4770      	bx	lr
 80090d4:	2a00      	cmp	r2, #0
 80090d6:	da03      	bge.n	80090e0 <__ieee754_expf+0x44>
 80090d8:	4a4b      	ldr	r2, [pc, #300]	; (8009208 <__ieee754_expf+0x16c>)
 80090da:	4291      	cmp	r1, r2
 80090dc:	f200 808a 	bhi.w	80091f4 <__ieee754_expf+0x158>
 80090e0:	4a4a      	ldr	r2, [pc, #296]	; (800920c <__ieee754_expf+0x170>)
 80090e2:	4291      	cmp	r1, r2
 80090e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80090e8:	d954      	bls.n	8009194 <__ieee754_expf+0xf8>
 80090ea:	4a49      	ldr	r2, [pc, #292]	; (8009210 <__ieee754_expf+0x174>)
 80090ec:	4291      	cmp	r1, r2
 80090ee:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80090f2:	d836      	bhi.n	8009162 <__ieee754_expf+0xc6>
 80090f4:	4947      	ldr	r1, [pc, #284]	; (8009214 <__ieee754_expf+0x178>)
 80090f6:	4411      	add	r1, r2
 80090f8:	ed91 7a00 	vldr	s14, [r1]
 80090fc:	4946      	ldr	r1, [pc, #280]	; (8009218 <__ieee754_expf+0x17c>)
 80090fe:	440a      	add	r2, r1
 8009100:	edd2 7a00 	vldr	s15, [r2]
 8009104:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009108:	f1c3 0201 	rsb	r2, r3, #1
 800910c:	1ad2      	subs	r2, r2, r3
 800910e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009112:	ee60 6a00 	vmul.f32	s13, s0, s0
 8009116:	eddf 5a41 	vldr	s11, [pc, #260]	; 800921c <__ieee754_expf+0x180>
 800911a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8009220 <__ieee754_expf+0x184>
 800911e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8009122:	eddf 5a40 	vldr	s11, [pc, #256]	; 8009224 <__ieee754_expf+0x188>
 8009126:	eee5 5a26 	vfma.f32	s11, s10, s13
 800912a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8009228 <__ieee754_expf+0x18c>
 800912e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8009132:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800922c <__ieee754_expf+0x190>
 8009136:	eee5 5a26 	vfma.f32	s11, s10, s13
 800913a:	eeb0 5a40 	vmov.f32	s10, s0
 800913e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8009142:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009146:	eef0 6a45 	vmov.f32	s13, s10
 800914a:	ee20 5a05 	vmul.f32	s10, s0, s10
 800914e:	bb92      	cbnz	r2, 80091b6 <__ieee754_expf+0x11a>
 8009150:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8009154:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009158:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800915c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8009160:	4770      	bx	lr
 8009162:	4b33      	ldr	r3, [pc, #204]	; (8009230 <__ieee754_expf+0x194>)
 8009164:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8009234 <__ieee754_expf+0x198>
 8009168:	4413      	add	r3, r2
 800916a:	edd3 7a00 	vldr	s15, [r3]
 800916e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009172:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009238 <__ieee754_expf+0x19c>
 8009176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800917a:	ee17 2a90 	vmov	r2, s15
 800917e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009182:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009186:	eeb0 7a40 	vmov.f32	s14, s0
 800918a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800923c <__ieee754_expf+0x1a0>
 800918e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009192:	e7bc      	b.n	800910e <__ieee754_expf+0x72>
 8009194:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8009198:	d20b      	bcs.n	80091b2 <__ieee754_expf+0x116>
 800919a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8009204 <__ieee754_expf+0x168>
 800919e:	ee70 6a26 	vadd.f32	s13, s0, s13
 80091a2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80091a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091aa:	dd02      	ble.n	80091b2 <__ieee754_expf+0x116>
 80091ac:	ee30 0a06 	vadd.f32	s0, s0, s12
 80091b0:	4770      	bx	lr
 80091b2:	2200      	movs	r2, #0
 80091b4:	e7ad      	b.n	8009112 <__ieee754_expf+0x76>
 80091b6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80091ba:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80091be:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80091c2:	bfb8      	it	lt
 80091c4:	3264      	addlt	r2, #100	; 0x64
 80091c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80091ca:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80091ce:	ee76 7a40 	vsub.f32	s15, s12, s0
 80091d2:	ee17 3a90 	vmov	r3, s15
 80091d6:	bfab      	itete	ge
 80091d8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80091dc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80091e0:	ee00 3a10 	vmovge	s0, r3
 80091e4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8009240 <__ieee754_expf+0x1a4>
 80091e8:	bfbc      	itt	lt
 80091ea:	ee00 3a10 	vmovlt	s0, r3
 80091ee:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80091f2:	4770      	bx	lr
 80091f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80091fc <__ieee754_expf+0x160>
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	00000000 	.word	0x00000000
 8009200:	42b17217 	.word	0x42b17217
 8009204:	7149f2ca 	.word	0x7149f2ca
 8009208:	42cff1b5 	.word	0x42cff1b5
 800920c:	3eb17218 	.word	0x3eb17218
 8009210:	3f851591 	.word	0x3f851591
 8009214:	08009e54 	.word	0x08009e54
 8009218:	08009e5c 	.word	0x08009e5c
 800921c:	3331bb4c 	.word	0x3331bb4c
 8009220:	b5ddea0e 	.word	0xb5ddea0e
 8009224:	388ab355 	.word	0x388ab355
 8009228:	bb360b61 	.word	0xbb360b61
 800922c:	3e2aaaab 	.word	0x3e2aaaab
 8009230:	08009e4c 	.word	0x08009e4c
 8009234:	3fb8aa3b 	.word	0x3fb8aa3b
 8009238:	3f317180 	.word	0x3f317180
 800923c:	3717f7d1 	.word	0x3717f7d1
 8009240:	0d800000 	.word	0x0d800000

08009244 <finitef>:
 8009244:	b082      	sub	sp, #8
 8009246:	ed8d 0a01 	vstr	s0, [sp, #4]
 800924a:	9801      	ldr	r0, [sp, #4]
 800924c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009250:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009254:	bfac      	ite	ge
 8009256:	2000      	movge	r0, #0
 8009258:	2001      	movlt	r0, #1
 800925a:	b002      	add	sp, #8
 800925c:	4770      	bx	lr
	...

08009260 <_close>:
 8009260:	4b02      	ldr	r3, [pc, #8]	; (800926c <_close+0xc>)
 8009262:	2258      	movs	r2, #88	; 0x58
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	f04f 30ff 	mov.w	r0, #4294967295
 800926a:	4770      	bx	lr
 800926c:	20000e9c 	.word	0x20000e9c

08009270 <_fstat>:
 8009270:	4b02      	ldr	r3, [pc, #8]	; (800927c <_fstat+0xc>)
 8009272:	2258      	movs	r2, #88	; 0x58
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	f04f 30ff 	mov.w	r0, #4294967295
 800927a:	4770      	bx	lr
 800927c:	20000e9c 	.word	0x20000e9c

08009280 <_getpid>:
 8009280:	4b02      	ldr	r3, [pc, #8]	; (800928c <_getpid+0xc>)
 8009282:	2258      	movs	r2, #88	; 0x58
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	f04f 30ff 	mov.w	r0, #4294967295
 800928a:	4770      	bx	lr
 800928c:	20000e9c 	.word	0x20000e9c

08009290 <_isatty>:
 8009290:	4b02      	ldr	r3, [pc, #8]	; (800929c <_isatty+0xc>)
 8009292:	2258      	movs	r2, #88	; 0x58
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	2000      	movs	r0, #0
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	20000e9c 	.word	0x20000e9c

080092a0 <_kill>:
 80092a0:	4b02      	ldr	r3, [pc, #8]	; (80092ac <_kill+0xc>)
 80092a2:	2258      	movs	r2, #88	; 0x58
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	f04f 30ff 	mov.w	r0, #4294967295
 80092aa:	4770      	bx	lr
 80092ac:	20000e9c 	.word	0x20000e9c

080092b0 <_lseek>:
 80092b0:	4b02      	ldr	r3, [pc, #8]	; (80092bc <_lseek+0xc>)
 80092b2:	2258      	movs	r2, #88	; 0x58
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ba:	4770      	bx	lr
 80092bc:	20000e9c 	.word	0x20000e9c

080092c0 <_read>:
 80092c0:	4b02      	ldr	r3, [pc, #8]	; (80092cc <_read+0xc>)
 80092c2:	2258      	movs	r2, #88	; 0x58
 80092c4:	601a      	str	r2, [r3, #0]
 80092c6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ca:	4770      	bx	lr
 80092cc:	20000e9c 	.word	0x20000e9c

080092d0 <_exit>:
 80092d0:	e7fe      	b.n	80092d0 <_exit>
	...

080092d4 <_init>:
 80092d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d6:	bf00      	nop
 80092d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092da:	bc08      	pop	{r3}
 80092dc:	469e      	mov	lr, r3
 80092de:	4770      	bx	lr

080092e0 <_fini>:
 80092e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e2:	bf00      	nop
 80092e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e6:	bc08      	pop	{r3}
 80092e8:	469e      	mov	lr, r3
 80092ea:	4770      	bx	lr
